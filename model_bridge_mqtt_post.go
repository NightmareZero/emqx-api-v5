/*
 * EMQX API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 5.1.3
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

type BridgeMqttPost struct {
	// The bridge type.
	Type_ string `json:"type"`
	// Bridge name, used as a human-readable description of the bridge.
	Name string `json:"name"`
	// Enable or disable this bridge
	Enable bool `json:"enable,omitempty"`
	ResourceOpts *BridgeMqttCreationOpts `json:"resource_opts,omitempty"`
	// The mode of the MQTT Bridge.<br/><br/>- cluster_shareload: create an MQTT connection on each node in the emqx cluster.<br/><br/>In 'cluster_shareload' mode, the incoming load from the remote broker is shared by<br/>using shared subscription.<br/><br/>Note that the 'clientid' is suffixed by the node name, this is to avoid<br/>clientid conflicts between different nodes. And we can only use shared subscription<br/>topic filters for <code>remote.topic</code> of ingress connections.
	Mode string `json:"mode,omitempty"`
	// The host and port of the remote MQTT broker
	Server string `json:"server"`
	// Optional prefix to prepend to the clientid used by egress bridges.
	ClientidPrefix string `json:"clientid_prefix,omitempty"`
	ReconnectInterval string `json:"reconnect_interval,omitempty"`
	// The MQTT protocol version
	ProtoVer string `json:"proto_ver,omitempty"`
	// If enable bridge mode.<br/>NOTE: This setting is only for MQTT protocol version older than 5.0, and the remote MQTT<br/>broker MUST support this feature.<br/>If bridge_mode is set to true, the bridge will indicate to the remote broker that it is a bridge not an ordinary client.<br/>This means that loop detection will be more effective and that retained messages will be propagated correctly.
	BridgeMode bool `json:"bridge_mode,omitempty"`
	// The username of the MQTT protocol
	Username string `json:"username,omitempty"`
	// The password of the MQTT protocol
	Password string `json:"password,omitempty"`
	// Whether to start a clean session when reconnecting a remote broker for ingress bridge
	CleanStart bool `json:"clean_start,omitempty"`
	// MQTT Keepalive. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,<br/>- `s` for seconds,<br/>- `m` for minutes,<br/>- `h` for hours;<br/><br/>or combination of whereof: `1h5m0s`
	Keepalive string `json:"keepalive,omitempty"`
	// Message retry interval. Delay for the MQTT bridge to retry sending the QoS1/QoS2 messages in case of ACK not received. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,<br/>- `s` for seconds,<br/>- `m` for minutes,<br/>- `h` for hours;<br/><br/>or combination of whereof: `1h5m0s`
	RetryInterval string `json:"retry_interval,omitempty"`
	// Max inflight (sent, but un-acked) messages of the MQTT protocol
	MaxInflight int32 `json:"max_inflight,omitempty"`
	Ssl *BrokerSslClientOpts `json:"ssl,omitempty"`
	Ingress *ConnectorMqttIngress `json:"ingress,omitempty"`
	Egress *ConnectorMqttEgress `json:"egress,omitempty"`
}
