openapi: 3.0.0
info:
  title: EMQX API
  version: 5.1.3
servers:
- url: /api/v5
paths:
  /authentication/{id}/position/{position}:
    put:
      tags:
      - Authentication
      description: Move authenticator in global authentication chain.
      parameters:
      - name: id
        in: path
        description: Authenticator ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: position
        in: path
        description: "Position of authenticator in chain. Possible values are 'front',\
          \ 'rear', 'before:{other_authenticator}', 'after:{other_authenticator}'."
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: before:password_based:built_in_database
      responses:
        "204":
          description: Authenticator moved
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - basicAuth: []
      - bearerAuth: []
  /metrics:
    get:
      tags:
      - Metrics
      description: EMQX metrics
      parameters:
      - name: aggregate
        in: query
        description: Whether to aggregate all nodes Metrics
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
      security:
      - basicAuth: []
      - bearerAuth: []
  /authentication/{id}/users/{user_id}:
    get:
      tags:
      - Authentication
      description: Get user from authenticator in global authentication chain.
      parameters:
      - name: id
        in: path
        description: Authenticator ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: user_id
        in: path
        description: User ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emqx_authn_api.response_user'
              examples:
                regular_user:
                  summary: Regular user
                  value:
                    user_id: user1
                super_user:
                  summary: Superuser
                  value:
                    is_superuser: true
                    user_id: user2
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - basicAuth: []
      - bearerAuth: []
    put:
      tags:
      - Authentication
      description: Update user in authenticator in global authentication chain.
      parameters:
      - name: id
        in: path
        description: Authenticator ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: user_id
        in: path
        description: User ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/emqx_authn_api.request_user_update'
            examples:
              regular_user:
                summary: Update regular user
                value:
                  password: '******'
              super_user:
                summary: Update user and promote to superuser
                value:
                  is_superuser: true
                  password: '******'
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emqx_authn_api.response_user'
              example:
                regular_user:
                  summary: Regular user
                  value:
                    user_id: user1
                super_user:
                  summary: Superuser
                  value:
                    is_superuser: true
                    user_id: user2
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - basicAuth: []
      - bearerAuth: []
    delete:
      tags:
      - Authentication
      description: Delete user in authenticator in global authentication chain.
      parameters:
      - name: id
        in: path
        description: Authenticator ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: user_id
        in: path
        description: User ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: User deleted
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - basicAuth: []
      - bearerAuth: []
  /authentication/{id}/import_users:
    post:
      tags:
      - Authentication
      description: Import users into authenticator in global authentication chain.
      parameters:
      - name: id
        in: path
        description: Authenticator ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/id_import_users_body'
      responses:
        "204":
          description: Users imported
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - basicAuth: []
      - bearerAuth: []
  /mqtt/delayed:
    get:
      tags:
      - MQTT
      description: Get delayed status
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/modules.delayed'
      security:
      - basicAuth: []
      - bearerAuth: []
    put:
      tags:
      - MQTT
      description: "Enable or disable delayed, set max delayed messages"
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/modules.delayed'
      responses:
        "200":
          description: Enable or disable delayed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/modules.delayed'
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_1'
      security:
      - basicAuth: []
      - bearerAuth: []
  /gateways/lwm2m/clients/{clientid}/observe:
    post:
      tags:
      - LwM2M Gateways
      summary: Observe a Resource
      description: Observe or Cancel observe a resource
      parameters:
      - name: clientid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: urn:oma:lwm2m:oma:2
      - name: path
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
        example: /3/0/7
      - name: enable
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: boolean
        example: true
      responses:
        "204":
          description: No Content
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_1'
      security:
      - basicAuth: []
      - bearerAuth: []
  /plugins/{name}:
    get:
      tags:
      - Plugins
      summary: Get a plugin description
      description: Describs plugin according to its `release.json` and `README.md`.
      parameters:
      - name: name
        in: path
        description: "^[A-Za-z]+[A-Za-z0-9-_.]*$"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: emqx_plugin_template-5.0-rc.1
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/plugins.plugin'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_2'
      security:
      - basicAuth: []
      - bearerAuth: []
    delete:
      tags:
      - Plugins
      summary: Delete a plugin
      description: Uninstalls a previously uploaded plugin package.
      parameters:
      - name: name
        in: path
        description: "^[A-Za-z]+[A-Za-z0-9-_.]*$"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: emqx_plugin_template-5.0-rc.1
      responses:
        "204":
          description: Uninstall successfully
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_2'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_2'
      security:
      - basicAuth: []
      - bearerAuth: []
  /bridges/{id}/metrics/reset:
    put:
      tags:
      - Bridges
      summary: Reset bridge metrics
      description: Reset a bridge metrics by Id
      parameters:
      - name: id
        in: path
        description: "The bridge Id. Must be of format {type}:{name}"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: webhook:webhook_example
      responses:
        "204":
          description: Reset success
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_3'
      security:
      - basicAuth: []
      - bearerAuth: []
  /status:
    get:
      tags:
      - Status
      description: "Serves as a health check for the node.<br/>Returns response to\
        \ describe the status of the node and the application.<br/><br/>This endpoint\
        \ requires no authentication.<br/><br/>Returns status code 200 if the EMQX\
        \ application is up and running, 503 otherwise.<br/>This API was introduced\
        \ in v5.0.10.<br/>The GET `/status` endpoint (without the `/api/...` prefix)\
        \ is also an alias to this endpoint and works in the same way.<br/>This alias\
        \ has been available since v5.0.0.<br/><br/>Starting from v5.0.25 or e5.0.4,\
        \ you can also use 'format' parameter to get JSON format information."
      parameters:
      - name: format
        in: query
        description: "Specify the response format, 'text' (default) to return the\
          \ HTTP body in free text,<br/>or 'json' to return the HTTP body with a JSON\
          \ object."
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: text
      responses:
        "200":
          description: "If 'format' parameter is 'json', then it returns a JSON like\
            \ below:<br/><br/>{<br/>  \"rel_vsn\": \"v5.0.23\",<br/>  \"node_name\"\
            : \"emqx@127.0.0.1\",<br/>  \"broker_status\": \"started\",<br/>  \"app_status\"\
            : \"running\"<br/>}<br/><br/><br/>Otherwise it returns free text strings\
            \ as below:<br/><br/>Node emqx@127.0.0.1 is started<br/>emqx is running"
        "503":
          description: "When EMQX application is temporary not running or being restarted,\
            \ it may return 'emqx is not_running'.<br/>If the 'format' parameter is\
            \ provided 'json', then the 'app_status' field in the JSON object will\
            \ be 'not_running'."
      security: []
  /topics/{topic}:
    get:
      tags:
      - Topics
      description: Lookup topic info by name
      parameters:
      - name: topic
        in: path
        description: Topic Name
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: ""
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/emqx_mgmt_api_topics.topic'
                x-content-type: application/json
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_4'
      security:
      - basicAuth: []
      - bearerAuth: []
  /stats:
    get:
      tags:
      - Metrics
      description: EMQX stats
      parameters:
      - name: aggregate
        in: query
        description: Calculation aggregate for all nodes
        required: false
        style: form
        explode: true
        schema:
          type: boolean
        example: false
      responses:
        "200":
          description: List stats ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
      security:
      - basicAuth: []
      - bearerAuth: []
  /monitor_current:
    get:
      tags:
      - Metrics
      description: "Current monitor (statistics) data, e.g. number of connections\
        \ and connection rate in the whole cluster."
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emqx_dashboard_monitor_api.sampler_current'
      security:
      - basicAuth: []
      - bearerAuth: []
  /authorization/sources/built_in_database/rules/users:
    get:
      tags:
      - Authorization
      description: Show the list of rules for users
      parameters:
      - name: page
        in: query
        description: Page number of the results to fetch.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
        example: 1
      - name: limit
        in: query
        description: Results per page(max 1000)
        required: false
        style: form
        explode: true
        schema:
          maximum: 1000
          minimum: 1
          type: integer
          default: 100
        example: 50
      - name: like_username
        in: query
        description: Fuzzy search `username` as substring
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emqx_authz_api_mnesia.username_response_data'
              examples:
                password_based:built_in_database:
                  summary: Username
                  value:
                    data:
                    - rules:
                      - action: publish
                        permission: allow
                        topic: test/topic/1
                      - action: subscribe
                        permission: allow
                        topic: test/topic/2
                      - action: all
                        permission: deny
                        topic: eq test/#
                      - action: publish
                        permission: allow
                        qos:
                        - "1"
                        retain: "true"
                        topic: test/topic/3
                      - action: publish
                        permission: allow
                        qos:
                        - "0"
                        - "1"
                        - "2"
                        retain: all
                        topic: test/topic/4
                      username: user1
                    meta:
                      count: 1
                      limit: 100
                      page: 1
      security:
      - basicAuth: []
      - bearerAuth: []
    post:
      tags:
      - Authorization
      description: Add new rule for 'username'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/emqx_authz_api_mnesia.rules_for_username'
            examples:
              password_based:built_in_database:
                summary: Username
                value:
                - rules:
                  - action: publish
                    permission: allow
                    topic: test/topic/1
                  - action: subscribe
                    permission: allow
                    topic: test/topic/2
                  - action: all
                    permission: deny
                    topic: eq test/#
                  - action: publish
                    permission: allow
                    qos:
                    - "1"
                    retain: "true"
                    topic: test/topic/3
                  - action: publish
                    permission: allow
                    qos:
                    - "0"
                    - "1"
                    - "2"
                    retain: all
                    topic: test/topic/4
                  username: user1
      responses:
        "204":
          description: Created
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_3'
        "409":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_409'
      security:
      - basicAuth: []
      - bearerAuth: []
  /nodes/{node}/stats:
    get:
      tags:
      - Nodes
      description: "Get node run-time stats. Such as the number of topics, connections,\
        \ etc."
      parameters:
      - name: node
        in: path
        description: Node name
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: emqx@127.0.0.1
      responses:
        "200":
          description: Get node stats successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emqx_mgmt_api_stats.node_stats_data'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_5'
      security:
      - basicAuth: []
      - bearerAuth: []
  /exhooks/{name}:
    get:
      tags:
      - ExHook
      description: Get the detail information of Exhook server
      parameters:
      - name: name
        in: path
        description: The Exhook server name
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: default
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exhook.detail_server_info'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_6'
      security:
      - basicAuth: []
      - bearerAuth: []
    put:
      tags:
      - ExHook
      description: Update the server
      parameters:
      - name: name
        in: path
        description: The Exhook server name
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: default
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/exhook.server_config'
            example:
              auto_reconnect: 60s
              enable: true
              failed_action: deny
              name: default
              pool_size: 8
              request_timeout: 5s
              ssl:
                cacertfile: /etc/emqx/certs/cacert.pem
                certfile: /etc/emqx/certs/cert.pem
                enable: false
                keyfile: /etc/emqx/certs/key.pem
              url: http://127.0.0.1:8081
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exhook.detail_server_info'
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_6'
        "500":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      security:
      - basicAuth: []
      - bearerAuth: []
    delete:
      tags:
      - ExHook
      description: Delete the server
      parameters:
      - name: name
        in: path
        description: The Exhook server name
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: default
      responses:
        "204":
          description: ""
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_6'
        "500":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      security:
      - basicAuth: []
      - bearerAuth: []
  /prometheus:
    get:
      tags:
      - Monitor
      description: Get Prometheus config info
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/prometheus.prometheus'
              example:
                enable: true
                headers:
                  header-name: header-value
                interval: 15s
                job_name: "${name}/instance/${name}~${host}"
                push_gateway_server: http://127.0.0.1:9091
      security:
      - basicAuth: []
      - bearerAuth: []
    put:
      tags:
      - Monitor
      description: Update Prometheus config
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/prometheus.prometheus'
            example:
              enable: true
              headers:
                header-name: header-value
              interval: 15s
              job_name: "${name}/instance/${name}~${host}"
              push_gateway_server: http://127.0.0.1:9091
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/prometheus.prometheus'
              example:
                enable: true
                headers:
                  header-name: header-value
                interval: 15s
                job_name: "${name}/instance/${name}~${host}"
                push_gateway_server: http://127.0.0.1:9091
      security:
      - basicAuth: []
      - bearerAuth: []
  /mqtt/auto_subscribe:
    get:
      tags:
      - Auto Subscribe
      description: Get auto subscribe topic list
      parameters: []
      responses:
        "200":
          description: "After the device logs in successfully, the subscription is\
            \ automatically completed for the device through the pre-defined subscription\
            \ representation. Supports the use of placeholders."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/auto_subscribe.topic'
                x-content-type: application/json
      security:
      - basicAuth: []
      - bearerAuth: []
    put:
      tags:
      - Auto Subscribe
      description: Update auto subscribe topic list
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/auto_subscribe.topic'
      responses:
        "200":
          description: "After the device logs in successfully, the subscription is\
            \ automatically completed for the device through the pre-defined subscription\
            \ representation. Supports the use of placeholders."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/auto_subscribe.topic'
                x-content-type: application/json
        "409":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_409_1'
      security:
      - basicAuth: []
      - bearerAuth: []
  /gateways/{name}/listeners/{id}/authentication:
    get:
      tags:
      - Gateway Listeners
      summary: Get the listener's authenticator
      description: Get the listener's authenticator configs.
      parameters:
      - name: name
        in: path
        description: "Gateway Name.<br/><br/>It's enum with `stomp`, `mqttsn`, `coap`,\
          \ `lwm2m`, `exproto`"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: stomp
      - name: id
        in: path
        description: Listener ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: ""
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_2'
              examples:
                jwt:
                  summary: JWT authentication
                  value:
                    algorithm: hmac-based
                    mechanism: jwt
                    secret: mysecret
                    secret_base64_encoded: false
                    use_jwks: false
                    verify_claims:
                      username: "${username}"
                password_based:built_in_database:
                  summary: Built-in password_based authentication
                  value:
                    backend: built_in_database
                    mechanism: password_based
                    password_hash_algorithm:
                      name: sha256
                      salt_position: suffix
                    user_id_type: username
                password_based:http:
                  summary: password_based authentication through external HTTP API
                  value:
                    backend: http
                    body:
                      password: "${password}"
                      username: "${username}"
                    connect_timeout: 5s
                    enable_pipelining: 100
                    headers:
                      content-type: application/json
                    mechanism: password_based
                    method: post
                    pool_size: 8
                    request_timeout: 5s
                    ssl:
                      enable: false
                    url: http://127.0.0.1:18083
                password_based:mongodb:
                  summary: password_based authentication with MongoDB backend
                  value:
                    backend: mongodb
                    collection: users
                    database: example
                    filter:
                      username: "${username}"
                    is_superuser_field: is_superuser
                    mechanism: password_based
                    password_hash_algorithm:
                      name: sha256
                      salt_position: suffix
                    password_hash_field: password_hash
                    salt_field: salt
                    server: 127.0.0.1:27017
                password_based:redis:
                  summary: password_based authentication with Redis backend
                  value:
                    backend: redis
                    cmd: "HMGET ${username} password_hash salt"
                    database: 0
                    mechanism: password_based
                    password_hash_algorithm:
                      name: sha256
                      salt_position: suffix
                    redis_type: single
                    server: 127.0.0.1:6379
        "204":
          description: Authentication or listener does not existed
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_4'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_7'
      security:
      - basicAuth: []
      - bearerAuth: []
    put:
      tags:
      - Gateway Listeners
      summary: Update config of authenticator for listener
      description: "Update authenticator configs for the listener, or disable/enable\
        \ it."
      parameters:
      - name: name
        in: path
        description: "Gateway Name.<br/><br/>It's enum with `stomp`, `mqttsn`, `coap`,\
          \ `lwm2m`, `exproto`"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: stomp
      - name: id
        in: path
        description: Listener ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/id_authentication_body'
            examples:
              jwt:
                summary: JWT authentication
                value:
                  algorithm: hmac-based
                  mechanism: jwt
                  secret: mysecret
                  secret_base64_encoded: false
                  use_jwks: false
                  verify_claims:
                    username: "${username}"
              password_based:built_in_database:
                summary: Built-in password_based authentication
                value:
                  backend: built_in_database
                  mechanism: password_based
                  password_hash_algorithm:
                    name: sha256
                    salt_position: suffix
                  user_id_type: username
              password_based:http:
                summary: password_based authentication through external HTTP API
                value:
                  backend: http
                  body:
                    password: "${password}"
                    username: "${username}"
                  connect_timeout: 5s
                  enable_pipelining: 100
                  headers:
                    content-type: application/json
                  mechanism: password_based
                  method: post
                  pool_size: 8
                  request_timeout: 5s
                  ssl:
                    enable: false
                  url: http://127.0.0.1:18083
              password_based:mongodb:
                summary: password_based authentication with MongoDB backend
                value:
                  backend: mongodb
                  collection: users
                  database: example
                  filter:
                    username: "${username}"
                  is_superuser_field: is_superuser
                  mechanism: password_based
                  password_hash_algorithm:
                    name: sha256
                    salt_position: suffix
                  password_hash_field: password_hash
                  salt_field: salt
                  server: 127.0.0.1:27017
              password_based:redis:
                summary: password_based authentication with Redis backend
                value:
                  backend: redis
                  cmd: "HMGET ${username} password_hash salt"
                  database: 0
                  mechanism: password_based
                  password_hash_algorithm:
                    name: sha256
                    salt_position: suffix
                  redis_type: single
                  server: 127.0.0.1:6379
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/id_authentication_body'
              examples:
                jwt:
                  summary: JWT authentication
                  value:
                    algorithm: hmac-based
                    mechanism: jwt
                    secret: mysecret
                    secret_base64_encoded: false
                    use_jwks: false
                    verify_claims:
                      username: "${username}"
                password_based:built_in_database:
                  summary: Built-in password_based authentication
                  value:
                    backend: built_in_database
                    mechanism: password_based
                    password_hash_algorithm:
                      name: sha256
                      salt_position: suffix
                    user_id_type: username
                password_based:http:
                  summary: password_based authentication through external HTTP API
                  value:
                    backend: http
                    body:
                      password: "${password}"
                      username: "${username}"
                    connect_timeout: 5s
                    enable_pipelining: 100
                    headers:
                      content-type: application/json
                    mechanism: password_based
                    method: post
                    pool_size: 8
                    request_timeout: 5s
                    ssl:
                      enable: false
                    url: http://127.0.0.1:18083
                password_based:mongodb:
                  summary: password_based authentication with MongoDB backend
                  value:
                    backend: mongodb
                    collection: users
                    database: example
                    filter:
                      username: "${username}"
                    is_superuser_field: is_superuser
                    mechanism: password_based
                    password_hash_algorithm:
                      name: sha256
                      salt_position: suffix
                    password_hash_field: password_hash
                    salt_field: salt
                    server: 127.0.0.1:27017
                password_based:redis:
                  summary: password_based authentication with Redis backend
                  value:
                    backend: redis
                    cmd: "HMGET ${username} password_hash salt"
                    database: 0
                    mechanism: password_based
                    password_hash_algorithm:
                      name: sha256
                      salt_position: suffix
                    redis_type: single
                    server: 127.0.0.1:6379
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_4'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_7'
      security:
      - basicAuth: []
      - bearerAuth: []
    post:
      tags:
      - Gateway Listeners
      summary: Create authenticator for listener
      description: "Enable authenticator for specified listener for client authentication.<br/><br/>When\
        \ authenticator is enabled for a listener, all clients connecting to that\
        \ listener will use that authenticator for authentication."
      parameters:
      - name: name
        in: path
        description: "Gateway Name.<br/><br/>It's enum with `stomp`, `mqttsn`, `coap`,\
          \ `lwm2m`, `exproto`"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: stomp
      - name: id
        in: path
        description: Listener ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/id_authentication_body_1'
            examples:
              jwt:
                summary: JWT authentication
                value:
                  algorithm: hmac-based
                  mechanism: jwt
                  secret: mysecret
                  secret_base64_encoded: false
                  use_jwks: false
                  verify_claims:
                    username: "${username}"
              password_based:built_in_database:
                summary: Built-in password_based authentication
                value:
                  backend: built_in_database
                  mechanism: password_based
                  password_hash_algorithm:
                    name: sha256
                    salt_position: suffix
                  user_id_type: username
              password_based:http:
                summary: password_based authentication through external HTTP API
                value:
                  backend: http
                  body:
                    password: "${password}"
                    username: "${username}"
                  connect_timeout: 5s
                  enable_pipelining: 100
                  headers:
                    content-type: application/json
                  mechanism: password_based
                  method: post
                  pool_size: 8
                  request_timeout: 5s
                  ssl:
                    enable: false
                  url: http://127.0.0.1:18083
              password_based:mongodb:
                summary: password_based authentication with MongoDB backend
                value:
                  backend: mongodb
                  collection: users
                  database: example
                  filter:
                    username: "${username}"
                  is_superuser_field: is_superuser
                  mechanism: password_based
                  password_hash_algorithm:
                    name: sha256
                    salt_position: suffix
                  password_hash_field: password_hash
                  salt_field: salt
                  server: 127.0.0.1:27017
              password_based:redis:
                summary: password_based authentication with Redis backend
                value:
                  backend: redis
                  cmd: "HMGET ${username} password_hash salt"
                  database: 0
                  mechanism: password_based
                  password_hash_algorithm:
                    name: sha256
                    salt_position: suffix
                  redis_type: single
                  server: 127.0.0.1:6379
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/id_authentication_body_1'
              examples:
                jwt:
                  summary: JWT authentication
                  value:
                    algorithm: hmac-based
                    mechanism: jwt
                    secret: mysecret
                    secret_base64_encoded: false
                    use_jwks: false
                    verify_claims:
                      username: "${username}"
                password_based:built_in_database:
                  summary: Built-in password_based authentication
                  value:
                    backend: built_in_database
                    mechanism: password_based
                    password_hash_algorithm:
                      name: sha256
                      salt_position: suffix
                    user_id_type: username
                password_based:http:
                  summary: password_based authentication through external HTTP API
                  value:
                    backend: http
                    body:
                      password: "${password}"
                      username: "${username}"
                    connect_timeout: 5s
                    enable_pipelining: 100
                    headers:
                      content-type: application/json
                    mechanism: password_based
                    method: post
                    pool_size: 8
                    request_timeout: 5s
                    ssl:
                      enable: false
                    url: http://127.0.0.1:18083
                password_based:mongodb:
                  summary: password_based authentication with MongoDB backend
                  value:
                    backend: mongodb
                    collection: users
                    database: example
                    filter:
                      username: "${username}"
                    is_superuser_field: is_superuser
                    mechanism: password_based
                    password_hash_algorithm:
                      name: sha256
                      salt_position: suffix
                    password_hash_field: password_hash
                    salt_field: salt
                    server: 127.0.0.1:27017
                password_based:redis:
                  summary: password_based authentication with Redis backend
                  value:
                    backend: redis
                    cmd: "HMGET ${username} password_hash salt"
                    database: 0
                    mechanism: password_based
                    password_hash_algorithm:
                      name: sha256
                      salt_position: suffix
                    redis_type: single
                    server: 127.0.0.1:6379
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_4'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_7'
      security:
      - basicAuth: []
      - bearerAuth: []
    delete:
      tags:
      - Gateway Listeners
      summary: Delete the listener's authenticator
      description: Remove authenticator for the listener.
      parameters:
      - name: name
        in: path
        description: "Gateway Name.<br/><br/>It's enum with `stomp`, `mqttsn`, `coap`,\
          \ `lwm2m`, `exproto`"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: stomp
      - name: id
        in: path
        description: Listener ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: ""
      responses:
        "200":
          description: Deleted
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_4'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_7'
      security:
      - basicAuth: []
      - bearerAuth: []
  /gateways/{name}/listeners:
    get:
      tags:
      - Gateway Listeners
      summary: List all listeners
      description: "Gets a list of gateway listeners. This interface returns all the\
        \ configs of the listener (including the authenticator on that listener),\
        \ as well as the status of that listener running in the cluster."
      parameters:
      - name: name
        in: path
        description: "Gateway Name.<br/><br/>It's enum with `stomp`, `mqttsn`, `coap`,\
          \ `lwm2m`, `exproto`"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: stomp
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                  - $ref: '#/components/schemas/emqx_gateway_api_listeners.dtls_listener'
                  - $ref: '#/components/schemas/emqx_gateway_api_listeners.udp_listener'
                  - $ref: '#/components/schemas/emqx_gateway_api_listeners.ssl_listener'
                  - $ref: '#/components/schemas/emqx_gateway_api_listeners.tcp_listener'
                x-content-type: application/json
              example:
              - acceptors: 16
                access_rules:
                - allow all
                bind: "22213"
                dtls_options:
                  cacertfile: /etc/emqx/certs/cacert.pem
                  certfile: /etc/emqx/certs/cert.pem
                  fail_if_no_peer_cert: false
                  keyfile: /etc/emqx/certs/key.pem
                  verify: verify_none
                  versions:
                  - dtlsv1.2
                  - dtlsv1
                max_conn_rate: 1000
                max_connections: 1024000
                name: dtls-def
                node_status:
                - node: emqx@127.0.0.1
                  status:
                    current_connections: 10
                    max_connections: 1024000
                    running: true
                status:
                  current_connections: 10
                  max_connections: 1024000
                  running: true
                type: dtls
                udp_options:
                  active_n: 100
                  backlog: 1024
              - acceptors: 16
                bind: "22214"
                dtls_options:
                  cacertfile: /etc/emqx/certs/cacert.pem
                  certfile: /etc/emqx/certs/cert.pem
                  ciphers: "RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA"
                  fail_if_no_peer_cert: false
                  keyfile: /etc/emqx/certs/key.pem
                  user_lookup_fun: emqx_tls_psk:lookup
                  verify: verify_none
                  versions:
                  - dtlsv1.2
                  - dtlsv1
                max_conn_rate: 1000
                max_connections: 1024000
                name: dtls-psk
                node_status:
                - node: emqx@127.0.0.1
                  status:
                    current_connections: 10
                    max_connections: 1024000
                    running: true
                status:
                  current_connections: 10
                  max_connections: 1024000
                  running: true
                type: dtls
              - acceptors: 16
                authentication:
                  backend: built_in_database
                  mechanism: password_based
                  password_hash_algorithm:
                    name: sha256
                  user_id_type: username
                bind: "22215"
                max_conn_rate: 1000
                max_connections: 1024000
                name: tcp-with-authn
                node_status:
                - node: emqx@127.0.0.1
                  status:
                    current_connections: 10
                    max_connections: 1024000
                    running: true
                status:
                  current_connections: 10
                  max_connections: 1024000
                  running: true
                type: tcp
              - acceptors: 16
                access_rules:
                - allow all
                bind: "22211"
                max_conn_rate: 1000
                max_connections: 1024000
                name: ssl-def
                node_status:
                - node: emqx@127.0.0.1
                  status:
                    current_connections: 10
                    max_connections: 1024000
                    running: true
                ssl_options:
                  cacertfile: /etc/emqx/certs/cacert.pem
                  certfile: /etc/emqx/certs/cert.pem
                  fail_if_no_peer_cert: false
                  keyfile: /etc/emqx/certs/key.pem
                  verify: verify_none
                  versions:
                  - tlsv1.3
                  - tlsv1.2
                  - tlsv1.1
                  - tlsv1
                status:
                  current_connections: 10
                  max_connections: 1024000
                  running: true
                tcp_options:
                  active_n: 100
                  backlog: 1024
                type: ssl
              - acceptors: 16
                bind: "22210"
                max_conn_rate: 1000
                max_connections: 1024000
                name: tcp-def
                node_status:
                - node: emqx@127.0.0.1
                  status:
                    current_connections: 10
                    max_connections: 1024000
                    running: true
                status:
                  current_connections: 10
                  max_connections: 1024000
                  running: true
                tcp_options:
                  active_n: 100
                  backlog: 1024
                  buffer: 10KB
                  high_watermark: 1MB
                  keepalive: none
                  nodelay: false
                  recbuf: 10KB
                  reuseaddr: true
                  send_timeout: 15s
                  send_timeout_close: true
                  sndbuf: 10KB
                type: tcp
              - bind: "22212"
                name: udp-def
                node_status:
                - node: emqx@127.0.0.1
                  status:
                    current_connections: 10
                    max_connections: 1024000
                    running: true
                status:
                  current_connections: 10
                  max_connections: 1024000
                  running: true
                type: udp
                udp_options:
                  active_n: 100
                  buffer: 10KB
                  recbuf: 10KB
                  reuseaddr: true
                  sndbuf: 10KB
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_4'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_7'
      security:
      - basicAuth: []
      - bearerAuth: []
    post:
      tags:
      - Gateway Listeners
      summary: Add listener
      description: "Create the gateway listener.<br/><br/>Note: For listener types\
        \ not supported by a gateway, this API returns `400: BAD_REQUEST`."
      parameters:
      - name: name
        in: path
        description: "Gateway Name.<br/><br/>It's enum with `stomp`, `mqttsn`, `coap`,\
          \ `lwm2m`, `exproto`"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: stomp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/name_listeners_body'
            examples:
              dtls_listener:
                summary: A simple DTLS listener example
                value:
                  acceptors: 16
                  access_rules:
                  - allow all
                  bind: "22213"
                  dtls_options:
                    cacertfile: /etc/emqx/certs/cacert.pem
                    certfile: /etc/emqx/certs/cert.pem
                    fail_if_no_peer_cert: false
                    keyfile: /etc/emqx/certs/key.pem
                    verify: verify_none
                    versions:
                    - dtlsv1.2
                    - dtlsv1
                  max_conn_rate: 1000
                  max_connections: 1024000
                  name: dtls-def
                  type: dtls
                  udp_options:
                    active_n: 100
                    backlog: 1024
              dtls_listener_with_psk_ciphers:
                summary: A DTLS listener with PSK example
                value:
                  acceptors: 16
                  bind: "22214"
                  dtls_options:
                    cacertfile: /etc/emqx/certs/cacert.pem
                    certfile: /etc/emqx/certs/cert.pem
                    ciphers: "RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA"
                    fail_if_no_peer_cert: false
                    keyfile: /etc/emqx/certs/key.pem
                    user_lookup_fun: emqx_tls_psk:lookup
                    verify: verify_none
                    versions:
                    - dtlsv1.2
                    - dtlsv1
                  max_conn_rate: 1000
                  max_connections: 1024000
                  name: dtls-psk
                  type: dtls
              lisetner_with_authn:
                summary: A TCP listener with authentication example
                value:
                  acceptors: 16
                  authentication:
                    backend: built_in_database
                    mechanism: password_based
                    password_hash_algorithm:
                      name: sha256
                    user_id_type: username
                  bind: "22215"
                  max_conn_rate: 1000
                  max_connections: 1024000
                  name: tcp-with-authn
                  type: tcp
              ssl_listener:
                summary: A simple SSL listener example
                value:
                  acceptors: 16
                  access_rules:
                  - allow all
                  bind: "22211"
                  max_conn_rate: 1000
                  max_connections: 1024000
                  name: ssl-def
                  ssl_options:
                    cacertfile: /etc/emqx/certs/cacert.pem
                    certfile: /etc/emqx/certs/cert.pem
                    fail_if_no_peer_cert: false
                    keyfile: /etc/emqx/certs/key.pem
                    verify: verify_none
                    versions:
                    - tlsv1.3
                    - tlsv1.2
                    - tlsv1.1
                    - tlsv1
                  tcp_options:
                    active_n: 100
                    backlog: 1024
                  type: ssl
              tcp_listener:
                summary: A simple TCP listener example
                value:
                  acceptors: 16
                  bind: "22210"
                  max_conn_rate: 1000
                  max_connections: 1024000
                  name: tcp-def
                  tcp_options:
                    active_n: 100
                    backlog: 1024
                    buffer: 10KB
                    high_watermark: 1MB
                    keepalive: none
                    nodelay: false
                    recbuf: 10KB
                    reuseaddr: true
                    send_timeout: 15s
                    send_timeout_close: true
                    sndbuf: 10KB
                  type: tcp
              udp_listener:
                summary: A simple UDP listener example
                value:
                  bind: "22212"
                  name: udp-def
                  type: udp
                  udp_options:
                    active_n: 100
                    buffer: 10KB
                    recbuf: 10KB
                    reuseaddr: true
                    sndbuf: 10KB
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/name_listeners_body'
              examples:
                dtls_listener:
                  summary: A simple DTLS listener example
                  value:
                    acceptors: 16
                    access_rules:
                    - allow all
                    bind: "22213"
                    dtls_options:
                      cacertfile: /etc/emqx/certs/cacert.pem
                      certfile: /etc/emqx/certs/cert.pem
                      fail_if_no_peer_cert: false
                      keyfile: /etc/emqx/certs/key.pem
                      verify: verify_none
                      versions:
                      - dtlsv1.2
                      - dtlsv1
                    max_conn_rate: 1000
                    max_connections: 1024000
                    name: dtls-def
                    type: dtls
                    udp_options:
                      active_n: 100
                      backlog: 1024
                dtls_listener_with_psk_ciphers:
                  summary: A DTLS listener with PSK example
                  value:
                    acceptors: 16
                    bind: "22214"
                    dtls_options:
                      cacertfile: /etc/emqx/certs/cacert.pem
                      certfile: /etc/emqx/certs/cert.pem
                      ciphers: "RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA"
                      fail_if_no_peer_cert: false
                      keyfile: /etc/emqx/certs/key.pem
                      user_lookup_fun: emqx_tls_psk:lookup
                      verify: verify_none
                      versions:
                      - dtlsv1.2
                      - dtlsv1
                    max_conn_rate: 1000
                    max_connections: 1024000
                    name: dtls-psk
                    type: dtls
                lisetner_with_authn:
                  summary: A TCP listener with authentication example
                  value:
                    acceptors: 16
                    authentication:
                      backend: built_in_database
                      mechanism: password_based
                      password_hash_algorithm:
                        name: sha256
                      user_id_type: username
                    bind: "22215"
                    max_conn_rate: 1000
                    max_connections: 1024000
                    name: tcp-with-authn
                    type: tcp
                ssl_listener:
                  summary: A simple SSL listener example
                  value:
                    acceptors: 16
                    access_rules:
                    - allow all
                    bind: "22211"
                    max_conn_rate: 1000
                    max_connections: 1024000
                    name: ssl-def
                    ssl_options:
                      cacertfile: /etc/emqx/certs/cacert.pem
                      certfile: /etc/emqx/certs/cert.pem
                      fail_if_no_peer_cert: false
                      keyfile: /etc/emqx/certs/key.pem
                      verify: verify_none
                      versions:
                      - tlsv1.3
                      - tlsv1.2
                      - tlsv1.1
                      - tlsv1
                    tcp_options:
                      active_n: 100
                      backlog: 1024
                    type: ssl
                tcp_listener:
                  summary: A simple TCP listener example
                  value:
                    acceptors: 16
                    bind: "22210"
                    max_conn_rate: 1000
                    max_connections: 1024000
                    name: tcp-def
                    tcp_options:
                      active_n: 100
                      backlog: 1024
                      buffer: 10KB
                      high_watermark: 1MB
                      keepalive: none
                      nodelay: false
                      recbuf: 10KB
                      reuseaddr: true
                      send_timeout: 15s
                      send_timeout_close: true
                      sndbuf: 10KB
                    type: tcp
                udp_listener:
                  summary: A simple UDP listener example
                  value:
                    bind: "22212"
                    name: udp-def
                    type: udp
                    udp_options:
                      active_n: 100
                      buffer: 10KB
                      recbuf: 10KB
                      reuseaddr: true
                      sndbuf: 10KB
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_4'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_7'
      security:
      - basicAuth: []
      - bearerAuth: []
  /configs/sys_topics:
    get:
      tags:
      - Configs
      summary: Get the sub-configurations under *sys_topics*
      description: Get the sub-configurations under *sys_topics*
      parameters: []
      responses:
        "200":
          description: System topics configuration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/broker.sys_topics'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_8'
      security:
      - basicAuth: []
      - bearerAuth: []
    put:
      tags:
      - Configs
      summary: Update the sub-configurations under *sys_topics*
      description: Update the sub-configurations under *sys_topics*
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/broker.sys_topics'
      responses:
        "200":
          description: System topics configuration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/broker.sys_topics'
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_5'
        "403":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_5'
      security:
      - basicAuth: []
      - bearerAuth: []
  /clients/kickout/bulk:
    post:
      tags:
      - Clients
      description: Kick out a batch of client by client IDs
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
            - emqx_clienid_985bb09d
            - emqx_clientid_211cc01c
      responses:
        "204":
          description: Kick out clients successfully
      security:
      - basicAuth: []
      - bearerAuth: []
  /authorization/sources/built_in_database/rules/clients:
    get:
      tags:
      - Authorization
      description: Show the list of rules for clients
      parameters:
      - name: page
        in: query
        description: Page number of the results to fetch.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
        example: 1
      - name: limit
        in: query
        description: Results per page(max 1000)
        required: false
        style: form
        explode: true
        schema:
          maximum: 1000
          minimum: 1
          type: integer
          default: 100
        example: 50
      - name: like_clientid
        in: query
        description: Fuzzy search `clientid` as substring
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emqx_authz_api_mnesia.clientid_response_data'
              examples:
                password_based:built_in_database:
                  summary: ClientID
                  value:
                    data:
                    - clientid: client1
                      rules:
                      - action: publish
                        permission: allow
                        topic: test/topic/1
                      - action: subscribe
                        permission: allow
                        topic: test/topic/2
                      - action: all
                        permission: deny
                        topic: eq test/#
                      - action: publish
                        permission: allow
                        qos:
                        - "1"
                        retain: "true"
                        topic: test/topic/3
                      - action: publish
                        permission: allow
                        qos:
                        - "0"
                        - "1"
                        - "2"
                        retain: all
                        topic: test/topic/4
                    meta:
                      count: 1
                      limit: 100
                      page: 1
      security:
      - basicAuth: []
      - bearerAuth: []
    post:
      tags:
      - Authorization
      description: Add new rule for 'clientid'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/emqx_authz_api_mnesia.rules_for_clientid'
            examples:
              password_based:built_in_database:
                summary: ClientID
                value:
                - clientid: client1
                  rules:
                  - action: publish
                    permission: allow
                    topic: test/topic/1
                  - action: subscribe
                    permission: allow
                    topic: test/topic/2
                  - action: all
                    permission: deny
                    topic: eq test/#
                  - action: publish
                    permission: allow
                    qos:
                    - "1"
                    retain: "true"
                    topic: test/topic/3
                  - action: publish
                    permission: allow
                    qos:
                    - "0"
                    - "1"
                    - "2"
                    retain: all
                    topic: test/topic/4
      responses:
        "204":
          description: Created
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_6'
      security:
      - basicAuth: []
      - bearerAuth: []
  /mqtt/delayed/messages/{node}/{msgid}:
    get:
      tags:
      - MQTT
      description: View delayed message
      parameters:
      - name: node
        in: path
        description: The node where message from
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: msgid
        in: path
        description: Delayed Message ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emqx_delayed_api.message_without_payload'
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_7'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_9'
      security:
      - basicAuth: []
      - bearerAuth: []
    delete:
      tags:
      - MQTT
      description: Delete delayed message
      parameters:
      - name: node
        in: path
        description: The node where message from
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: msgid
        in: path
        description: Delayed Message ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Delete delayed message success
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_7'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_9'
      security:
      - basicAuth: []
      - bearerAuth: []
  /monitor_current/nodes/{node}:
    get:
      tags:
      - Metrics
      description: "Node monitor (statistics) data, e.g. number of connections and\
        \ connection rate on the specified node."
      parameters:
      - name: node
        in: path
        description: EMQX node name.
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: emqx@172.20.0.2
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emqx_dashboard_monitor_api.sampler_current'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_5'
      security:
      - basicAuth: []
      - bearerAuth: []
  /telemetry/status:
    get:
      tags:
      - Telemetry
      description: Get telemetry status
      parameters: []
      responses:
        "200":
          description: Get telemetry status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emqx_telemetry_api.status'
      security:
      - basicAuth: []
      - bearerAuth: []
    put:
      tags:
      - Telemetry
      description: Enable or disable telemetry
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/emqx_telemetry_api.status'
      responses:
        "200":
          description: Enable or disable telemetry
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emqx_telemetry_api.status'
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
      security:
      - basicAuth: []
      - bearerAuth: []
  /authentication/{id}/users:
    get:
      tags:
      - Authentication
      description: List users in authenticator in global authentication chain.
      parameters:
      - name: id
        in: path
        description: Authenticator ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: page
        in: query
        description: Page number of the results to fetch.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
        example: 1
      - name: limit
        in: query
        description: Results per page(max 1000)
        required: false
        style: form
        explode: true
        schema:
          maximum: 1000
          minimum: 1
          type: integer
          default: 100
        example: 50
      - name: like_user_id
        in: query
        description: Fuzzy search user_id (username or clientid).
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: is_superuser
        in: query
        description: Is superuser
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emqx_authn_api.response_users'
              example:
                data:
                - user_id: user1
                - is_superuser: true
                  user_id: user2
                meta:
                  count: 300
                  limit: 20
                  page: 0
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - basicAuth: []
      - bearerAuth: []
    post:
      tags:
      - Authentication
      description: Create users for authenticator in global authentication chain.
      parameters:
      - name: id
        in: path
        description: Authenticator ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/emqx_authn_api.request_user_create'
            examples:
              regular_user:
                summary: Regular user
                value:
                  password: '******'
                  user_id: user1
              super_user:
                summary: Superuser
                value:
                  is_superuser: true
                  password: '******'
                  user_id: user2
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emqx_authn_api.response_user'
              examples:
                regular_user:
                  summary: Regular user
                  value:
                    user_id: user1
                super_user:
                  summary: Superuser
                  value:
                    is_superuser: true
                    user_id: user2
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - basicAuth: []
      - bearerAuth: []
  /cluster:
    get:
      tags:
      - Cluster
      description: Get cluster info
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_3'
      security:
      - basicAuth: []
      - bearerAuth: []
  /plugins/{name}/{action}:
    put:
      tags:
      - Plugins
      summary: Trigger action on an installed plugin
      description: "start/stop a installed plugin.<br/>- **start**: start the plugin.<br/>-\
        \ **stop**: stop the plugin.<br/>"
      parameters:
      - name: name
        in: path
        description: "^[A-Za-z]+[A-Za-z0-9-_.]*$"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: emqx_plugin_template-5.0-rc.1
      - name: action
        in: path
        description: Action
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - start
          - stop
      responses:
        "200":
          description: OK
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_2'
      security:
      - basicAuth: []
      - bearerAuth: []
  /gateways/{name}/clients/{clientid}:
    get:
      tags:
      - Gateway Clients
      summary: Get client info
      description: Get the gateway client information
      parameters:
      - name: clientid
        in: path
        description: Client ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: name
        in: path
        description: Gateway Name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_4'
              examples:
                general_client:
                  summary: General client info
                  value:
                    reductions: 72022
                    clientid: MzAyMzEzNTUwNzk1NDA1MzYyMzIwNzUxNjQwMTY1NzQ0NjE
                    recv_cnt: 1
                    send_cnt: 1
                    keepalive: 0
                    recv_oct: 56
                    username: guest
                    heap_size: 4185
                    send_msg: 0
                    recv_pkt: 1
                    awaiting_rel_cnt: 0
                    created_at: 2021-12-07T10:44:02.721+08:00
                    expiry_interval: 0
                    proto_name: STOMP
                    mailbox_len: 0
                    mqueue_len: 0
                    node: emqx@127.0.0.1
                    subscriptions_cnt: 0
                    proto_ver: "1.0"
                    clean_start: true
                    mqueue_dropped: 0
                    connected: true
                    send_pkt: 1
                    port: 50675
                    recv_msg: 0
                    connected_at: 2021-12-07T10:44:02.721+08:00
                    ip_address: 127.0.0.1
                    subscriptions_max: infinity
                    inflight_max: infinity
                    mqueue_max: infinity
                    send_oct: 61
                    is_bridge: false
                    inflight_cnt: 0
                    awaiting_rel_max: infinity
                lwm2m_client:
                  summary: LwM2M client info
                  value:
                    reductions: 72022
                    lifetime: 86400
                    clientid: MzAyMzEzNTUwNzk1NDA1MzYyMzIwNzUxNjQwMTY1NzQ0NjE
                    recv_cnt: 1
                    send_cnt: 1
                    keepalive: 0
                    recv_oct: 56
                    username: guest
                    heap_size: 4185
                    send_msg: 0
                    recv_pkt: 1
                    awaiting_rel_cnt: 0
                    created_at: 2021-12-07T10:44:02.721+08:00
                    expiry_interval: 0
                    proto_name: LwM2M
                    mailbox_len: 0
                    mqueue_len: 0
                    node: emqx@127.0.0.1
                    subscriptions_cnt: 0
                    proto_ver: "1.0"
                    clean_start: true
                    mqueue_dropped: 0
                    connected: true
                    send_pkt: 1
                    port: 50675
                    recv_msg: 0
                    connected_at: 2021-12-07T10:44:02.721+08:00
                    ip_address: 127.0.0.1
                    subscriptions_max: infinity
                    inflight_max: infinity
                    mqueue_max: infinity
                    send_oct: 61
                    is_bridge: false
                    inflight_cnt: 0
                    awaiting_rel_max: infinity
                    endpoint_name: urn:imei:154928475237123
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_4'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_7'
      security:
      - basicAuth: []
      - bearerAuth: []
    delete:
      tags:
      - Gateway Clients
      summary: Kick out client
      description: Kick out the gateway client
      parameters:
      - name: clientid
        in: path
        description: Client ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: name
        in: path
        description: Gateway Name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Kicked
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_4'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_7'
      security:
      - basicAuth: []
      - bearerAuth: []
  /publish/bulk:
    post:
      tags:
      - Publish
      summary: Publish a batch of messages
      description: "Possible HTTP response status code are:<br/><br/>200: All messages\
        \ are delivered to at least one subscriber;<br/><br/>202: At least one message\
        \ was not delivered to any subscriber;<br/><br/>400: At least one message\
        \ is invalid. For example bad topic name, or QoS is out of range;<br/><br/>503:\
        \ Failed to deliver at least one of the messages;<br/><br/><br/>In case there\
        \ is at lest one invalid message in the batch, the HTTP response body<br/>is\
        \ the same as for <code>/publish</code> API.<br/><br/>Otherwise the HTTP response\
        \ body is an array of JSON objects indicating the publish<br/>result of each\
        \ individual message in the batch."
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/emqx_mgmt_api_publish.publish_message'
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/emqx_mgmt_api_publish.publish_ok'
                x-content-type: application/json
        "202":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/emqx_mgmt_api_publish.publish_error'
                x-content-type: application/json
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_8'
        "503":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/emqx_mgmt_api_publish.publish_error'
                x-content-type: application/json
      security:
      - basicAuth: []
      - bearerAuth: []
  /nodes/{node}/bridges/{id}/{operation}:
    post:
      tags:
      - Bridges
      summary: Stop/restart bridge
      description: Stop/Restart bridges on a specific node.
      parameters:
      - name: node
        in: path
        description: "The node name, e.g. emqx@127.0.0.1"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: emqx@127.0.0.1
      - name: id
        in: path
        description: "The bridge Id. Must be of format {type}:{name}"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: webhook:webhook_example
      - name: operation
        in: path
        description: "Operations can be one of: stop, restart"
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - start
          - stop
          - restart
        example: start
      responses:
        "204":
          description: Operation success
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_9'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_10'
        "501":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_501'
        "503":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_503'
      security:
      - basicAuth: []
      - bearerAuth: []
  /rule_test:
    post:
      tags:
      - Rules
      summary: Test a rule
      description: Test a rule
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/emqx_rule_api_schema.rule_test'
      responses:
        "200":
          description: Rule Test Pass
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_10'
        "412":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_412'
      security:
      - basicAuth: []
      - bearerAuth: []
  /authorization/sources/built_in_database/rules/clients/{clientid}:
    get:
      tags:
      - Authorization
      description: Get rule for 'clientid'
      parameters:
      - name: clientid
        in: path
        description: ClientID
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: client1
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emqx_authz_api_mnesia.rules_for_clientid'
              examples:
                password_based:built_in_database:
                  summary: ClientID
                  value:
                    clientid: client1
                    rules:
                    - action: publish
                      permission: allow
                      topic: test/topic/1
                    - action: subscribe
                      permission: allow
                      topic: test/topic/2
                    - action: all
                      permission: deny
                      topic: eq test/#
                    - action: publish
                      permission: allow
                      qos:
                      - "1"
                      retain: "true"
                      topic: test/topic/3
                    - action: publish
                      permission: allow
                      qos:
                      - "0"
                      - "1"
                      - "2"
                      retain: all
                      topic: test/topic/4
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - basicAuth: []
      - bearerAuth: []
    put:
      tags:
      - Authorization
      description: Set rule for 'clientid'
      parameters:
      - name: clientid
        in: path
        description: ClientID
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: client1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/emqx_authz_api_mnesia.rules_for_clientid'
            examples:
              password_based:built_in_database:
                summary: ClientID
                value:
                  clientid: client1
                  rules:
                  - action: publish
                    permission: allow
                    topic: test/topic/1
                  - action: subscribe
                    permission: allow
                    topic: test/topic/2
                  - action: all
                    permission: deny
                    topic: eq test/#
                  - action: publish
                    permission: allow
                    qos:
                    - "1"
                    retain: "true"
                    topic: test/topic/3
                  - action: publish
                    permission: allow
                    qos:
                    - "0"
                    - "1"
                    - "2"
                    retain: all
                    topic: test/topic/4
      responses:
        "204":
          description: Updated
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_6'
      security:
      - basicAuth: []
      - bearerAuth: []
    delete:
      tags:
      - Authorization
      description: Delete rule for 'clientid'
      parameters:
      - name: clientid
        in: path
        description: ClientID
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: client1
      responses:
        "204":
          description: Deleted
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_11'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_11'
      security:
      - basicAuth: []
      - bearerAuth: []
  /configs/sysmon:
    get:
      tags:
      - Configs
      summary: Get the sub-configurations under *sysmon*
      description: Get the sub-configurations under *sysmon*
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/broker.sysmon'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_8'
      security:
      - basicAuth: []
      - bearerAuth: []
    put:
      tags:
      - Configs
      summary: Update the sub-configurations under *sysmon*
      description: Update the sub-configurations under *sysmon*
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/broker.sysmon'
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/broker.sysmon'
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_5'
        "403":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_5'
      security:
      - basicAuth: []
      - bearerAuth: []
  /clients/{clientid}/authorization/cache:
    get:
      tags:
      - Clients
      description: Get client authz cache in the cluster.
      parameters:
      - name: clientid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emqx_mgmt_api_clients.authz_cache'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_12'
      security:
      - basicAuth: []
      - bearerAuth: []
    delete:
      tags:
      - Clients
      description: Clean client authz cache in the cluster.
      parameters:
      - name: clientid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Clean client authz cache successfully
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_12'
      security:
      - basicAuth: []
      - bearerAuth: []
  /cluster/{node}/force_leave:
    delete:
      tags:
      - Cluster
      description: Force leave node from cluster
      parameters:
      - name: node
        in: path
        description: node name
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: emqx2@127.0.0.1
      responses:
        "204":
          description: Delete successfully
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_13'
      security:
      - basicAuth: []
      - bearerAuth: []
  /gateways/{name}/listeners/{id}:
    get:
      tags:
      - Gateway Listeners
      summary: Get listener config
      description: Get the gateway listener configs
      parameters:
      - name: name
        in: path
        description: "Gateway Name.<br/><br/>It's enum with `stomp`, `mqttsn`, `coap`,\
          \ `lwm2m`, `exproto`"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: stomp
      - name: id
        in: path
        description: Listener ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: ""
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/name_listeners_body'
              examples:
                dtls_listener:
                  summary: A simple DTLS listener example
                  value:
                    acceptors: 16
                    access_rules:
                    - allow all
                    bind: "22213"
                    dtls_options:
                      cacertfile: /etc/emqx/certs/cacert.pem
                      certfile: /etc/emqx/certs/cert.pem
                      fail_if_no_peer_cert: false
                      keyfile: /etc/emqx/certs/key.pem
                      verify: verify_none
                      versions:
                      - dtlsv1.2
                      - dtlsv1
                    max_conn_rate: 1000
                    max_connections: 1024000
                    name: dtls-def
                    type: dtls
                    udp_options:
                      active_n: 100
                      backlog: 1024
                dtls_listener_with_psk_ciphers:
                  summary: A DTLS listener with PSK example
                  value:
                    acceptors: 16
                    bind: "22214"
                    dtls_options:
                      cacertfile: /etc/emqx/certs/cacert.pem
                      certfile: /etc/emqx/certs/cert.pem
                      ciphers: "RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA"
                      fail_if_no_peer_cert: false
                      keyfile: /etc/emqx/certs/key.pem
                      user_lookup_fun: emqx_tls_psk:lookup
                      verify: verify_none
                      versions:
                      - dtlsv1.2
                      - dtlsv1
                    max_conn_rate: 1000
                    max_connections: 1024000
                    name: dtls-psk
                    type: dtls
                lisetner_with_authn:
                  summary: A TCP listener with authentication example
                  value:
                    acceptors: 16
                    authentication:
                      backend: built_in_database
                      mechanism: password_based
                      password_hash_algorithm:
                        name: sha256
                      user_id_type: username
                    bind: "22215"
                    max_conn_rate: 1000
                    max_connections: 1024000
                    name: tcp-with-authn
                    type: tcp
                ssl_listener:
                  summary: A simple SSL listener example
                  value:
                    acceptors: 16
                    access_rules:
                    - allow all
                    bind: "22211"
                    max_conn_rate: 1000
                    max_connections: 1024000
                    name: ssl-def
                    ssl_options:
                      cacertfile: /etc/emqx/certs/cacert.pem
                      certfile: /etc/emqx/certs/cert.pem
                      fail_if_no_peer_cert: false
                      keyfile: /etc/emqx/certs/key.pem
                      verify: verify_none
                      versions:
                      - tlsv1.3
                      - tlsv1.2
                      - tlsv1.1
                      - tlsv1
                    tcp_options:
                      active_n: 100
                      backlog: 1024
                    type: ssl
                tcp_listener:
                  summary: A simple TCP listener example
                  value:
                    acceptors: 16
                    bind: "22210"
                    max_conn_rate: 1000
                    max_connections: 1024000
                    name: tcp-def
                    tcp_options:
                      active_n: 100
                      backlog: 1024
                      buffer: 10KB
                      high_watermark: 1MB
                      keepalive: none
                      nodelay: false
                      recbuf: 10KB
                      reuseaddr: true
                      send_timeout: 15s
                      send_timeout_close: true
                      sndbuf: 10KB
                    type: tcp
                udp_listener:
                  summary: A simple UDP listener example
                  value:
                    bind: "22212"
                    name: udp-def
                    type: udp
                    udp_options:
                      active_n: 100
                      buffer: 10KB
                      recbuf: 10KB
                      reuseaddr: true
                      sndbuf: 10KB
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_4'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_7'
      security:
      - basicAuth: []
      - bearerAuth: []
    put:
      tags:
      - Gateway Listeners
      summary: Update listener config
      description: Update the gateway listener. The listener being updated performs
        a restart and all clients connected to that listener will be disconnected.
      parameters:
      - name: name
        in: path
        description: "Gateway Name.<br/><br/>It's enum with `stomp`, `mqttsn`, `coap`,\
          \ `lwm2m`, `exproto`"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: stomp
      - name: id
        in: path
        description: Listener ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/listeners_id_body'
            examples:
              dtls_listener:
                summary: A simple DTLS listener example
                value:
                  acceptors: 16
                  access_rules:
                  - allow all
                  bind: "22213"
                  dtls_options:
                    cacertfile: /etc/emqx/certs/cacert.pem
                    certfile: /etc/emqx/certs/cert.pem
                    fail_if_no_peer_cert: false
                    keyfile: /etc/emqx/certs/key.pem
                    verify: verify_none
                    versions:
                    - dtlsv1.2
                    - dtlsv1
                  max_conn_rate: 1000
                  max_connections: 1024000
                  name: dtls-def
                  type: dtls
                  udp_options:
                    active_n: 100
                    backlog: 1024
              dtls_listener_with_psk_ciphers:
                summary: A DTLS listener with PSK example
                value:
                  acceptors: 16
                  bind: "22214"
                  dtls_options:
                    cacertfile: /etc/emqx/certs/cacert.pem
                    certfile: /etc/emqx/certs/cert.pem
                    ciphers: "RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA"
                    fail_if_no_peer_cert: false
                    keyfile: /etc/emqx/certs/key.pem
                    user_lookup_fun: emqx_tls_psk:lookup
                    verify: verify_none
                    versions:
                    - dtlsv1.2
                    - dtlsv1
                  max_conn_rate: 1000
                  max_connections: 1024000
                  name: dtls-psk
                  type: dtls
              lisetner_with_authn:
                summary: A TCP listener with authentication example
                value:
                  acceptors: 16
                  authentication:
                    backend: built_in_database
                    mechanism: password_based
                    password_hash_algorithm:
                      name: sha256
                    user_id_type: username
                  bind: "22215"
                  max_conn_rate: 1000
                  max_connections: 1024000
                  name: tcp-with-authn
                  type: tcp
              ssl_listener:
                summary: A simple SSL listener example
                value:
                  acceptors: 16
                  access_rules:
                  - allow all
                  bind: "22211"
                  max_conn_rate: 1000
                  max_connections: 1024000
                  name: ssl-def
                  ssl_options:
                    cacertfile: /etc/emqx/certs/cacert.pem
                    certfile: /etc/emqx/certs/cert.pem
                    fail_if_no_peer_cert: false
                    keyfile: /etc/emqx/certs/key.pem
                    verify: verify_none
                    versions:
                    - tlsv1.3
                    - tlsv1.2
                    - tlsv1.1
                    - tlsv1
                  tcp_options:
                    active_n: 100
                    backlog: 1024
                  type: ssl
              tcp_listener:
                summary: A simple TCP listener example
                value:
                  acceptors: 16
                  bind: "22210"
                  max_conn_rate: 1000
                  max_connections: 1024000
                  name: tcp-def
                  tcp_options:
                    active_n: 100
                    backlog: 1024
                    buffer: 10KB
                    high_watermark: 1MB
                    keepalive: none
                    nodelay: false
                    recbuf: 10KB
                    reuseaddr: true
                    send_timeout: 15s
                    send_timeout_close: true
                    sndbuf: 10KB
                  type: tcp
              udp_listener:
                summary: A simple UDP listener example
                value:
                  bind: "22212"
                  name: udp-def
                  type: udp
                  udp_options:
                    active_n: 100
                    buffer: 10KB
                    recbuf: 10KB
                    reuseaddr: true
                    sndbuf: 10KB
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listeners_id_body'
              examples:
                dtls_listener:
                  summary: A simple DTLS listener example
                  value:
                    acceptors: 16
                    access_rules:
                    - allow all
                    bind: "22213"
                    dtls_options:
                      cacertfile: /etc/emqx/certs/cacert.pem
                      certfile: /etc/emqx/certs/cert.pem
                      fail_if_no_peer_cert: false
                      keyfile: /etc/emqx/certs/key.pem
                      verify: verify_none
                      versions:
                      - dtlsv1.2
                      - dtlsv1
                    max_conn_rate: 1000
                    max_connections: 1024000
                    name: dtls-def
                    type: dtls
                    udp_options:
                      active_n: 100
                      backlog: 1024
                dtls_listener_with_psk_ciphers:
                  summary: A DTLS listener with PSK example
                  value:
                    acceptors: 16
                    bind: "22214"
                    dtls_options:
                      cacertfile: /etc/emqx/certs/cacert.pem
                      certfile: /etc/emqx/certs/cert.pem
                      ciphers: "RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA"
                      fail_if_no_peer_cert: false
                      keyfile: /etc/emqx/certs/key.pem
                      user_lookup_fun: emqx_tls_psk:lookup
                      verify: verify_none
                      versions:
                      - dtlsv1.2
                      - dtlsv1
                    max_conn_rate: 1000
                    max_connections: 1024000
                    name: dtls-psk
                    type: dtls
                lisetner_with_authn:
                  summary: A TCP listener with authentication example
                  value:
                    acceptors: 16
                    authentication:
                      backend: built_in_database
                      mechanism: password_based
                      password_hash_algorithm:
                        name: sha256
                      user_id_type: username
                    bind: "22215"
                    max_conn_rate: 1000
                    max_connections: 1024000
                    name: tcp-with-authn
                    type: tcp
                ssl_listener:
                  summary: A simple SSL listener example
                  value:
                    acceptors: 16
                    access_rules:
                    - allow all
                    bind: "22211"
                    max_conn_rate: 1000
                    max_connections: 1024000
                    name: ssl-def
                    ssl_options:
                      cacertfile: /etc/emqx/certs/cacert.pem
                      certfile: /etc/emqx/certs/cert.pem
                      fail_if_no_peer_cert: false
                      keyfile: /etc/emqx/certs/key.pem
                      verify: verify_none
                      versions:
                      - tlsv1.3
                      - tlsv1.2
                      - tlsv1.1
                      - tlsv1
                    tcp_options:
                      active_n: 100
                      backlog: 1024
                    type: ssl
                tcp_listener:
                  summary: A simple TCP listener example
                  value:
                    acceptors: 16
                    bind: "22210"
                    max_conn_rate: 1000
                    max_connections: 1024000
                    name: tcp-def
                    tcp_options:
                      active_n: 100
                      backlog: 1024
                      buffer: 10KB
                      high_watermark: 1MB
                      keepalive: none
                      nodelay: false
                      recbuf: 10KB
                      reuseaddr: true
                      send_timeout: 15s
                      send_timeout_close: true
                      sndbuf: 10KB
                    type: tcp
                udp_listener:
                  summary: A simple UDP listener example
                  value:
                    bind: "22212"
                    name: udp-def
                    type: udp
                    udp_options:
                      active_n: 100
                      buffer: 10KB
                      recbuf: 10KB
                      reuseaddr: true
                      sndbuf: 10KB
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_4'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_7'
      security:
      - basicAuth: []
      - bearerAuth: []
    delete:
      tags:
      - Gateway Listeners
      summary: Delete listener
      description: Delete the gateway listener. All connected clients under the deleted
        listener will be disconnected.
      parameters:
      - name: name
        in: path
        description: "Gateway Name.<br/><br/>It's enum with `stomp`, `mqttsn`, `coap`,\
          \ `lwm2m`, `exproto`"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: stomp
      - name: id
        in: path
        description: Listener ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: ""
      responses:
        "204":
          description: Deleted
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_4'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_7'
      security:
      - basicAuth: []
      - bearerAuth: []
  /gateways/{name}/enable/{enable}:
    put:
      tags:
      - Gateways
      summary: Enable or disable gateway
      description: "Update the gateway basic configurations and running status.<br/><br/>Note:\
        \ The Authentication and Listener configurations should be updated by other\
        \ special APIs."
      parameters:
      - name: name
        in: path
        description: "Gateway Name.<br/><br/>It's enum with `stomp`, `mqttsn`, `coap`,\
          \ `lwm2m`, `exproto`"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: stomp
      - name: enable
        in: path
        description: Whether to enable this gateway
        required: true
        style: simple
        explode: false
        schema:
          type: boolean
        example: true
      responses:
        "204":
          description: Gateway configuration updated
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_7'
      security:
      - basicAuth: []
      - bearerAuth: []
  /rules:
    get:
      tags:
      - Rules
      summary: List rules
      description: List all rules
      parameters:
      - name: enable
        in: query
        description: Filter enable/disable rules
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: from
        in: query
        description: "Filter rules by from(topic), exact match"
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: like_id
        in: query
        description: "Filter rules by id, Substring matching"
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: like_from
        in: query
        description: "Filter rules by from(topic), Substring matching"
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: like_description
        in: query
        description: "Filter rules by description, Substring matching"
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: match_from
        in: query
        description: "Filter rules by from(topic), Mqtt topic matching"
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: Page number of the results to fetch.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
        example: 1
      - name: limit
        in: query
        description: Results per page(max 1000)
        required: false
        style: form
        explode: true
        schema:
          maximum: 1000
          minimum: 1
          type: integer
          default: 100
        example: 50
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_5'
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_10'
      security:
      - basicAuth: []
      - bearerAuth: []
    post:
      tags:
      - Rules
      summary: Create a rule
      description: Create a new rule using given Id
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/emqx_rule_api_schema.rule_creation'
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emqx_rule_api_schema.rule_info'
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_10'
      security:
      - basicAuth: []
      - bearerAuth: []
  /authentication/{id}/status:
    get:
      tags:
      - Authentication
      description: Get authenticator status from global authentication chain.
      parameters:
      - name: id
        in: path
        description: Authenticator ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emqx_authn_schema.metrics_status_fields'
              examples:
                status_metrics:
                  summary: Authn status metrics
                  value:
                    metrics:
                      failed: 0
                      nomatch: 0
                      rate: 0
                      rate_last5m: 0
                      rate_max: 0
                      success: 0
                      total: 0
                    node_error: []
                    node_metrics:
                    - metrics:
                        failed: 0
                        matched: 0
                        nomatch: 0
                        rate: 0
                        rate_last5m: 0
                        rate_max: 0
                        total: 0
                      node: emqx@172.20.0.2
                    node_resource_metrics:
                    - metrics:
                        failed: 0
                        matched: 0
                        rate: 0
                        rate_last5m: 0
                        rate_max: 0
                        success: 0
                      node: emqx@172.20.0.2
                    node_status:
                    - node: emqx@172.20.0.2
                      status: connected
                    resource_metrics:
                      failed: 0
                      matched: 0
                      rate: 0
                      rate_last5m: 0
                      rate_max: 0
                      success: 0
                    status: connected
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "500":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500_1'
      security:
      - basicAuth: []
      - bearerAuth: []
  /mqtt/topic_rewrite:
    get:
      tags:
      - MQTT
      description: List all rewrite rules
      parameters: []
      responses:
        "200":
          description: List all rewrite rules
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/modules.rewrite'
                x-content-type: application/json
      security:
      - basicAuth: []
      - bearerAuth: []
    put:
      tags:
      - MQTT
      description: Update all rewrite rules
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/modules.rewrite'
      responses:
        "200":
          description: Update all rewrite rules
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/modules.rewrite'
                x-content-type: application/json
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_4'
        "413":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_413'
      security:
      - basicAuth: []
      - bearerAuth: []
  /gateways:
    get:
      tags:
      - Gateways
      summary: List all gateways
      description: "This API returns an overview info for the specified or all gateways.<br/>including\
        \ current running status, number of connections, listener status, etc."
      parameters:
      - name: status
        in: query
        description: "Filter gateways by status.<br/><br/>It is enum with `running`,\
          \ `stopped`, `unloaded`"
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - running
          - stopped
          - unloaded
        example: running
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/emqx_gateway_api.gateway_overview'
                x-content-type: application/json
              example:
              - name: coap
                status: unloaded
              - name: exproto
                status: unloaded
              - created_at: 2021-12-08T14:41:26.171+08:00
                current_connections: 0
                listeners:
                - id: lwm2m:udp:default
                  name: default
                  running: true
                  type: udp
                max_connections: 1024000
                name: lwm2m
                node_status:
                - current_connections: 0
                  max_connections: 1024000
                  node: node@127.0.0.1
                  status: running
                started_at: 2021-12-08T14:41:26.202+08:00
                status: running
              - created_at: 2021-12-08T14:41:45.071+08:00
                current_connections: 0
                listeners:
                - id: mqttsn:udp:default
                  name: default
                  running: false
                  type: udp
                max_connections: 1024000
                name: mqttsn
                node_status:
                - current_connections: 0
                  max_connections: 1024000
                  node: node@127.0.0.1
                  status: running
                status: stopped
                stopped_at: 2021-12-08T14:56:35.576+08:00
              - created_at: 2021-12-08T14:42:15.272+08:00
                current_connections: 0
                listeners:
                - id: stomp:tcp:default
                  name: default
                  running: true
                  type: tcp
                max_connections: 1024000
                name: stomp
                node_status:
                - current_connections: 0
                  max_connections: 1024000
                  node: node@127.0.0.1
                  status: running
                started_at: 2021-12-08T14:42:15.274+08:00
                status: running
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_4'
      security:
      - basicAuth: []
      - bearerAuth: []
  /mqtt/topic_metrics/{topic}:
    get:
      tags:
      - MQTT
      description: Get topic metrics
      parameters:
      - name: topic
        in: path
        description: "Topic string. Notice: Topic string in url path must be encoded"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: testtopic/1
      responses:
        "200":
          description: Topic
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emqx_topic_metrics_api.topic_metrics'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_14'
      security:
      - basicAuth: []
      - bearerAuth: []
    delete:
      tags:
      - MQTT
      description: Delete topic metrics
      parameters:
      - name: topic
        in: path
        description: "Topic string. Notice: Topic string in url path must be encoded"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: testtopic/1
      responses:
        "204":
          description: Delete topic metrics
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_14'
      security:
      - basicAuth: []
      - bearerAuth: []
  /bridges_probe:
    post:
      tags:
      - Bridges
      summary: Test creating bridge
      description: "Test creating a new bridge by given ID </br><br/>The ID must be\
        \ of format '{type}:{name}'"
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/bridges_probe_body'
            examples:
              mqtt_example:
                summary: MQTT Bridge
                value:
                  clean_start: true
                  egress:
                    local:
                      topic: emqx/#
                    remote:
                      payload: "${payload}"
                      qos: "${qos}"
                      retain: false
                      topic: "from_emqx/${topic}"
                  enable: true
                  ingress:
                    local:
                      payload: "${payload}"
                      qos: "${qos}"
                      retain: "${retain}"
                      topic: "from_aws/${topic}"
                    remote:
                      qos: 1
                      topic: aws/#
                  keepalive: 300s
                  max_inflight: 100
                  name: mqtt_example
                  password: '******'
                  proto_ver: v4
                  resource_opts:
                    health_check_interval: 15s
                    max_buffer_bytes: 104857600
                    query_mode: sync
                  retry_interval: 15s
                  server: 127.0.0.1:1883
                  ssl:
                    enable: false
                  type: mqtt
                  username: foo
              webhook_example:
                summary: WebHook
                value:
                  body: "${payload}"
                  connect_timeout: 15s
                  enable: true
                  enable_pipelining: 100
                  local_topic: emqx_webhook/#
                  max_retries: 3
                  method: post
                  name: webhook_example
                  pool_size: 4
                  pool_type: random
                  request_timeout: 15s
                  resource_opts:
                    health_check_interval: 15000
                    inflight_window: 100
                    max_buffer_bytes: 104857600
                    query_mode: async
                    worker_pool_size: 1
                  ssl:
                    enable: false
                  type: webhook
                  url: "http://localhost:9901/messages/${topic}"
      responses:
        "204":
          description: Test bridge OK
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_12'
      security:
      - basicAuth: []
      - bearerAuth: []
  /monitor/nodes/{node}:
    get:
      tags:
      - Metrics
      description: List the monitor (statistics) data on the specified node.
      parameters:
      - name: node
        in: path
        description: EMQX node name.
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: emqx@172.20.0.2
      - name: latest
        in: query
        description: The latest N seconds data. Like 300 for 5 min.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
        example: 300
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/emqx_dashboard_monitor_api.sampler'
                x-content-type: application/json
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_5'
      security:
      - basicAuth: []
      - bearerAuth: []
  /prometheus/stats:
    get:
      tags:
      - Monitor
      description: Get Prometheus Data
      parameters: []
      responses:
        "200":
          description: Get Prometheus Data. Note that support for JSON output is deprecated
            and will be removed in v5.2.
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
            application/json:
              schema:
                type: object
      security: []
  /trace/{name}/log_detail:
    get:
      tags:
      - Trace
      description: "get trace log file's metadata, such as size, last update time"
      parameters:
      - name: name
        in: path
        description: "[a-zA-Z0-9-_]"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: EMQX-TRACE-1
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/trace.log_file_detail'
                x-content-type: application/json
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_15'
      security:
      - basicAuth: []
      - bearerAuth: []
  /authentication/{id}:
    get:
      tags:
      - Authentication
      description: Get authenticator from global authentication chain.
      parameters:
      - name: id
        in: path
        description: Authenticator ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_6'
              examples:
                jwt:
                  summary: JWT authentication
                  value:
                    algorithm: hmac-based
                    mechanism: jwt
                    secret: mysecret
                    secret_base64_encoded: false
                    use_jwks: false
                    verify_claims:
                      username: "${username}"
                password_based:built_in_database:
                  summary: Built-in password_based authentication
                  value:
                    backend: built_in_database
                    mechanism: password_based
                    password_hash_algorithm:
                      name: sha256
                      salt_position: suffix
                    user_id_type: username
                password_based:http:
                  summary: password_based authentication through external HTTP API
                  value:
                    backend: http
                    body:
                      password: "${password}"
                      username: "${username}"
                    connect_timeout: 5s
                    enable_pipelining: 100
                    headers:
                      content-type: application/json
                    mechanism: password_based
                    method: post
                    pool_size: 8
                    request_timeout: 5s
                    ssl:
                      enable: false
                    url: http://127.0.0.1:18083
                password_based:mongodb:
                  summary: password_based authentication with MongoDB backend
                  value:
                    backend: mongodb
                    collection: users
                    database: example
                    filter:
                      username: "${username}"
                    is_superuser_field: is_superuser
                    mechanism: password_based
                    password_hash_algorithm:
                      name: sha256
                      salt_position: suffix
                    password_hash_field: password_hash
                    salt_field: salt
                    server: 127.0.0.1:27017
                password_based:redis:
                  summary: password_based authentication with Redis backend
                  value:
                    backend: redis
                    cmd: "HMGET ${username} password_hash salt"
                    database: 0
                    mechanism: password_based
                    password_hash_algorithm:
                      name: sha256
                      salt_position: suffix
                    redis_type: single
                    server: 127.0.0.1:6379
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - basicAuth: []
      - bearerAuth: []
    put:
      tags:
      - Authentication
      description: Update authenticator from global authentication chain.
      parameters:
      - name: id
        in: path
        description: Authenticator ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authentication_id_body'
            examples:
              jwt:
                summary: JWT authentication
                value:
                  algorithm: hmac-based
                  mechanism: jwt
                  secret: mysecret
                  secret_base64_encoded: false
                  use_jwks: false
                  verify_claims:
                    username: "${username}"
              password_based:built_in_database:
                summary: Built-in password_based authentication
                value:
                  backend: built_in_database
                  mechanism: password_based
                  password_hash_algorithm:
                    name: sha256
                    salt_position: suffix
                  user_id_type: username
              password_based:http:
                summary: password_based authentication through external HTTP API
                value:
                  backend: http
                  body:
                    password: "${password}"
                    username: "${username}"
                  connect_timeout: 5s
                  enable_pipelining: 100
                  headers:
                    content-type: application/json
                  mechanism: password_based
                  method: post
                  pool_size: 8
                  request_timeout: 5s
                  ssl:
                    enable: false
                  url: http://127.0.0.1:18083
              password_based:mongodb:
                summary: password_based authentication with MongoDB backend
                value:
                  backend: mongodb
                  collection: users
                  database: example
                  filter:
                    username: "${username}"
                  is_superuser_field: is_superuser
                  mechanism: password_based
                  password_hash_algorithm:
                    name: sha256
                    salt_position: suffix
                  password_hash_field: password_hash
                  salt_field: salt
                  server: 127.0.0.1:27017
              password_based:redis:
                summary: password_based authentication with Redis backend
                value:
                  backend: redis
                  cmd: "HMGET ${username} password_hash salt"
                  database: 0
                  mechanism: password_based
                  password_hash_algorithm:
                    name: sha256
                    salt_position: suffix
                  redis_type: single
                  server: 127.0.0.1:6379
      responses:
        "204":
          description: Authenticator updated
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "409":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_409'
      security:
      - basicAuth: []
      - bearerAuth: []
    delete:
      tags:
      - Authentication
      description: Delete authenticator from global authentication chain.
      parameters:
      - name: id
        in: path
        description: Authenticator ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Authenticator deleted
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - basicAuth: []
      - bearerAuth: []
  /publish:
    post:
      tags:
      - Publish
      summary: Publish a message
      description: "Possible HTTP status response codes are:<br/><br/><code>200</code>:\
        \ The message is delivered to at least one subscriber;<br/><br/><code>202</code>:\
        \ No matched subscribers;<br/><br/><code>400</code>: Message is invalid. for\
        \ example bad topic name, or QoS is out of range;<br/><br/><code>503</code>:\
        \ Failed to deliver the message to subscriber(s)"
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/emqx_mgmt_api_publish.publish_message'
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emqx_mgmt_api_publish.publish_ok'
        "202":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emqx_mgmt_api_publish.publish_error'
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_8'
        "503":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emqx_mgmt_api_publish.publish_error'
      security:
      - basicAuth: []
      - bearerAuth: []
  /nodes/{node}/metrics:
    get:
      tags:
      - Nodes
      description: "Get node run-time counter metrics. Such as received or sent bytes\
        \ or messages, the number of succeeded or failed authentications or authorizations,\
        \ etc."
      parameters:
      - name: node
        in: path
        description: Node name
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: emqx@127.0.0.1
      responses:
        "200":
          description: Get node metrics successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emqx_mgmt_api_metrics.node_metrics'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_5'
      security:
      - basicAuth: []
      - bearerAuth: []
  /configs/global_zone:
    get:
      tags:
      - Configs
      description: Get the MQTT-related configuration
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_7'
      security:
      - basicAuth: []
      - bearerAuth: []
    put:
      tags:
      - Configs
      description: Update MQTT-related configuration
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configs_global_zone_body'
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/configs_global_zone_body'
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_5'
        "403":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_5'
      security:
      - basicAuth: []
      - bearerAuth: []
  /bridges/{id}/enable/{enable}:
    put:
      tags:
      - Bridges
      summary: Enable or disable bridge
      description: Enable or Disable bridges on all nodes in the cluster.
      parameters:
      - name: id
        in: path
        description: "The bridge Id. Must be of format {type}:{name}"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: webhook:webhook_example
      - name: enable
        in: path
        description: Whether to enable this bridge
        required: true
        style: simple
        explode: false
        schema:
          type: boolean
        example: true
      responses:
        "204":
          description: Success
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_16'
        "503":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_503'
      security:
      - basicAuth: []
      - bearerAuth: []
  /bridges/{id}/metrics:
    get:
      tags:
      - Bridges
      summary: Get bridge metrics
      description: Get bridge metrics by Id
      parameters:
      - name: id
        in: path
        description: "The bridge Id. Must be of format {type}:{name}"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: webhook:webhook_example
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_8'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_3'
      security:
      - basicAuth: []
      - bearerAuth: []
  /users:
    get:
      tags:
      - Dashboard
      description: Dashboard list users
      parameters: []
      responses:
        "200":
          description: Dashboard list users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/dashboard.user'
                x-content-type: application/json
      security:
      - basicAuth: []
      - bearerAuth: []
    post:
      tags:
      - Dashboard
      description: Create dashboard user
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/users_body'
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_9'
      security:
      - basicAuth: []
      - bearerAuth: []
  /authorization/sources/{type}/status:
    get:
      tags:
      - Authorization
      description: Get a authorization source
      parameters:
      - name: type
        in: path
        description: Authorization type
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - http
          - mongodb
          - redis
          - built_in_database
          - mysql
          - postgresql
          - file
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authz.metrics_status_fields'
              examples:
                metrics_example:
                  summary: Showing a typical metrics example
                  value:
                    metrics:
                      allow: 0
                      deny: 0
                      nomatch: 0
                      rate: 0
                      rate_last5m: 0
                      rate_max: 0
                      total: 0
                    node_metrics:
                    - metrics:
                        allow: 0
                        deny: 0
                        nomatch: 0
                        rate: 0
                        rate_last5m: 0
                        rate_max: 0
                        total: 0
                      node: emqx@172.20.0.2
                    node_resource_metrics:
                    - metrics:
                        failed: 0
                        matched: 0
                        rate: 0
                        rate_last5m: 0
                        rate_max: 0
                        success: 0
                      node: emqx@172.20.0.2
                    node_status:
                    - node: emqx@172.20.0.2
                      status: connected
                    resource_metrics:
                      failed: 0
                      matched: 0
                      rate: 0
                      rate_last5m: 0
                      rate_max: 0
                      success: 0
                    status: connected
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_4'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - basicAuth: []
      - bearerAuth: []
  /listeners:
    get:
      tags:
      - Listeners
      description: List all running node's listeners for the specified type.
      parameters:
      - name: type
        in: query
        description: Listener type
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - tcp
          - ssl
          - ws
          - wss
          - quic
        example: tcp
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/listeners.listener_id_status'
                x-content-type: application/json
              example:
              - acceptors: 16
                bind: 0.0.0.0:1884
                enable: true
                id: tcp:demo
                name: demo
                node_status:
                - node: emqx@127.0.0.1
                  status:
                    current_connections: 100
                    max_connections: 1024000
                    running: true
                - node: emqx@127.0.0.1
                  status:
                    current_connections: 101
                    max_connections: 1024000
                    running: true
                number: 2
                status:
                  current_connections: 201
                  max_connections: 2048000
                  running: true
                type: tcp
              - acceptors: 32
                bind: 0.0.0.0:1883
                enable: true
                id: tcp:default
                name: default
                node_status:
                - node: emqx@127.0.0.1
                  status:
                    current_connections: 200
                    max_connections: infinity
                    running: true
                - node: emqx@127.0.0.1
                  status:
                    current_connections: 301
                    max_connections: infinity
                    running: true
                number: 2
                status:
                  current_connections: 501
                  max_connections: infinity
                  running: true
                type: tcp
      security:
      - basicAuth: []
      - bearerAuth: []
    post:
      tags:
      - Listeners
      description: Create the specified listener on all nodes.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/listeners_body'
            example:
              acceptors: 16
              access_rules:
              - allow all
              bind: 0.0.0.0:1884
              current_connections: 10240
              max_connections: 204800
              mountpoint: /
              name: demo
              proxy_protocol: false
              proxy_protocol_timeout: 3s
              running: true
              tcp_options:
                active_n: 100
                backlog: 1024
                buffer: 4KB
                high_watermark: 1MB
                nodelay: false
                reuseaddr: true
                send_timeout: 15s
                send_timeout_close: true
              type: tcp
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_10'
              example:
                acceptors: 16
                access_rules:
                - allow all
                bind: 0.0.0.0:1884
                current_connections: 10240
                id: tcp:demo
                max_connections: 204800
                mountpoint: /
                proxy_protocol: false
                proxy_protocol_timeout: 3s
                running: true
                tcp_options:
                  active_n: 100
                  backlog: 1024
                  buffer: 4KB
                  high_watermark: 1MB
                  nodelay: false
                  reuseaddr: true
                  send_timeout: 15s
                  send_timeout_close: true
                type: tcp
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_13'
      security:
      - basicAuth: []
      - bearerAuth: []
  /trace/{name}/download:
    get:
      tags:
      - Trace
      description: Download trace log by name
      parameters:
      - name: name
        in: path
        description: "[a-zA-Z0-9-_]"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: EMQX-TRACE-1
      - name: node
        in: query
        description: Node name
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: emqx@127.0.0.1
      responses:
        "200":
          description: A trace zip file
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
                x-content-type: application/octet-stream
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_17'
      security:
      - basicAuth: []
      - bearerAuth: []
  /clients/{clientid}:
    get:
      tags:
      - Clients
      description: Get clients info by client ID
      parameters:
      - name: clientid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emqx_mgmt_api_clients.client'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_12'
      security:
      - basicAuth: []
      - bearerAuth: []
    delete:
      tags:
      - Clients
      description: Kick out client by client ID
      parameters:
      - name: clientid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Kick out client successfully
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_12'
      security:
      - basicAuth: []
      - bearerAuth: []
  /gateways/{name}/authentication:
    get:
      tags:
      - Gateway Authentication
      summary: Get authenticator configuration
      description: Gets the configuration of the specified gateway authenticator.<br/><br/>Returns
        404 when gateway or authentication is not enabled.
      parameters:
      - name: name
        in: path
        description: "Gateway Name.<br/><br/>It's enum with `stomp`, `mqttsn`, `coap`,\
          \ `lwm2m`, `exproto`"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: stomp
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/id_authentication_body_1'
              examples:
                jwt:
                  summary: JWT authentication
                  value:
                    algorithm: hmac-based
                    mechanism: jwt
                    secret: mysecret
                    secret_base64_encoded: false
                    use_jwks: false
                    verify_claims:
                      username: "${username}"
                password_based:built_in_database:
                  summary: Built-in password_based authentication
                  value:
                    backend: built_in_database
                    mechanism: password_based
                    password_hash_algorithm:
                      name: sha256
                      salt_position: suffix
                    user_id_type: username
                password_based:http:
                  summary: password_based authentication through external HTTP API
                  value:
                    backend: http
                    body:
                      password: "${password}"
                      username: "${username}"
                    connect_timeout: 5s
                    enable_pipelining: 100
                    headers:
                      content-type: application/json
                    mechanism: password_based
                    method: post
                    pool_size: 8
                    request_timeout: 5s
                    ssl:
                      enable: false
                    url: http://127.0.0.1:18083
                password_based:mongodb:
                  summary: password_based authentication with MongoDB backend
                  value:
                    backend: mongodb
                    collection: users
                    database: example
                    filter:
                      username: "${username}"
                    is_superuser_field: is_superuser
                    mechanism: password_based
                    password_hash_algorithm:
                      name: sha256
                      salt_position: suffix
                    password_hash_field: password_hash
                    salt_field: salt
                    server: 127.0.0.1:27017
                password_based:redis:
                  summary: password_based authentication with Redis backend
                  value:
                    backend: redis
                    cmd: "HMGET ${username} password_hash salt"
                    database: 0
                    mechanism: password_based
                    password_hash_algorithm:
                      name: sha256
                      salt_position: suffix
                    redis_type: single
                    server: 127.0.0.1:6379
        "204":
          description: Authenticator not initialized
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_4'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_7'
      security:
      - basicAuth: []
      - bearerAuth: []
    put:
      tags:
      - Gateway Authentication
      summary: Update authenticator configuration
      description: "Update the configuration of the specified gateway authenticator,\
        \ or disable the authenticator."
      parameters:
      - name: name
        in: path
        description: "Gateway Name.<br/><br/>It's enum with `stomp`, `mqttsn`, `coap`,\
          \ `lwm2m`, `exproto`"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: stomp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/name_authentication_body'
            examples:
              jwt:
                summary: JWT authentication
                value:
                  algorithm: hmac-based
                  mechanism: jwt
                  secret: mysecret
                  secret_base64_encoded: false
                  use_jwks: false
                  verify_claims:
                    username: "${username}"
              password_based:built_in_database:
                summary: Built-in password_based authentication
                value:
                  backend: built_in_database
                  mechanism: password_based
                  password_hash_algorithm:
                    name: sha256
                    salt_position: suffix
                  user_id_type: username
              password_based:http:
                summary: password_based authentication through external HTTP API
                value:
                  backend: http
                  body:
                    password: "${password}"
                    username: "${username}"
                  connect_timeout: 5s
                  enable_pipelining: 100
                  headers:
                    content-type: application/json
                  mechanism: password_based
                  method: post
                  pool_size: 8
                  request_timeout: 5s
                  ssl:
                    enable: false
                  url: http://127.0.0.1:18083
              password_based:mongodb:
                summary: password_based authentication with MongoDB backend
                value:
                  backend: mongodb
                  collection: users
                  database: example
                  filter:
                    username: "${username}"
                  is_superuser_field: is_superuser
                  mechanism: password_based
                  password_hash_algorithm:
                    name: sha256
                    salt_position: suffix
                  password_hash_field: password_hash
                  salt_field: salt
                  server: 127.0.0.1:27017
              password_based:redis:
                summary: password_based authentication with Redis backend
                value:
                  backend: redis
                  cmd: "HMGET ${username} password_hash salt"
                  database: 0
                  mechanism: password_based
                  password_hash_algorithm:
                    name: sha256
                    salt_position: suffix
                  redis_type: single
                  server: 127.0.0.1:6379
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/name_authentication_body'
              examples:
                jwt:
                  summary: JWT authentication
                  value:
                    algorithm: hmac-based
                    mechanism: jwt
                    secret: mysecret
                    secret_base64_encoded: false
                    use_jwks: false
                    verify_claims:
                      username: "${username}"
                password_based:built_in_database:
                  summary: Built-in password_based authentication
                  value:
                    backend: built_in_database
                    mechanism: password_based
                    password_hash_algorithm:
                      name: sha256
                      salt_position: suffix
                    user_id_type: username
                password_based:http:
                  summary: password_based authentication through external HTTP API
                  value:
                    backend: http
                    body:
                      password: "${password}"
                      username: "${username}"
                    connect_timeout: 5s
                    enable_pipelining: 100
                    headers:
                      content-type: application/json
                    mechanism: password_based
                    method: post
                    pool_size: 8
                    request_timeout: 5s
                    ssl:
                      enable: false
                    url: http://127.0.0.1:18083
                password_based:mongodb:
                  summary: password_based authentication with MongoDB backend
                  value:
                    backend: mongodb
                    collection: users
                    database: example
                    filter:
                      username: "${username}"
                    is_superuser_field: is_superuser
                    mechanism: password_based
                    password_hash_algorithm:
                      name: sha256
                      salt_position: suffix
                    password_hash_field: password_hash
                    salt_field: salt
                    server: 127.0.0.1:27017
                password_based:redis:
                  summary: password_based authentication with Redis backend
                  value:
                    backend: redis
                    cmd: "HMGET ${username} password_hash salt"
                    database: 0
                    mechanism: password_based
                    password_hash_algorithm:
                      name: sha256
                      salt_position: suffix
                    redis_type: single
                    server: 127.0.0.1:6379
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_4'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_7'
      security:
      - basicAuth: []
      - bearerAuth: []
    post:
      tags:
      - Gateway Authentication
      summary: Create authenticator for gateway
      description: "Enables the authenticator for client authentication for the specified\
        \ gateway. <br/><br/>When the authenticator is not configured or turned off,\
        \ all client connections are assumed to be allowed. <br/><br/>Note: Only one\
        \ authenticator is allowed to be enabled at a time in the gateway, rather\
        \ than allowing multiple authenticators to be configured to form an authentication\
        \ chain as in MQTT."
      parameters:
      - name: name
        in: path
        description: "Gateway Name.<br/><br/>It's enum with `stomp`, `mqttsn`, `coap`,\
          \ `lwm2m`, `exproto`"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: stomp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/name_authentication_body_1'
            examples:
              jwt:
                summary: JWT authentication
                value:
                  algorithm: hmac-based
                  mechanism: jwt
                  secret: mysecret
                  secret_base64_encoded: false
                  use_jwks: false
                  verify_claims:
                    username: "${username}"
              password_based:built_in_database:
                summary: Built-in password_based authentication
                value:
                  backend: built_in_database
                  mechanism: password_based
                  password_hash_algorithm:
                    name: sha256
                    salt_position: suffix
                  user_id_type: username
              password_based:http:
                summary: password_based authentication through external HTTP API
                value:
                  backend: http
                  body:
                    password: "${password}"
                    username: "${username}"
                  connect_timeout: 5s
                  enable_pipelining: 100
                  headers:
                    content-type: application/json
                  mechanism: password_based
                  method: post
                  pool_size: 8
                  request_timeout: 5s
                  ssl:
                    enable: false
                  url: http://127.0.0.1:18083
              password_based:mongodb:
                summary: password_based authentication with MongoDB backend
                value:
                  backend: mongodb
                  collection: users
                  database: example
                  filter:
                    username: "${username}"
                  is_superuser_field: is_superuser
                  mechanism: password_based
                  password_hash_algorithm:
                    name: sha256
                    salt_position: suffix
                  password_hash_field: password_hash
                  salt_field: salt
                  server: 127.0.0.1:27017
              password_based:redis:
                summary: password_based authentication with Redis backend
                value:
                  backend: redis
                  cmd: "HMGET ${username} password_hash salt"
                  database: 0
                  mechanism: password_based
                  password_hash_algorithm:
                    name: sha256
                    salt_position: suffix
                  redis_type: single
                  server: 127.0.0.1:6379
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/name_authentication_body_1'
              examples:
                jwt:
                  summary: JWT authentication
                  value:
                    algorithm: hmac-based
                    mechanism: jwt
                    secret: mysecret
                    secret_base64_encoded: false
                    use_jwks: false
                    verify_claims:
                      username: "${username}"
                password_based:built_in_database:
                  summary: Built-in password_based authentication
                  value:
                    backend: built_in_database
                    mechanism: password_based
                    password_hash_algorithm:
                      name: sha256
                      salt_position: suffix
                    user_id_type: username
                password_based:http:
                  summary: password_based authentication through external HTTP API
                  value:
                    backend: http
                    body:
                      password: "${password}"
                      username: "${username}"
                    connect_timeout: 5s
                    enable_pipelining: 100
                    headers:
                      content-type: application/json
                    mechanism: password_based
                    method: post
                    pool_size: 8
                    request_timeout: 5s
                    ssl:
                      enable: false
                    url: http://127.0.0.1:18083
                password_based:mongodb:
                  summary: password_based authentication with MongoDB backend
                  value:
                    backend: mongodb
                    collection: users
                    database: example
                    filter:
                      username: "${username}"
                    is_superuser_field: is_superuser
                    mechanism: password_based
                    password_hash_algorithm:
                      name: sha256
                      salt_position: suffix
                    password_hash_field: password_hash
                    salt_field: salt
                    server: 127.0.0.1:27017
                password_based:redis:
                  summary: password_based authentication with Redis backend
                  value:
                    backend: redis
                    cmd: "HMGET ${username} password_hash salt"
                    database: 0
                    mechanism: password_based
                    password_hash_algorithm:
                      name: sha256
                      salt_position: suffix
                    redis_type: single
                    server: 127.0.0.1:6379
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_4'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_7'
      security:
      - basicAuth: []
      - bearerAuth: []
    delete:
      tags:
      - Gateway Authentication
      summary: Delete gateway authenticator
      description: Delete the authenticator of the specified gateway.
      parameters:
      - name: name
        in: path
        description: "Gateway Name.<br/><br/>It's enum with `stomp`, `mqttsn`, `coap`,\
          \ `lwm2m`, `exproto`"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: stomp
      responses:
        "204":
          description: Deleted
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_4'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_7'
      security:
      - basicAuth: []
      - bearerAuth: []
  /clients/{clientid}/unsubscribe/bulk:
    post:
      tags:
      - Clients
      description: Unsubscribe bulk
      parameters:
      - name: clientid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/emqx_mgmt_api_clients.unsubscribe'
      responses:
        "204":
          description: Unsubscribe OK
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_12'
      security:
      - basicAuth: []
      - bearerAuth: []
  /clients/{clientid}/subscribe/bulk:
    post:
      tags:
      - Clients
      description: Subscribe bulk
      parameters:
      - name: clientid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/emqx_mgmt_api_clients.subscribe'
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/emqx_mgmt_api_subscriptions.subscription'
                x-content-type: application/json
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_12'
      security:
      - basicAuth: []
      - bearerAuth: []
  /configs/alarm:
    get:
      tags:
      - Configs
      summary: Get the sub-configurations under *alarm*
      description: Get the sub-configurations under *alarm*
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/broker.alarm'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_8'
      security:
      - basicAuth: []
      - bearerAuth: []
    put:
      tags:
      - Configs
      summary: Update the sub-configurations under *alarm*
      description: Update the sub-configurations under *alarm*
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/broker.alarm'
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/broker.alarm'
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_5'
        "403":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_5'
      security:
      - basicAuth: []
      - bearerAuth: []
  /nodes/{node}:
    get:
      tags:
      - Nodes
      description: Get node info
      parameters:
      - name: node
        in: path
        description: Node name
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: emqx@127.0.0.1
      responses:
        "200":
          description: Get node info successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emqx_mgmt_api_nodes.node_info'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_5'
      security:
      - basicAuth: []
      - bearerAuth: []
  /gateways/coap/clients/{clientid}/request:
    post:
      tags:
      - CoAP Gateways
      summary: Send a Request to a Client
      description: Send a CoAP request message to the client
      parameters:
      - name: clientid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/clientid_request_body'
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_11'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_18'
        "504":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_504'
      security:
      - basicAuth: []
      - bearerAuth: []
  /listeners/{id}/stop:
    post:
      tags:
      - Listeners
      description: Stop the listener on all nodes.
      parameters:
      - name: id
        in: path
        description: Listener id
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: tcp:demo
      responses:
        "200":
          description: Updated
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_14'
      security:
      - basicAuth: []
      - bearerAuth: []
  /topics:
    get:
      tags:
      - Topics
      description: Topics list
      parameters:
      - name: topic
        in: query
        description: Topic Name
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: ""
      - name: node
        in: query
        description: Node Name
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: emqx@172.20.0.2
      - name: page
        in: query
        description: Page number of the results to fetch.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
        example: 1
      - name: limit
        in: query
        description: Results per page(max 1000)
        required: false
        style: form
        explode: true
        schema:
          maximum: 1000
          minimum: 1
          type: integer
          default: 100
        example: 50
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_12'
      security:
      - basicAuth: []
      - bearerAuth: []
  /authorization/sources:
    get:
      tags:
      - Authorization
      description: List all authorization sources
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emqx_authz_api_sources.sources'
      security:
      - basicAuth: []
      - bearerAuth: []
    post:
      tags:
      - Authorization
      description: Add a new source
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authorization_sources_body'
      responses:
        "204":
          description: Authorization source created successfully
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
      security:
      - basicAuth: []
      - bearerAuth: []
  /plugins:
    get:
      tags:
      - Plugins
      summary: List all installed plugins
      description: "Plugins are launched in top-down order.<br/>Use `POST /plugins/{name}/move`\
        \ to change the boot order."
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/plugins.plugin'
                x-content-type: application/json
      security:
      - basicAuth: []
      - bearerAuth: []
  /login:
    post:
      tags:
      - Dashboard
      summary: Dashboard authentication
      description: Get Dashboard Auth Token.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login_body'
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_13'
        "401":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
      security: []
  /bridges/{id}:
    get:
      tags:
      - Bridges
      summary: Get bridge
      description: Get a bridge by Id
      parameters:
      - name: id
        in: path
        description: "The bridge Id. Must be of format {type}:{name}"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: webhook:webhook_example
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_14'
              examples:
                mqtt_example:
                  summary: MQTT Bridge
                  value:
                    clean_start: true
                    egress:
                      local:
                        topic: emqx/#
                      remote:
                        payload: "${payload}"
                        qos: "${qos}"
                        retain: false
                        topic: "from_emqx/${topic}"
                    enable: true
                    ingress:
                      local:
                        payload: "${payload}"
                        qos: "${qos}"
                        retain: "${retain}"
                        topic: "from_aws/${topic}"
                      remote:
                        qos: 1
                        topic: aws/#
                    keepalive: 300s
                    max_inflight: 100
                    name: mqtt_example
                    password: '******'
                    proto_ver: v4
                    resource_opts:
                      health_check_interval: 15s
                      max_buffer_bytes: 104857600
                      query_mode: sync
                    retry_interval: 15s
                    server: 127.0.0.1:1883
                    ssl:
                      enable: false
                    type: mqtt
                    username: foo
                webhook_example:
                  summary: WebHook
                  value:
                    body: "${payload}"
                    connect_timeout: 15s
                    enable: true
                    enable_pipelining: 100
                    local_topic: emqx_webhook/#
                    max_retries: 3
                    method: post
                    name: webhook_example
                    pool_size: 4
                    pool_type: random
                    request_timeout: 15s
                    resource_opts:
                      health_check_interval: 15000
                      inflight_window: 100
                      max_buffer_bytes: 104857600
                      query_mode: async
                      worker_pool_size: 1
                    ssl:
                      enable: false
                    type: webhook
                    url: "http://localhost:9901/messages/${topic}"
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_3'
      security:
      - basicAuth: []
      - bearerAuth: []
    put:
      tags:
      - Bridges
      summary: Update bridge
      description: Update a bridge by Id
      parameters:
      - name: id
        in: path
        description: "The bridge Id. Must be of format {type}:{name}"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: webhook:webhook_example
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/bridges_id_body'
            examples:
              mqtt_example:
                summary: MQTT Bridge
                value:
                  clean_start: true
                  egress:
                    local:
                      topic: emqx/#
                    remote:
                      payload: "${payload}"
                      qos: "${qos}"
                      retain: false
                      topic: "from_emqx/${topic}"
                  enable: true
                  ingress:
                    local:
                      payload: "${payload}"
                      qos: "${qos}"
                      retain: "${retain}"
                      topic: "from_aws/${topic}"
                    remote:
                      qos: 1
                      topic: aws/#
                  keepalive: 300s
                  max_inflight: 100
                  password: '******'
                  proto_ver: v4
                  resource_opts:
                    health_check_interval: 15s
                    max_buffer_bytes: 104857600
                    query_mode: sync
                  retry_interval: 15s
                  server: 127.0.0.1:1883
                  ssl:
                    enable: false
                  username: foo
              webhook_example:
                summary: WebHook
                value:
                  body: "${payload}"
                  connect_timeout: 15s
                  enable: true
                  enable_pipelining: 100
                  local_topic: emqx_webhook/#
                  max_retries: 3
                  method: post
                  pool_size: 4
                  pool_type: random
                  request_timeout: 15s
                  resource_opts:
                    health_check_interval: 15000
                    inflight_window: 100
                    max_buffer_bytes: 104857600
                    query_mode: async
                    worker_pool_size: 1
                  ssl:
                    enable: false
                  url: "http://localhost:9901/messages/${topic}"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_14'
              examples:
                mqtt_example:
                  summary: MQTT Bridge
                  value:
                    clean_start: true
                    egress:
                      local:
                        topic: emqx/#
                      remote:
                        payload: "${payload}"
                        qos: "${qos}"
                        retain: false
                        topic: "from_emqx/${topic}"
                    enable: true
                    ingress:
                      local:
                        payload: "${payload}"
                        qos: "${qos}"
                        retain: "${retain}"
                        topic: "from_aws/${topic}"
                      remote:
                        qos: 1
                        topic: aws/#
                    keepalive: 300s
                    max_inflight: 100
                    name: mqtt_example
                    password: '******'
                    proto_ver: v4
                    resource_opts:
                      health_check_interval: 15s
                      max_buffer_bytes: 104857600
                      query_mode: sync
                    retry_interval: 15s
                    server: 127.0.0.1:1883
                    ssl:
                      enable: false
                    type: mqtt
                    username: foo
                webhook_example:
                  summary: WebHook
                  value:
                    body: "${payload}"
                    connect_timeout: 15s
                    enable: true
                    enable_pipelining: 100
                    local_topic: emqx_webhook/#
                    max_retries: 3
                    method: post
                    name: webhook_example
                    pool_size: 4
                    pool_type: random
                    request_timeout: 15s
                    resource_opts:
                      health_check_interval: 15000
                      inflight_window: 100
                      max_buffer_bytes: 104857600
                      query_mode: async
                      worker_pool_size: 1
                    ssl:
                      enable: false
                    type: webhook
                    url: "http://localhost:9901/messages/${topic}"
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_15'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_3'
      security:
      - basicAuth: []
      - bearerAuth: []
    delete:
      tags:
      - Bridges
      summary: Delete bridge
      description: Delete a bridge by Id
      parameters:
      - name: id
        in: path
        description: "The bridge Id. Must be of format {type}:{name}"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: webhook:webhook_example
      responses:
        "204":
          description: Bridge deleted
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_16'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_3'
        "503":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_503'
      security:
      - basicAuth: []
      - bearerAuth: []
  /configs/dashboard:
    get:
      tags:
      - Configs
      summary: Get the sub-configurations under *dashboard*
      description: Get the sub-configurations under *dashboard*
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dashboard.dashboard'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_8'
      security:
      - basicAuth: []
      - bearerAuth: []
    put:
      tags:
      - Configs
      summary: Update the sub-configurations under *dashboard*
      description: Update the sub-configurations under *dashboard*
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dashboard.dashboard'
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dashboard.dashboard'
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_5'
        "403":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_5'
      security:
      - basicAuth: []
      - bearerAuth: []
  /gateways/{name}/clients/{clientid}/subscriptions:
    get:
      tags:
      - Gateway Clients
      summary: List client's subscription
      description: Get the gateway client subscriptions
      parameters:
      - name: clientid
        in: path
        description: Client ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: name
        in: path
        description: Gateway Name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/emqx_gateway_api_clients.subscription'
                x-content-type: application/json
              examples:
                general_subscription_list:
                  summary: A general subscription list
                  value:
                  - nl: 0
                    qos: 1
                    rap: 0
                    rh: 0
                    topic: test/topic
                stomp_subscription_list:
                  summary: The STOMP subscription list
                  value:
                  - example_stomp_subscription
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_4'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_7'
      security:
      - basicAuth: []
      - bearerAuth: []
    post:
      tags:
      - Gateway Clients
      summary: Add subscription for client
      description: Create a subscription membership
      parameters:
      - name: clientid
        in: path
        description: Client ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: name
        in: path
        description: Gateway Name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/emqx_gateway_api_clients.subscription'
            examples:
              general_subscription:
                summary: A general subscription
                value:
                  nl: 0
                  qos: 1
                  rap: 0
                  rh: 0
                  topic: test/topic
              stomp_subscription:
                summary: A STOMP subscription
                value:
                  nl: 0
                  qos: 1
                  rap: 0
                  rh: 0
                  sub_props:
                    subid: "10"
                  topic: stomp/topic
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emqx_gateway_api_clients.subscription'
              examples:
                general_subscription:
                  summary: A general subscription
                  value:
                    nl: 0
                    qos: 1
                    rap: 0
                    rh: 0
                    topic: test/topic
                stomp_subscription:
                  summary: A STOMP subscription
                  value:
                    nl: 0
                    qos: 1
                    rap: 0
                    rh: 0
                    sub_props:
                      subid: "10"
                    topic: stomp/topic
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_4'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_7'
      security:
      - basicAuth: []
      - bearerAuth: []
  /cluster/{node}/invite:
    put:
      tags:
      - Cluster
      description: Invite node to cluster
      parameters:
      - name: node
        in: path
        description: node name
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: emqx2@127.0.0.1
      responses:
        "200":
          description: ok
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_17'
      security:
      - basicAuth: []
      - bearerAuth: []
  /cluster/topology:
    get:
      tags:
      - Cluster
      description: "Get RLOG cluster topology: connections between core and replicant\
        \ nodes."
      parameters: []
      responses:
        "200":
          description: Cluster topology
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/cluster.core_replicants'
                x-content-type: application/json
      security:
      - basicAuth: []
      - bearerAuth: []
  /mqtt/retainer/messages:
    get:
      tags:
      - Retainer
      description: List retained messages.
      parameters:
      - name: page
        in: query
        description: Page number of the results to fetch.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
        example: 1
      - name: limit
        in: query
        description: Results per page(max 1000)
        required: false
        style: form
        explode: true
        schema:
          maximum: 1000
          minimum: 1
          type: integer
          default: 100
        example: 50
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_15'
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_18'
      security:
      - basicAuth: []
      - bearerAuth: []
  /plugins/{name}/move:
    post:
      tags:
      - Plugins
      summary: Move plugin within plugin hiearchy
      description: Setting the boot order of plugins.
      parameters:
      - name: name
        in: path
        description: "^[A-Za-z]+[A-Za-z0-9-_.]*$"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: emqx_plugin_template-5.0-rc.1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/plugins.position'
            examples:
              move_to_after:
                summary: move plugin after other plugins
                value:
                  position: after:emqx_plugin_demo-5.1-rc.2
              move_to_before:
                summary: move plugin before other plugins
                value:
                  position: before:emqx_plugin_demo-5.1-rc.2
              move_to_front:
                summary: move plugin on the front
                value:
                  position: front
              move_to_rear:
                summary: move plugin on the rear
                value:
                  position: rear
      responses:
        "200":
          description: OK
      security:
      - basicAuth: []
      - bearerAuth: []
  /alarms:
    get:
      tags:
      - Alarms
      description: "List currently activated alarms or historical alarms, determined\
        \ by query parameters."
      parameters:
      - name: page
        in: query
        description: Page number of the results to fetch.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
        example: 1
      - name: limit
        in: query
        description: Results per page(max 1000)
        required: false
        style: form
        explode: true
        schema:
          maximum: 1000
          minimum: 1
          type: integer
          default: 100
        example: 50
      - name: activated
        in: query
        description: "It is used to specify the alarm type of the query.<br/>When\
          \ true, it returns the currently activated alarm,<br/>and when it is false,\
          \ it returns the historical alarm.<br/>The default is false."
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_16'
      security:
      - basicAuth: []
      - bearerAuth: []
    delete:
      tags:
      - Alarms
      description: Remove all historical alarms.
      parameters: []
      responses:
        "204":
          description: Historical alarms have been cleared successfully.
      security:
      - basicAuth: []
      - bearerAuth: []
  /authorization/sources/built_in_database/rules/users/{username}:
    get:
      tags:
      - Authorization
      description: Get rule for 'username'
      parameters:
      - name: username
        in: path
        description: Username
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: user1
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emqx_authz_api_mnesia.rules_for_username'
              examples:
                password_based:built_in_database:
                  summary: Username
                  value:
                    rules:
                    - action: publish
                      permission: allow
                      topic: test/topic/1
                    - action: subscribe
                      permission: allow
                      topic: test/topic/2
                    - action: all
                      permission: deny
                      topic: eq test/#
                    - action: publish
                      permission: allow
                      qos:
                      - "1"
                      retain: "true"
                      topic: test/topic/3
                    - action: publish
                      permission: allow
                      qos:
                      - "0"
                      - "1"
                      - "2"
                      retain: all
                      topic: test/topic/4
                    username: user1
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - basicAuth: []
      - bearerAuth: []
    put:
      tags:
      - Authorization
      description: Set rule for 'username'
      parameters:
      - name: username
        in: path
        description: Username
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: user1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/emqx_authz_api_mnesia.rules_for_username'
            examples:
              password_based:built_in_database:
                summary: Username
                value:
                  rules:
                  - action: publish
                    permission: allow
                    topic: test/topic/1
                  - action: subscribe
                    permission: allow
                    topic: test/topic/2
                  - action: all
                    permission: deny
                    topic: eq test/#
                  - action: publish
                    permission: allow
                    qos:
                    - "1"
                    retain: "true"
                    topic: test/topic/3
                  - action: publish
                    permission: allow
                    qos:
                    - "0"
                    - "1"
                    - "2"
                    retain: all
                    topic: test/topic/4
                  username: user1
      responses:
        "204":
          description: Updated
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_3'
      security:
      - basicAuth: []
      - bearerAuth: []
    delete:
      tags:
      - Authorization
      description: Delete rule for 'username'
      parameters:
      - name: username
        in: path
        description: Username
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: user1
      responses:
        "204":
          description: Deleted
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_19'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_19'
      security:
      - basicAuth: []
      - bearerAuth: []
  /subscriptions:
    get:
      tags:
      - Subscriptions
      description: List subscriptions
      parameters:
      - name: page
        in: query
        description: Page number of the results to fetch.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
        example: 1
      - name: limit
        in: query
        description: Results per page(max 1000)
        required: false
        style: form
        explode: true
        schema:
          maximum: 1000
          minimum: 1
          type: integer
          default: 100
        example: 50
      - name: node
        in: query
        description: Node name
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: emqx@172.20.0.2
      - name: clientid
        in: query
        description: Client ID
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: qos
        in: query
        description: QoS
        required: false
        style: form
        explode: true
        schema:
          maximum: 2
          minimum: 0
          type: integer
          example: 0
      - name: topic
        in: query
        description: "Topic, url encoding"
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: match_topic
        in: query
        description: "Match topic string, url encoding"
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: share_group
        in: query
        description: Shared subscription group name
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/emqx_mgmt_api_subscriptions.subscription'
                x-content-type: application/json
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_20'
        "500":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500_2'
      security:
      - basicAuth: []
      - bearerAuth: []
  /error_codes:
    get:
      tags:
      - Error Codes
      description: API Error Codes
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/dashboard.error_code'
                x-content-type: application/json
      security: []
  /authorization/sources/built_in_database/rules:
    delete:
      tags:
      - Authorization
      description: "Delete all rules for all 'users', 'clients' and 'all'"
      parameters: []
      responses:
        "204":
          description: Deleted
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
      security:
      - basicAuth: []
      - bearerAuth: []
  /authorization/sources/{type}/move:
    post:
      tags:
      - Authorization
      description: Change the exection order of sources
      parameters:
      - name: type
        in: path
        description: Authorization type
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - http
          - mongodb
          - redis
          - built_in_database
          - mysql
          - postgresql
          - file
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/emqx_authz_api_schema.position'
            examples:
              front:
                summary: front example
                value:
                  position: front
              rear:
                summary: rear example
                value:
                  position: rear
              relative_after:
                summary: relative example
                value:
                  position: after:file
              relative_before:
                summary: relative example
                value:
                  position: before:file
      responses:
        "204":
          description: No Content
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - basicAuth: []
      - bearerAuth: []
  /telemetry/data:
    get:
      tags:
      - Telemetry
      description: Get telemetry data
      parameters: []
      responses:
        "200":
          description: Get telemetry data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emqx_telemetry_api.telemetry'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_20'
      security:
      - basicAuth: []
      - bearerAuth: []
  /gateways/{name}/listeners/{id}/authentication/users/{uid}:
    get:
      tags:
      - Gateway Listeners
      summary: Get user info
      description: Get user info from the gateway authenticator (only supports built_in_database)
      parameters:
      - name: name
        in: path
        description: "Gateway Name.<br/><br/>It's enum with `stomp`, `mqttsn`, `coap`,\
          \ `lwm2m`, `exproto`"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: stomp
      - name: id
        in: path
        description: Listener ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: ""
      - name: uid
        in: path
        description: User ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: ""
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emqx_authn_api.response_user'
              example:
                regular_user:
                  summary: Regular user
                  value:
                    user_id: user1
                super_user:
                  summary: Superuser
                  value:
                    is_superuser: true
                    user_id: user2
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_4'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_7'
      security:
      - basicAuth: []
      - bearerAuth: []
    put:
      tags:
      - Gateway Listeners
      summary: Update user info
      description: Update the user info for the gateway authenticator (only supports
        built_in_database)
      parameters:
      - name: name
        in: path
        description: "Gateway Name.<br/><br/>It's enum with `stomp`, `mqttsn`, `coap`,\
          \ `lwm2m`, `exproto`"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: stomp
      - name: id
        in: path
        description: Listener ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: ""
      - name: uid
        in: path
        description: User ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/emqx_authn_api.request_user_update'
            examples:
              regular_user:
                summary: Update regular user
                value:
                  password: '******'
              super_user:
                summary: Update user and promote to superuser
                value:
                  is_superuser: true
                  password: '******'
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emqx_authn_api.response_user'
              example:
                regular_user:
                  summary: Regular user
                  value:
                    user_id: user1
                super_user:
                  summary: Superuser
                  value:
                    is_superuser: true
                    user_id: user2
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_4'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_7'
      security:
      - basicAuth: []
      - bearerAuth: []
    delete:
      tags:
      - Gateway Listeners
      summary: Delete user
      description: Delete the user for the gateway authenticator (only supports built_in_database)
      parameters:
      - name: name
        in: path
        description: "Gateway Name.<br/><br/>It's enum with `stomp`, `mqttsn`, `coap`,\
          \ `lwm2m`, `exproto`"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: stomp
      - name: id
        in: path
        description: Listener ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: ""
      - name: uid
        in: path
        description: User ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: ""
      responses:
        "204":
          description: Deleted
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_4'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_7'
      security:
      - basicAuth: []
      - bearerAuth: []
  /authentication:
    get:
      tags:
      - Authentication
      description: List authenticators for global authentication.
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                  - $ref: '#/components/schemas/authn.scram'
                  - $ref: '#/components/schemas/authn.jwt_jwks'
                  - $ref: '#/components/schemas/authn.jwt_public_key'
                  - $ref: '#/components/schemas/authn.jwt_hmac'
                  - $ref: '#/components/schemas/authn.http_post'
                  - $ref: '#/components/schemas/authn.http_get'
                  - $ref: '#/components/schemas/authn.redis_sentinel'
                  - $ref: '#/components/schemas/authn.redis_cluster'
                  - $ref: '#/components/schemas/authn.redis_single'
                  - $ref: '#/components/schemas/authn.mongo_sharded'
                  - $ref: '#/components/schemas/authn.mongo_rs'
                  - $ref: '#/components/schemas/authn.mongo_single'
                  - $ref: '#/components/schemas/authn.postgresql'
                  - $ref: '#/components/schemas/authn.mysql'
                  - $ref: '#/components/schemas/authn.builtin_db'
                x-content-type: application/json
              example:
              - algorithm: hmac-based
                mechanism: jwt
                secret: mysecret
                secret_base64_encoded: false
                use_jwks: false
                verify_claims:
                  username: "${username}"
              - backend: built_in_database
                mechanism: password_based
                password_hash_algorithm:
                  name: sha256
                  salt_position: suffix
                user_id_type: username
              - backend: http
                body:
                  password: "${password}"
                  username: "${username}"
                connect_timeout: 5s
                enable_pipelining: 100
                headers:
                  content-type: application/json
                mechanism: password_based
                method: post
                pool_size: 8
                request_timeout: 5s
                ssl:
                  enable: false
                url: http://127.0.0.1:18083
              - backend: mongodb
                collection: users
                database: example
                filter:
                  username: "${username}"
                is_superuser_field: is_superuser
                mechanism: password_based
                password_hash_algorithm:
                  name: sha256
                  salt_position: suffix
                password_hash_field: password_hash
                salt_field: salt
                server: 127.0.0.1:27017
              - backend: redis
                cmd: "HMGET ${username} password_hash salt"
                database: 0
                mechanism: password_based
                password_hash_algorithm:
                  name: sha256
                  salt_position: suffix
                redis_type: single
                server: 127.0.0.1:6379
      security:
      - basicAuth: []
      - bearerAuth: []
    post:
      tags:
      - Authentication
      description: Create authenticator for global authentication.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authentication_body'
            examples:
              jwt:
                summary: JWT authentication
                value:
                  algorithm: hmac-based
                  mechanism: jwt
                  secret: mysecret
                  secret_base64_encoded: false
                  use_jwks: false
                  verify_claims:
                    username: "${username}"
              password_based:built_in_database:
                summary: Built-in password_based authentication
                value:
                  backend: built_in_database
                  mechanism: password_based
                  password_hash_algorithm:
                    name: sha256
                    salt_position: suffix
                  user_id_type: username
              password_based:http:
                summary: password_based authentication through external HTTP API
                value:
                  backend: http
                  body:
                    password: "${password}"
                    username: "${username}"
                  connect_timeout: 5s
                  enable_pipelining: 100
                  headers:
                    content-type: application/json
                  mechanism: password_based
                  method: post
                  pool_size: 8
                  request_timeout: 5s
                  ssl:
                    enable: false
                  url: http://127.0.0.1:18083
              password_based:mongodb:
                summary: password_based authentication with MongoDB backend
                value:
                  backend: mongodb
                  collection: users
                  database: example
                  filter:
                    username: "${username}"
                  is_superuser_field: is_superuser
                  mechanism: password_based
                  password_hash_algorithm:
                    name: sha256
                    salt_position: suffix
                  password_hash_field: password_hash
                  salt_field: salt
                  server: 127.0.0.1:27017
              password_based:redis:
                summary: password_based authentication with Redis backend
                value:
                  backend: redis
                  cmd: "HMGET ${username} password_hash salt"
                  database: 0
                  mechanism: password_based
                  password_hash_algorithm:
                    name: sha256
                    salt_position: suffix
                  redis_type: single
                  server: 127.0.0.1:6379
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authentication_body'
              examples:
                jwt:
                  summary: JWT authentication
                  value:
                    algorithm: hmac-based
                    mechanism: jwt
                    secret: mysecret
                    secret_base64_encoded: false
                    use_jwks: false
                    verify_claims:
                      username: "${username}"
                password_based:built_in_database:
                  summary: Built-in password_based authentication
                  value:
                    backend: built_in_database
                    mechanism: password_based
                    password_hash_algorithm:
                      name: sha256
                      salt_position: suffix
                    user_id_type: username
                password_based:http:
                  summary: password_based authentication through external HTTP API
                  value:
                    backend: http
                    body:
                      password: "${password}"
                      username: "${username}"
                    connect_timeout: 5s
                    enable_pipelining: 100
                    headers:
                      content-type: application/json
                    mechanism: password_based
                    method: post
                    pool_size: 8
                    request_timeout: 5s
                    ssl:
                      enable: false
                    url: http://127.0.0.1:18083
                password_based:mongodb:
                  summary: password_based authentication with MongoDB backend
                  value:
                    backend: mongodb
                    collection: users
                    database: example
                    filter:
                      username: "${username}"
                    is_superuser_field: is_superuser
                    mechanism: password_based
                    password_hash_algorithm:
                      name: sha256
                      salt_position: suffix
                    password_hash_field: password_hash
                    salt_field: salt
                    server: 127.0.0.1:27017
                password_based:redis:
                  summary: password_based authentication with Redis backend
                  value:
                    backend: redis
                    cmd: "HMGET ${username} password_hash salt"
                    database: 0
                    mechanism: password_based
                    password_hash_algorithm:
                      name: sha256
                      salt_position: suffix
                    redis_type: single
                    server: 127.0.0.1:6379
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "409":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_409'
      security:
      - basicAuth: []
      - bearerAuth: []
  /clients/{clientid}/subscribe:
    post:
      tags:
      - Clients
      description: Subscribe
      parameters:
      - name: clientid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/emqx_mgmt_api_clients.subscribe'
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emqx_mgmt_api_subscriptions.subscription'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_12'
      security:
      - basicAuth: []
      - bearerAuth: []
  /trace:
    get:
      tags:
      - Trace
      description: List all trace
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/trace.trace'
                x-content-type: application/json
      security:
      - basicAuth: []
      - bearerAuth: []
    post:
      tags:
      - Trace
      description: Create new trace
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/trace_body'
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/trace.trace'
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_21'
        "409":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_409_2'
      security:
      - basicAuth: []
      - bearerAuth: []
    delete:
      tags:
      - Trace
      description: Clear all traces
      parameters: []
      responses:
        "204":
          description: No Content
      security:
      - basicAuth: []
      - bearerAuth: []
  /exhooks/{name}/move:
    post:
      tags:
      - ExHook
      description: "Move the server.<br/>NOTE: The position should be \"front | rear\
        \ | before:{name} | after:{name}"
      parameters:
      - name: name
        in: path
        description: The Exhook server name
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: default
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/exhook.move_req'
            examples:
              front:
                summary: absolute position 'front'
                value:
                  position: front
              rear:
                summary: absolute position 'rear'
                value:
                  position: rear
              related_after:
                summary: relative position 'after'
                value:
                  position: after:default
              related_before:
                summary: relative position 'before'
                value:
                  position: before:default
      responses:
        "204":
          description: No Content
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "500":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      security:
      - basicAuth: []
      - bearerAuth: []
  /slow_subscriptions/settings:
    get:
      tags:
      - Slow Subscriptions
      description: View slow subs settings
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/slow_subs.slow_subs'
      security:
      - basicAuth: []
      - bearerAuth: []
    put:
      tags:
      - Slow Subscriptions
      description: Update slow subs settings
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/slow_subs.slow_subs'
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/slow_subs.slow_subs'
      security:
      - basicAuth: []
      - bearerAuth: []
  /mqtt/topic_metrics:
    get:
      tags:
      - MQTT
      description: List topic metrics
      parameters: []
      responses:
        "200":
          description: List topic metrics
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/emqx_topic_metrics_api.topic_metrics'
                x-content-type: application/json
      security:
      - basicAuth: []
      - bearerAuth: []
    put:
      tags:
      - MQTT
      description: Reset telemetry status
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/emqx_topic_metrics_api.reset'
            examples:
              reset_all_topic_metrics:
                summary: reset_all_topic_metrics
                value:
                  action: reset
              reset_specific_one_topic_metrics:
                summary: reset_specific_one_topic_metrics
                value:
                  action: reset
                  topic: testtopic/1
      responses:
        "204":
          description: Reset telemetry status
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_14'
      security:
      - basicAuth: []
      - bearerAuth: []
    post:
      tags:
      - MQTT
      description: Create topic metrics
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/mqtt_topic_metrics_body'
      responses:
        "204":
          description: Create topic metrics
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_22'
        "409":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_409_3'
      security:
      - basicAuth: []
      - bearerAuth: []
  /error_codes/{code}:
    get:
      tags:
      - Error Codes
      description: API Error Codes
      parameters:
      - name: code
        in: path
        description: API Error Codes
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - BAD_USERNAME_OR_PWD
          - BAD_API_KEY_OR_SECRET
          - BAD_REQUEST
          - NOT_MATCH
          - ALREADY_EXISTS
          - BAD_CONFIG_SCHEMA
          - BAD_LISTENER_ID
          - BAD_NODE_NAME
          - BAD_RPC
          - BAD_TOPIC
          - EXCEED_LIMIT
          - INVALID_PARAMETER
          - CONFLICT
          - NO_DEFAULT_VALUE
          - DEPENDENCY_EXISTS
          - MESSAGE_ID_SCHEMA_ERROR
          - INVALID_ID
          - MESSAGE_ID_NOT_FOUND
          - NOT_FOUND
          - CLIENTID_NOT_FOUND
          - CLIENT_NOT_FOUND
          - RESOURCE_NOT_FOUND
          - TOPIC_NOT_FOUND
          - USER_NOT_FOUND
          - INTERNAL_ERROR
          - SERVICE_UNAVAILABLE
          - SOURCE_ERROR
          - UPDATE_FAILED
          - REST_FAILED
          - CLIENT_NOT_RESPONSE
        example: BAD_USERNAME_OR_PWD
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dashboard.error_code'
      security: []
  /bridges/{id}/{operation}:
    post:
      tags:
      - Bridges
      summary: Stop or restart bridge
      description: Stop/Restart bridges on all nodes in the cluster.
      parameters:
      - name: id
        in: path
        description: "The bridge Id. Must be of format {type}:{name}"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: webhook:webhook_example
      - name: operation
        in: path
        description: "Operations can be one of: stop, restart"
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - start
          - stop
          - restart
        example: start
      responses:
        "204":
          description: Operation success
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_23'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_16'
        "501":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_501'
        "503":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_503'
      security:
      - basicAuth: []
      - bearerAuth: []
  /gateways/{name}/clients/{clientid}/subscriptions/{topic}:
    delete:
      tags:
      - Gateway Clients
      summary: Delete client's subscription
      description: Delete a subscriptions membership
      parameters:
      - name: topic
        in: path
        description: Topic Filter/Name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: clientid
        in: path
        description: Client ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: name
        in: path
        description: Gateway Name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Unsubscribed
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_4'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_7'
      security:
      - basicAuth: []
      - bearerAuth: []
  /mqtt/delayed/messages:
    get:
      tags:
      - MQTT
      description: List delayed messages
      parameters:
      - name: page
        in: query
        description: Page number of the results to fetch.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
        example: 1
      - name: limit
        in: query
        description: Results per page(max 1000)
        required: false
        style: form
        explode: true
        schema:
          maximum: 1000
          minimum: 1
          type: integer
          default: 100
        example: 50
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_17'
      security:
      - basicAuth: []
      - bearerAuth: []
  /users/{username}:
    put:
      tags:
      - Dashboard
      description: Update dashboard user description
      parameters:
      - name: username
        in: path
        description: Dashboard Username
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: admin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/users_username_body'
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_9'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_21'
      security:
      - basicAuth: []
      - bearerAuth: []
    delete:
      tags:
      - Dashboard
      description: Delete dashboard user
      parameters:
      - name: username
        in: path
        description: Dashboard Username
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: admin
      responses:
        "204":
          description: Delete User successfully
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_24'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_21'
      security:
      - basicAuth: []
      - bearerAuth: []
  /exhooks:
    get:
      tags:
      - ExHook
      description: List all servers
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/exhook.detail_server_info'
                x-content-type: application/json
      security:
      - basicAuth: []
      - bearerAuth: []
    post:
      tags:
      - ExHook
      description: Add a server
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/exhook.server_config'
            example:
              auto_reconnect: 60s
              enable: true
              failed_action: deny
              name: default
              pool_size: 8
              request_timeout: 5s
              ssl:
                cacertfile: /etc/emqx/certs/cacert.pem
                certfile: /etc/emqx/certs/cert.pem
                enable: false
                keyfile: /etc/emqx/certs/key.pem
              url: http://127.0.0.1:8081
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exhook.detail_server_info'
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_25'
        "500":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      security:
      - basicAuth: []
      - bearerAuth: []
  /gateways/lwm2m/clients/{clientid}/lookup:
    get:
      tags:
      - LwM2M Gateways
      summary: List Client's Resources
      description: Look up a resource
      parameters:
      - name: clientid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: urn:oma:lwm2m:oma:2
      - name: path
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
        example: /3/0/7
      - name: action
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
        example: discover
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_18'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_22'
      security:
      - basicAuth: []
      - bearerAuth: []
  /rules/{id}/metrics:
    get:
      tags:
      - Rules
      summary: Get rule metrics
      description: Get a rule's metrics by given Id
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: my_rule_id
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emqx_rule_api_schema.rule_metrics'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_23'
      security:
      - basicAuth: []
      - bearerAuth: []
  /slow_subscriptions:
    get:
      tags:
      - Slow Subscriptions
      description: View slow topics statistics record data
      parameters:
      - name: page
        in: query
        description: Page number of the results to fetch.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
        example: 1
      - name: limit
        in: query
        description: Results per page(max 1000)
        required: false
        style: form
        explode: true
        schema:
          maximum: 1000
          minimum: 1
          type: integer
          default: 100
        example: 50
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_19'
      security:
      - basicAuth: []
      - bearerAuth: []
    delete:
      tags:
      - Slow Subscriptions
      description: Clear current data and re count slow topic
      parameters: []
      responses:
        "204":
          description: No Content
      security:
      - basicAuth: []
      - bearerAuth: []
  /gateways/{name}:
    get:
      tags:
      - Gateways
      summary: Get gateway
      description: Get the gateway configurations
      parameters:
      - name: name
        in: path
        description: "Gateway Name.<br/><br/>It's enum with `stomp`, `mqttsn`, `coap`,\
          \ `lwm2m`, `exproto`"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: stomp
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_20'
              examples:
                coap_gateway:
                  summary: A simple CoAP gateway config
                  value:
                    connection_required: false
                    enable: true
                    enable_stats: true
                    heartbeat: 30s
                    idle_timeout: 30s
                    listeners:
                    - bind: "5683"
                      max_conn_rate: 1000
                      max_connections: 1024000
                      name: default
                      type: udp
                    mountpoint: coap/
                    name: coap
                    notify_type: qos
                    publish_qos: coap
                    subscribe_qos: coap
                exproto_gateway:
                  summary: A simple ExProto gateway config
                  value:
                    enable: true
                    enable_stats: true
                    handler:
                      address: http://127.0.0.1:9001
                    idle_timeout: 30s
                    listeners:
                    - bind: "7993"
                      max_conn_rate: 1000
                      max_connections: 1024000
                      name: default
                      type: tcp
                    mountpoint: exproto/
                    name: exproto
                    server:
                      bind: "9100"
                lwm2m_gateway:
                  summary: A simple LwM2M gateway config
                  value:
                    auto_observe: false
                    enable: true
                    enable_stats: true
                    idle_timeout: 30s
                    lifetime_max: 86400s
                    lifetime_min: 1s
                    listeners:
                    - bind: "5783"
                      max_conn_rate: 1000
                      max_connections: 1024000
                      name: default
                      type: udp
                    mountpoint: lwm2m/
                    name: lwm2m
                    qmode_time_window: 22s
                    translators:
                      command:
                        topic: dn/#
                      notify:
                        topic: up/notify
                      register:
                        topic: up/resp
                      response:
                        topic: up/resp
                      update:
                        topic: up/resp
                    update_msg_publish_condition: always
                    xml_dir: /etc/emqx/lwm2m_xml
                mqttsn_gateway:
                  summary: A simple MQTT-SN gateway config
                  value:
                    broadcast: true
                    enable: true
                    enable_qos3: true
                    enable_stats: true
                    gateway_id: 1
                    idle_timeout: 30s
                    listeners:
                    - bind: "1884"
                      max_conn_rate: 1000
                      max_connections: 1024000
                      name: default
                      type: udp
                    mountpoint: mqttsn/
                    name: mqttsn
                    predefined:
                    - id: "1001"
                      topic: pred/1001
                    - id: "1002"
                      topic: pred/1002
                stomp_gateway:
                  summary: A simple STOMP gateway config
                  value:
                    enable: true
                    enable_stats: true
                    frame:
                      max_body_length: 65535
                      max_headers: 10
                      max_headers_length: 1024
                    idle_timeout: 30s
                    listeners:
                    - bind: "61613"
                      max_conn_rate: 1000
                      max_connections: 1024000
                      name: default
                      type: tcp
                    mountpoint: stomp/
                    name: stomp
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_7'
      security:
      - basicAuth: []
      - bearerAuth: []
    put:
      tags:
      - Gateways
      summary: Load or update the gateway confs
      description: "Update the gateway basic configurations and running status.<br/><br/>Note:\
        \ The Authentication and Listener configurations should be updated by other\
        \ special APIs."
      parameters:
      - name: name
        in: path
        description: "Gateway Name.<br/><br/>It's enum with `stomp`, `mqttsn`, `coap`,\
          \ `lwm2m`, `exproto`"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: stomp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/gateways_name_body'
            examples:
              coap_gateway:
                summary: A simple CoAP gateway config
                value:
                  connection_required: false
                  enable: true
                  enable_stats: true
                  heartbeat: 30s
                  idle_timeout: 30s
                  mountpoint: coap2/
                  notify_type: qos
                  publish_qos: coap
                  subscribe_qos: coap
              exproto_gateway:
                summary: A simple ExProto gateway config
                value:
                  enable: true
                  enable_stats: true
                  handler:
                    address: http://127.0.0.1:9001
                  idle_timeout: 30s
                  mountpoint: exproto2/
                  server:
                    bind: "9100"
              lwm2m_gateway:
                summary: A simple LwM2M gateway config
                value:
                  auto_observe: false
                  enable: true
                  enable_stats: true
                  idle_timeout: 30s
                  lifetime_max: 86400s
                  lifetime_min: 1s
                  mountpoint: lwm2m2/
                  qmode_time_window: 22s
                  translators:
                    command:
                      topic: dn/#
                    notify:
                      topic: up/notify
                    register:
                      topic: up/resp
                    response:
                      topic: up/resp
                    update:
                      topic: up/resp
                  update_msg_publish_condition: always
                  xml_dir: /etc/emqx/lwm2m_xml
              mqttsn_gateway:
                summary: A simple MQTT-SN gateway config
                value:
                  broadcast: true
                  enable: true
                  enable_qos3: false
                  enable_stats: true
                  gateway_id: 1
                  idle_timeout: 30s
                  mountpoint: mqttsn2/
                  predefined:
                  - id: "1003"
                    topic: pred/1003
              stomp_gateway:
                summary: A simple STOMP gateway config
                value:
                  enable: true
                  enable_stats: true
                  frame:
                    max_body_length: 655350
                    max_headers: 100
                    max_headers_length: 10240
                  idle_timeout: 30s
                  mountpoint: stomp2/
      responses:
        "204":
          description: Gateway configuration updated
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_4'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_7'
      security:
      - basicAuth: []
      - bearerAuth: []
  /nodes:
    get:
      tags:
      - Nodes
      description: List EMQX nodes
      parameters: []
      responses:
        "200":
          description: List all EMQX nodes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/emqx_mgmt_api_nodes.node_info'
                x-content-type: application/json
      security:
      - basicAuth: []
      - bearerAuth: []
  /authorization/sources/{type}:
    get:
      tags:
      - Authorization
      description: Get a authorization source
      parameters:
      - name: type
        in: path
        description: Authorization type
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - http
          - mongodb
          - redis
          - built_in_database
          - mysql
          - postgresql
          - file
      responses:
        "200":
          description: Authorization source
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authorization_sources_body'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - basicAuth: []
      - bearerAuth: []
    put:
      tags:
      - Authorization
      description: Update source
      parameters:
      - name: type
        in: path
        description: Authorization type
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - http
          - mongodb
          - redis
          - built_in_database
          - mysql
          - postgresql
          - file
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sources_type_body'
      responses:
        "204":
          description: Authorization source updated successfully
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
      security:
      - basicAuth: []
      - bearerAuth: []
    delete:
      tags:
      - Authorization
      description: Delete source
      parameters:
      - name: type
        in: path
        description: Authorization type
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - http
          - mongodb
          - redis
          - built_in_database
          - mysql
          - postgresql
          - file
      responses:
        "204":
          description: Deleted successfully
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
      security:
      - basicAuth: []
      - bearerAuth: []
  /gateways/{name}/authentication/import_users:
    post:
      tags:
      - Gateway Authentication
      summary: Import users
      description: Import users into the gateway authenticator (only supports built_in_database)
      parameters:
      - name: name
        in: path
        description: "Gateway Name.<br/><br/>It's enum with `stomp`, `mqttsn`, `coap`,\
          \ `lwm2m`, `exproto`"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: stomp
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/authentication_import_users_body'
      responses:
        "204":
          description: Imported
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_4'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_7'
      security:
      - basicAuth: []
      - bearerAuth: []
  /api_key:
    get:
      tags:
      - API Keys
      description: Return api_key list
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_21'
      security:
      - basicAuth: []
      - bearerAuth: []
    post:
      tags:
      - API Keys
      description: Create new api_key
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/api_key_body'
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_key.app'
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_17'
      security:
      - basicAuth: []
      - bearerAuth: []
  /listeners/{id}/start:
    post:
      tags:
      - Listeners
      description: Start the listener on all nodes.
      parameters:
      - name: id
        in: path
        description: Listener id
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: tcp:demo
      responses:
        "200":
          description: Updated
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_14'
      security:
      - basicAuth: []
      - bearerAuth: []
  /banned:
    get:
      tags:
      - Banned
      description: "List all currently banned client IDs, usernames and IP addresses."
      parameters:
      - name: page
        in: query
        description: Page number of the results to fetch.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
        example: 1
      - name: limit
        in: query
        description: Results per page(max 1000)
        required: false
        style: form
        explode: true
        schema:
          maximum: 1000
          minimum: 1
          type: integer
          default: 100
        example: 50
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_22'
      security:
      - basicAuth: []
      - bearerAuth: []
    post:
      tags:
      - Banned
      description: "Add a client ID, username or IP address to the blacklist."
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/emqx_mgmt_api_banned.ban'
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_23'
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_26'
      security:
      - basicAuth: []
      - bearerAuth: []
  /trace/{name}/log:
    get:
      tags:
      - Trace
      description: view trace log
      parameters:
      - name: name
        in: path
        description: "[a-zA-Z0-9-_]"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: EMQX-TRACE-1
      - name: bytes
        in: query
        description: Maximum number of bytes to send in response
        required: false
        style: form
        explode: true
        schema:
          maximum: 2147483647
          minimum: 0
          type: integer
          default: 1000
      - name: position
        in: query
        description: Offset from the current trace position.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 0
      - name: node
        in: query
        description: Node name
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: emqx@127.0.0.1
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_24'
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_27'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_17'
        "503":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_503_1'
      security:
      - basicAuth: []
      - bearerAuth: []
  /trace/{name}:
    delete:
      tags:
      - Trace
      description: Delete specified trace
      parameters:
      - name: name
        in: path
        description: "[a-zA-Z0-9-_]"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: EMQX-TRACE-1
      responses:
        "204":
          description: Delete successfully
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_15'
      security:
      - basicAuth: []
      - bearerAuth: []
  /trace/{name}/stop:
    put:
      tags:
      - Trace
      description: Stop trace by name
      parameters:
      - name: name
        in: path
        description: "[a-zA-Z0-9-_]"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: EMQX-TRACE-1
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/trace.trace'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_15'
      security:
      - basicAuth: []
      - bearerAuth: []
  /listeners/{id}/restart:
    post:
      tags:
      - Listeners
      description: Restart listeners on all nodes.
      parameters:
      - name: id
        in: path
        description: Listener id
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: tcp:demo
      responses:
        "200":
          description: Updated
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_14'
      security:
      - basicAuth: []
      - bearerAuth: []
  /mqtt/retainer/message/{topic}:
    get:
      tags:
      - Retainer
      description: Lookup a message by a topic without wildcards.
      parameters:
      - name: topic
        in: path
        description: Topic.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Details of the message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/retainer.message'
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_18'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_24'
      security:
      - basicAuth: []
      - bearerAuth: []
    delete:
      tags:
      - Retainer
      description: Delete matching messages.
      parameters:
      - name: topic
        in: path
        description: Topic.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: ""
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_18'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_24'
      security:
      - basicAuth: []
      - bearerAuth: []
  /rule_events:
    get:
      tags:
      - Rules
      summary: List rule events
      description: List all events can be used in rules
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emqx_rule_api_schema.rule_events'
      security:
      - basicAuth: []
      - bearerAuth: []
  /clients/{clientid}/unsubscribe:
    post:
      tags:
      - Clients
      description: Unsubscribe
      parameters:
      - name: clientid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/emqx_mgmt_api_clients.unsubscribe'
      responses:
        "204":
          description: Unsubscribe OK
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_12'
      security:
      - basicAuth: []
      - bearerAuth: []
  /plugins/install:
    post:
      tags:
      - Plugins
      summary: Install a new plugin
      description: "Upload a plugin tarball (plugin-vsn.tar.gz).Follow [emqx-plugin-template](https://github.com/emqx/emqx-plugin-template)\
        \ to develop plugin."
      parameters: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/plugins_install_body'
            encoding:
              plugin:
                contentType: application/gzip
                style: form
      responses:
        "200":
          description: OK
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_28'
      security:
      - basicAuth: []
      - bearerAuth: []
  /gateways/lwm2m/clients/{clientid}/read:
    post:
      tags:
      - LwM2M Gateways
      summary: Read Value from a Resource Path
      description: Send a read command to a resource
      parameters:
      - name: clientid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: urn:oma:lwm2m:oma:2
      - name: path
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
        example: /3/0/7
      responses:
        "204":
          description: No Content
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_25'
      security:
      - basicAuth: []
      - bearerAuth: []
  /banned/{as}/{who}:
    delete:
      tags:
      - Banned
      description: "Remove a client ID, username or IP address from the blacklist."
      parameters:
      - name: as
        in: path
        description: "Ban method, which can be client ID, username or IP address."
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - clientid
          - username
          - peerhost
        example: username
      - name: who
        in: path
        description: "Ban object, specific client ID, username or IP address."
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: Badass
      responses:
        "204":
          description: Delete banned success
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_26'
      security:
      - basicAuth: []
      - bearerAuth: []
  /configs_reset/{rootname}:
    post:
      tags:
      - Configs
      description: "Reset the config entry specified by the query string parameter\
        \ `conf_path`.<br/><br/>- For a config entry that has default value, this\
        \ resets it to the default value;<br/>- For a config entry that has no default\
        \ value, an error 400 will be returned"
      parameters:
      - name: rootname
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - log
          - sysmon
          - sys_topics
          - alarm
          - dashboard
        example: sysmon
      - name: conf_path
        in: query
        description: The config path separated by '.' character
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: os.sysmem_high_watermark
      responses:
        "200":
          description: Rest config successfully
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_29'
        "403":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
      security:
      - basicAuth: []
      - bearerAuth: []
  /mqtt/retainer:
    get:
      tags:
      - Retainer
      description: View config
      parameters: []
      responses:
        "200":
          description: The config content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/retainer.retainer'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_27'
      security:
      - basicAuth: []
      - bearerAuth: []
    put:
      tags:
      - Retainer
      description: Update retainer config.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/retainer.retainer'
      responses:
        "200":
          description: Update configs successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/retainer.retainer'
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_30'
      security:
      - basicAuth: []
      - bearerAuth: []
  /authorization/cache:
    delete:
      tags:
      - Authorization
      description: Clean all authorization cache in the cluster.
      parameters: []
      responses:
        "204":
          description: No Content
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
      security:
      - basicAuth: []
      - bearerAuth: []
  /api_key/{name}:
    get:
      tags:
      - API Keys
      description: Return the specific api_key
      parameters:
      - name: name
        in: path
        description: "^[A-Za-z]+[A-Za-z0-9-_]*$"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: EMQX-API-KEY-1
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_21'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_13'
      security:
      - basicAuth: []
      - bearerAuth: []
    put:
      tags:
      - API Keys
      description: Update the specific api_key
      parameters:
      - name: name
        in: path
        description: "^[A-Za-z]+[A-Za-z0-9-_]*$"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: EMQX-API-KEY-1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/api_key_name_body'
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_21'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_13'
      security:
      - basicAuth: []
      - bearerAuth: []
    delete:
      tags:
      - API Keys
      description: Delete the specific api_key
      parameters:
      - name: name
        in: path
        description: "^[A-Za-z]+[A-Za-z0-9-_]*$"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: EMQX-API-KEY-1
      responses:
        "204":
          description: Delete successfully
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_13'
      security:
      - basicAuth: []
      - bearerAuth: []
  /clients/{clientid}/subscriptions:
    get:
      tags:
      - Clients
      description: Get client subscriptions
      parameters:
      - name: clientid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/emqx_mgmt_api_subscriptions.subscription'
                x-content-type: application/json
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_12'
      security:
      - basicAuth: []
      - bearerAuth: []
  /configs:
    get:
      tags:
      - Configs
      description: "Get all the configurations of the specified keys, including hot\
        \ and non-hot updatable items."
      parameters:
      - name: key
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - alarm
          - api_key
          - authentication
          - authorization
          - auto_subscribe
          - bridges
          - cluster
          - conn_congestion
          - crl_cache
          - dashboard
          - delayed
          - exhook
          - flapping_detect
          - force_gc
          - force_shutdown
          - gateway
          - limiter
          - listeners
          - log
          - mqtt
          - node
          - overload_protection
          - prometheus
          - psk_authentication
          - retainer
          - rewrite
          - rpc
          - rule_engine
          - slow_subs
          - sys_topics
          - sysmon
          - telemetry
          - topic_metrics
        example: sysmon
      - name: node
        in: query
        description: Node's name. Will deprecated in 5.2.0.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content:
            text/plain:
              schema:
                type: string
                example: "\n    sysmon {\n      os {\n        cpu_check_interval =\
                  \ 60s\n        cpu_high_watermark = 80%\n        cpu_low_watermark\
                  \ = 60%\n        mem_check_interval = 60s\n        procmem_high_watermark\
                  \ = 5%\n        sysmem_high_watermark = 70%\n        }\n       \
                  \ vm {\n        busy_dist_port = true\n        busy_port = true\n\
                  \        large_heap = 32MB\n        long_gc = disabled\n       \
                  \ long_schedule = 240ms\n        process_check_interval = 30s\n\
                  \        process_high_watermark = 80%\n        process_low_watermark\
                  \ = 60%\n        }\n    }\n    "
                x-content-type: text/plain
            application/json:
              schema:
                type: object
                example:
                  deprecated: true
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_31'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_13'
        "500":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500_3'
      security:
      - basicAuth: []
      - bearerAuth: []
    put:
      tags:
      - Configs
      description: Update the configurations of the specified keys.
      parameters:
      - name: mode
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: merge
          enum:
          - replace
          - merge
      requestBody:
        content:
          text/plain:
            schema:
              type: string
              example: "\n    sysmon {\n      os {\n        cpu_check_interval = 60s\n\
                \        cpu_high_watermark = 80%\n        cpu_low_watermark = 60%\n\
                \        mem_check_interval = 60s\n        procmem_high_watermark\
                \ = 5%\n        sysmem_high_watermark = 70%\n        }\n        vm\
                \ {\n        busy_dist_port = true\n        busy_port = true\n   \
                \     large_heap = 32MB\n        long_gc = disabled\n        long_schedule\
                \ = 240ms\n        process_check_interval = 30s\n        process_high_watermark\
                \ = 80%\n        process_low_watermark = 60%\n        }\n    }\n \
                \   "
      responses:
        "200":
          description: Configurations updated
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_5'
      security:
      - basicAuth: []
      - bearerAuth: []
  /clients:
    get:
      tags:
      - Clients
      description: List clients
      parameters:
      - name: page
        in: query
        description: Page number of the results to fetch.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
        example: 1
      - name: limit
        in: query
        description: Results per page(max 1000)
        required: false
        style: form
        explode: true
        schema:
          maximum: 1000
          minimum: 1
          type: integer
          default: 100
        example: 50
      - name: node
        in: query
        description: Node name
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: emqx@172.20.0.2
      - name: username
        in: query
        description: User name
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: ip_address
        in: query
        description: Client's IP address
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: 127.0.0.1
      - name: conn_state
        in: query
        description: "The current connection status of the client, the possible values\
          \ are connected,idle,disconnected"
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - connected
          - idle
          - disconnected
      - name: clean_start
        in: query
        description: Whether the client uses a new session
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: proto_ver
        in: query
        description: Client protocol version
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: like_clientid
        in: query
        description: Fuzzy search `clientid` as substring
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: like_username
        in: query
        description: Fuzzy search `username` as substring
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: gte_created_at
        in: query
        description: "Search client session creation time by greater than or equal\
          \ method, rfc3339 or timestamp(millisecond)"
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/gte_created_at'
      - name: lte_created_at
        in: query
        description: "Search client session creation time by less than or equal method,\
          \ rfc3339 or timestamp(millisecond)"
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/lte_created_at'
      - name: gte_connected_at
        in: query
        description: "Search client connection creation time by greater than or equal\
          \ method, rfc3339 or timestamp(epoch millisecond)"
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/gte_connected_at'
      - name: lte_connected_at
        in: query
        description: "Search client connection creation time by less than or equal\
          \ method, rfc3339 or timestamp(millisecond)"
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/lte_connected_at'
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_25'
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_32'
      security:
      - basicAuth: []
      - bearerAuth: []
  /gateways/{name}/authentication/users:
    get:
      tags:
      - Gateway Authentication
      summary: List users for gateway authenticator
      description: Get the users for the authenticator (only supported by <code>built_in_database</code>).
      parameters:
      - name: name
        in: path
        description: "Gateway Name.<br/><br/>It's enum with `stomp`, `mqttsn`, `coap`,\
          \ `lwm2m`, `exproto`"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: stomp
      - name: page
        in: query
        description: Page number of the results to fetch.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
        example: 1
      - name: limit
        in: query
        description: Results per page(max 1000)
        required: false
        style: form
        explode: true
        schema:
          maximum: 1000
          minimum: 1
          type: integer
          default: 100
        example: 50
      - name: like_user_id
        in: query
        description: "Fuzzy search using user ID (username or clientid), only supports\
          \ search by substring."
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: test_
      - name: is_superuser
        in: query
        description: Is superuser
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emqx_authn_api.response_users'
              example:
                data:
                - user_id: user1
                - is_superuser: true
                  user_id: user2
                meta:
                  count: 300
                  limit: 20
                  page: 0
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_4'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_7'
      security:
      - basicAuth: []
      - bearerAuth: []
    post:
      tags:
      - Gateway Authentication
      summary: Add user for gateway authenticator
      description: Add user for the authenticator (only supports built_in_database).
      parameters:
      - name: name
        in: path
        description: "Gateway Name.<br/><br/>It's enum with `stomp`, `mqttsn`, `coap`,\
          \ `lwm2m`, `exproto`"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: stomp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/emqx_authn_api.request_user_create'
            examples:
              regular_user:
                summary: Regular user
                value:
                  password: '******'
                  user_id: user1
              super_user:
                summary: Superuser
                value:
                  is_superuser: true
                  password: '******'
                  user_id: user2
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emqx_authn_api.response_user'
              example:
                regular_user:
                  summary: Regular user
                  value:
                    user_id: user1
                super_user:
                  summary: Superuser
                  value:
                    is_superuser: true
                    user_id: user2
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_4'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_7'
      security:
      - basicAuth: []
      - bearerAuth: []
  /listeners/{id}:
    get:
      tags:
      - Listeners
      description: List all running node's listeners for the specified id.
      parameters:
      - name: id
        in: path
        description: Listener id
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: tcp:demo
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_10'
              example:
                acceptors: 16
                access_rules:
                - allow all
                bind: 0.0.0.0:1884
                current_connections: 10240
                id: tcp:demo
                max_connections: 204800
                mountpoint: /
                proxy_protocol: false
                proxy_protocol_timeout: 3s
                running: true
                tcp_options:
                  active_n: 100
                  backlog: 1024
                  buffer: 4KB
                  high_watermark: 1MB
                  nodelay: false
                  reuseaddr: true
                  send_timeout: 15s
                  send_timeout_close: true
                type: tcp
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_28'
      security:
      - basicAuth: []
      - bearerAuth: []
    put:
      tags:
      - Listeners
      description: Update the specified listener on all nodes.
      parameters:
      - name: id
        in: path
        description: Listener id
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: tcp:demo
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/listeners_id_body_1'
            example:
              acceptors: 16
              access_rules:
              - allow all
              bind: 0.0.0.0:1884
              current_connections: 10240
              id: tcp:demo
              max_connections: 204800
              mountpoint: /
              proxy_protocol: false
              proxy_protocol_timeout: 3s
              running: true
              tcp_options:
                active_n: 100
                backlog: 1024
                buffer: 4KB
                high_watermark: 1MB
                nodelay: false
                reuseaddr: true
                send_timeout: 15s
                send_timeout_close: true
              type: tcp
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_10'
              example:
                acceptors: 16
                access_rules:
                - allow all
                bind: 0.0.0.0:1884
                current_connections: 10240
                id: tcp:demo
                max_connections: 204800
                mountpoint: /
                proxy_protocol: false
                proxy_protocol_timeout: 3s
                running: true
                tcp_options:
                  active_n: 100
                  backlog: 1024
                  buffer: 4KB
                  high_watermark: 1MB
                  nodelay: false
                  reuseaddr: true
                  send_timeout: 15s
                  send_timeout_close: true
                type: tcp
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_17'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_28'
      security:
      - basicAuth: []
      - bearerAuth: []
    post:
      tags:
      - Listeners
      description: Create the specified listener on all nodes.
      parameters:
      - name: id
        in: path
        description: Listener id
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: tcp:demo
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/listeners_id_body_2'
            example:
              acceptors: 16
              access_rules:
              - allow all
              bind: 0.0.0.0:1884
              current_connections: 10240
              id: tcp:demo
              max_connections: 204800
              mountpoint: /
              proxy_protocol: false
              proxy_protocol_timeout: 3s
              running: true
              tcp_options:
                active_n: 100
                backlog: 1024
                buffer: 4KB
                high_watermark: 1MB
                nodelay: false
                reuseaddr: true
                send_timeout: 15s
                send_timeout_close: true
              type: tcp
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listeners_id_body_2'
              example:
                acceptors: 16
                access_rules:
                - allow all
                bind: 0.0.0.0:1884
                current_connections: 10240
                id: tcp:demo
                max_connections: 204800
                mountpoint: /
                proxy_protocol: false
                proxy_protocol_timeout: 3s
                running: true
                tcp_options:
                  active_n: 100
                  backlog: 1024
                  buffer: 4KB
                  high_watermark: 1MB
                  nodelay: false
                  reuseaddr: true
                  send_timeout: 15s
                  send_timeout_close: true
                type: tcp
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_13'
      deprecated: true
      security:
      - basicAuth: []
      - bearerAuth: []
    delete:
      tags:
      - Listeners
      description: Delete the specified listener on all nodes.
      parameters:
      - name: id
        in: path
        description: Listener id
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: tcp:demo
      responses:
        "204":
          description: Listener deleted
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_29'
      security:
      - basicAuth: []
      - bearerAuth: []
  /users/{username}/change_pwd:
    post:
      tags:
      - Dashboard
      description: Change dashboard user password
      parameters:
      - name: username
        in: path
        description: Dashboard Username
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: admin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/username_change_pwd_body'
      responses:
        "204":
          description: Update user password successfully
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_33'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_21'
      security:
      - basicAuth: []
      - bearerAuth: []
  /gateways/{name}/clients:
    get:
      tags:
      - Gateway Clients
      summary: List gateway's clients
      description: Get the gateway client list
      parameters:
      - name: name
        in: path
        description: Gateway Name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: node
        in: query
        description: Match the client's node name
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: ""
      - name: clientid
        in: query
        description: Match the client's ID
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: ""
      - name: username
        in: query
        description: Match the client's Username
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: ""
      - name: ip_address
        in: query
        description: Match the client's ip address
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: ""
      - name: conn_state
        in: query
        description: Match the client's connection state
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: ""
      - name: proto_ver
        in: query
        description: Match the client's protocol version
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: ""
      - name: clean_start
        in: query
        description: Match the client's clean start flag
        required: false
        style: form
        explode: true
        schema:
          type: boolean
        example: ""
      - name: like_clientid
        in: query
        description: Use sub-string to match client's ID
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: ""
      - name: like_username
        in: query
        description: Use sub-string to match client's username
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: ""
      - name: gte_created_at
        in: query
        description: Match the session created datetime greater than a certain value
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/gte_created_at_1'
        example: ""
      - name: lte_created_at
        in: query
        description: Match the session created datetime less than a certain value
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/lte_created_at_1'
        example: ""
      - name: gte_connected_at
        in: query
        description: Match the client socket connected datetime greater than a certain
          value
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/gte_connected_at_1'
        example: ""
      - name: lte_connected_at
        in: query
        description: Match the client socket connected datatime less than a certain
          value
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/lte_connected_at_1'
        example: ""
      - name: endpoint_name
        in: query
        description: Match the lwm2m client's endpoint name
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: ""
      - name: like_endpoint_name
        in: query
        description: Use sub-string to match lwm2m client's endpoint name
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: ""
      - name: gte_lifetime
        in: query
        description: Match the lwm2m client registered lifetime greater than a certain
          value
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: ""
      - name: lte_lifetime
        in: query
        description: Match the lwm2m client registered lifetime less than a certain
          value
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: ""
      - name: page
        in: query
        description: Page number of the results to fetch.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
        example: 1
      - name: limit
        in: query
        description: Results per page(max 1000)
        required: false
        style: form
        explode: true
        schema:
          maximum: 1000
          minimum: 1
          type: integer
          default: 100
        example: 50
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_26'
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_4'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_7'
      security:
      - basicAuth: []
      - bearerAuth: []
  /gateways/{name}/authentication/users/{uid}:
    get:
      tags:
      - Gateway Authentication
      summary: Get user info for gateway authenticator
      description: Get user info from the gateway authenticator (only supports built_in_database)
      parameters:
      - name: name
        in: path
        description: "Gateway Name.<br/><br/>It's enum with `stomp`, `mqttsn`, `coap`,\
          \ `lwm2m`, `exproto`"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: stomp
      - name: uid
        in: path
        description: User ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: test_username
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emqx_authn_api.response_user'
              example:
                regular_user:
                  summary: Regular user
                  value:
                    user_id: user1
                super_user:
                  summary: Superuser
                  value:
                    is_superuser: true
                    user_id: user2
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_4'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_7'
      security:
      - basicAuth: []
      - bearerAuth: []
    put:
      tags:
      - Gateway Authentication
      summary: Update user info for gateway authenticator
      description: Update the user info for the gateway authenticator (only supports
        built_in_database)
      parameters:
      - name: name
        in: path
        description: "Gateway Name.<br/><br/>It's enum with `stomp`, `mqttsn`, `coap`,\
          \ `lwm2m`, `exproto`"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: stomp
      - name: uid
        in: path
        description: User ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: test_username
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/emqx_authn_api.request_user_update'
            examples:
              regular_user:
                summary: Update regular user
                value:
                  password: '******'
              super_user:
                summary: Update user and promote to superuser
                value:
                  is_superuser: true
                  password: '******'
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emqx_authn_api.response_user'
              example:
                regular_user:
                  summary: Regular user
                  value:
                    user_id: user1
                super_user:
                  summary: Superuser
                  value:
                    is_superuser: true
                    user_id: user2
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_4'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_7'
      security:
      - basicAuth: []
      - bearerAuth: []
    delete:
      tags:
      - Gateway Authentication
      summary: Delete user for gateway authenticator
      description: Delete the user for the gateway authenticator (only supports built_in_database)
      parameters:
      - name: name
        in: path
        description: "Gateway Name.<br/><br/>It's enum with `stomp`, `mqttsn`, `coap`,\
          \ `lwm2m`, `exproto`"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: stomp
      - name: uid
        in: path
        description: User ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: test_username
      responses:
        "204":
          description: User Deleted
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_4'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_7'
      security:
      - basicAuth: []
      - bearerAuth: []
  /gateways/{name}/listeners/{id}/authentication/import_users:
    post:
      tags:
      - Gateway Authentication
      summary: Import users
      description: Import users into the gateway authenticator (only supports built_in_database)
      parameters:
      - name: name
        in: path
        description: "Gateway Name.<br/><br/>It's enum with `stomp`, `mqttsn`, `coap`,\
          \ `lwm2m`, `exproto`"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: stomp
      - name: id
        in: path
        description: Listener ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: stomp:tcp:def
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/authentication_import_users_body_1'
      responses:
        "204":
          description: Imported
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_4'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_7'
      security:
      - basicAuth: []
      - bearerAuth: []
  /rules/{id}/metrics/reset:
    put:
      tags:
      - Rules
      summary: Reset rule metrics
      description: Reset a rule metrics
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: my_rule_id
      responses:
        "204":
          description: Reset Success
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_23'
      security:
      - basicAuth: []
      - bearerAuth: []
  /gateways/{name}/listeners/{id}/authentication/users:
    get:
      tags:
      - Gateway Listeners
      summary: List authenticator's users
      description: Get the users for the authenticator (only supported by <code>built_in_database</code>)
      parameters:
      - name: name
        in: path
        description: "Gateway Name.<br/><br/>It's enum with `stomp`, `mqttsn`, `coap`,\
          \ `lwm2m`, `exproto`"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: stomp
      - name: id
        in: path
        description: Listener ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: ""
      - name: page
        in: query
        description: Page number of the results to fetch.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
        example: 1
      - name: limit
        in: query
        description: Results per page(max 1000)
        required: false
        style: form
        explode: true
        schema:
          maximum: 1000
          minimum: 1
          type: integer
          default: 100
        example: 50
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emqx_authn_api.response_user'
              example:
                regular_user:
                  summary: Regular user
                  value:
                    user_id: user1
                super_user:
                  summary: Superuser
                  value:
                    is_superuser: true
                    user_id: user2
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_4'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_7'
      security:
      - basicAuth: []
      - bearerAuth: []
    post:
      tags:
      - Gateway Listeners
      summary: Add user for an authenticator
      description: Add user for the authenticator (only supports built_in_database)
      parameters:
      - name: name
        in: path
        description: "Gateway Name.<br/><br/>It's enum with `stomp`, `mqttsn`, `coap`,\
          \ `lwm2m`, `exproto`"
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: stomp
      - name: id
        in: path
        description: Listener ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/emqx_authn_api.request_user_create'
            examples:
              regular_user:
                summary: Regular user
                value:
                  password: '******'
                  user_id: user1
              super_user:
                summary: Superuser
                value:
                  is_superuser: true
                  password: '******'
                  user_id: user2
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emqx_authn_api.response_user'
              example:
                regular_user:
                  summary: Regular user
                  value:
                    user_id: user1
                super_user:
                  summary: Superuser
                  value:
                    is_superuser: true
                    user_id: user2
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_4'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_7'
      security:
      - basicAuth: []
      - bearerAuth: []
  /schemas/{name}:
    get:
      tags:
      - Dashboard
      description: "Get the schema JSON of the specified name. NOTE: only intended\
        \ for EMQX Dashboard."
      parameters:
      - name: name
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - hotconf
          - bridges
      responses:
        "200":
          description: The JSON schema of the specified name.
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      security: []
  /authorization/settings:
    get:
      tags:
      - Authorization
      description: Get authorization settings
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_27'
      security:
      - basicAuth: []
      - bearerAuth: []
    put:
      tags:
      - Authorization
      description: Update authorization settings
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authorization_settings_body'
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authorization_settings_body'
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
      security:
      - basicAuth: []
      - bearerAuth: []
  /gateways/lwm2m/clients/{clientid}/write:
    post:
      tags:
      - LwM2M Gateways
      summary: Write a Value to Resource Path
      description: Send a write command to a resource
      parameters:
      - name: clientid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: urn:oma:lwm2m:oma:2
      - name: path
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
        example: /3/0/7
      - name: type
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
          enum:
          - Integer
          - Float
          - Time
          - String
          - Boolean
          - Opaque
          - Objlnk
        example: Integer
      - name: value
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
        example: 123
      responses:
        "204":
          description: No Content
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_1'
      security:
      - basicAuth: []
      - bearerAuth: []
  /configs/log:
    get:
      tags:
      - Configs
      summary: Get the sub-configurations under *log*
      description: Get the sub-configurations under *log*
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emqx_conf_schema.log'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_8'
      security:
      - basicAuth: []
      - bearerAuth: []
    put:
      tags:
      - Configs
      summary: Update the sub-configurations under *log*
      description: Update the sub-configurations under *log*
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/emqx_conf_schema.log'
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emqx_conf_schema.log'
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_5'
        "403":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_5'
      security:
      - basicAuth: []
      - bearerAuth: []
  /rules/{id}:
    get:
      tags:
      - Rules
      summary: Get rule
      description: Get a rule by given Id
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: my_rule_id
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emqx_rule_api_schema.rule_info'
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_23'
      security:
      - basicAuth: []
      - bearerAuth: []
    put:
      tags:
      - Rules
      summary: Update rule
      description: Update a rule by given Id to all nodes in the cluster
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: my_rule_id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/emqx_rule_api_schema.rule_creation'
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emqx_rule_api_schema.rule_info'
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_10'
      security:
      - basicAuth: []
      - bearerAuth: []
    delete:
      tags:
      - Rules
      summary: Delete rule
      description: Delete a rule by given Id from all nodes in the cluster
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: my_rule_id
      responses:
        "204":
          description: Delete rule successfully
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_23'
      security:
      - basicAuth: []
      - bearerAuth: []
  /exhooks/{name}/hooks:
    get:
      tags:
      - ExHook
      description: Get the hooks information of server
      parameters:
      - name: name
        in: path
        description: The Exhook server name
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: default
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/exhook.list_hook_info'
                x-content-type: application/json
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
      security:
      - basicAuth: []
      - bearerAuth: []
  /bridges:
    get:
      tags:
      - Bridges
      summary: List bridges
      description: List all created bridges
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                  - $ref: '#/components/schemas/bridge_webhook.get'
                  - $ref: '#/components/schemas/bridge_mqtt.get'
                x-content-type: application/json
              example:
              - clean_start: true
                egress:
                  local:
                    topic: emqx/#
                  remote:
                    payload: "${payload}"
                    qos: "${qos}"
                    retain: false
                    topic: "from_emqx/${topic}"
                enable: true
                ingress:
                  local:
                    payload: "${payload}"
                    qos: "${qos}"
                    retain: "${retain}"
                    topic: "from_aws/${topic}"
                  remote:
                    qos: 1
                    topic: aws/#
                keepalive: 300s
                max_inflight: 100
                name: mqtt_example
                password: '******'
                proto_ver: v4
                resource_opts:
                  health_check_interval: 15s
                  max_buffer_bytes: 104857600
                  query_mode: sync
                retry_interval: 15s
                server: 127.0.0.1:1883
                ssl:
                  enable: false
                type: mqtt
                username: foo
              - body: "${payload}"
                connect_timeout: 15s
                enable: true
                enable_pipelining: 100
                local_topic: emqx_webhook/#
                max_retries: 3
                method: post
                name: webhook_example
                pool_size: 4
                pool_type: random
                request_timeout: 15s
                resource_opts:
                  health_check_interval: 15000
                  inflight_window: 100
                  max_buffer_bytes: 104857600
                  query_mode: async
                  worker_pool_size: 1
                ssl:
                  enable: false
                type: webhook
                url: "http://localhost:9901/messages/${topic}"
      security:
      - basicAuth: []
      - bearerAuth: []
    post:
      tags:
      - Bridges
      summary: Create bridge
      description: Create a new bridge by type and name
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/bridges_body'
            examples:
              mqtt_example:
                summary: MQTT Bridge
                value:
                  clean_start: true
                  egress:
                    local:
                      topic: emqx/#
                    remote:
                      payload: "${payload}"
                      qos: "${qos}"
                      retain: false
                      topic: "from_emqx/${topic}"
                  enable: true
                  ingress:
                    local:
                      payload: "${payload}"
                      qos: "${qos}"
                      retain: "${retain}"
                      topic: "from_aws/${topic}"
                    remote:
                      qos: 1
                      topic: aws/#
                  keepalive: 300s
                  max_inflight: 100
                  name: mqtt_example
                  password: '******'
                  proto_ver: v4
                  resource_opts:
                    health_check_interval: 15s
                    max_buffer_bytes: 104857600
                    query_mode: sync
                  retry_interval: 15s
                  server: 127.0.0.1:1883
                  ssl:
                    enable: false
                  type: mqtt
                  username: foo
              webhook_example:
                summary: WebHook
                value:
                  body: "${payload}"
                  connect_timeout: 15s
                  enable: true
                  enable_pipelining: 100
                  local_topic: emqx_webhook/#
                  max_retries: 3
                  method: post
                  name: webhook_example
                  pool_size: 4
                  pool_type: random
                  request_timeout: 15s
                  resource_opts:
                    health_check_interval: 15000
                    inflight_window: 100
                    max_buffer_bytes: 104857600
                    query_mode: async
                    worker_pool_size: 1
                  ssl:
                    enable: false
                  type: webhook
                  url: "http://localhost:9901/messages/${topic}"
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_14'
              examples:
                mqtt_example:
                  summary: MQTT Bridge
                  value:
                    clean_start: true
                    egress:
                      local:
                        topic: emqx/#
                      remote:
                        payload: "${payload}"
                        qos: "${qos}"
                        retain: false
                        topic: "from_emqx/${topic}"
                    enable: true
                    ingress:
                      local:
                        payload: "${payload}"
                        qos: "${qos}"
                        retain: "${retain}"
                        topic: "from_aws/${topic}"
                      remote:
                        qos: 1
                        topic: aws/#
                    keepalive: 300s
                    max_inflight: 100
                    name: mqtt_example
                    password: '******'
                    proto_ver: v4
                    resource_opts:
                      health_check_interval: 15s
                      max_buffer_bytes: 104857600
                      query_mode: sync
                    retry_interval: 15s
                    server: 127.0.0.1:1883
                    ssl:
                      enable: false
                    type: mqtt
                    username: foo
                webhook_example:
                  summary: WebHook
                  value:
                    body: "${payload}"
                    connect_timeout: 15s
                    enable: true
                    enable_pipelining: 100
                    local_topic: emqx_webhook/#
                    max_retries: 3
                    method: post
                    name: webhook_example
                    pool_size: 4
                    pool_type: random
                    request_timeout: 15s
                    resource_opts:
                      health_check_interval: 15000
                      inflight_window: 100
                      max_buffer_bytes: 104857600
                      query_mode: async
                      worker_pool_size: 1
                    ssl:
                      enable: false
                    type: webhook
                    url: "http://localhost:9901/messages/${topic}"
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_34'
      security:
      - basicAuth: []
      - bearerAuth: []
  /listeners_status:
    get:
      tags:
      - Listeners
      description: List all running node's listeners live status. group by listener
        type
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/listeners.listener_type_status'
                x-content-type: application/json
              example:
              - enable: false
                ids:
                - tcp:demo
                node_status:
                - node: emqx@127.0.0.1
                  status:
                    current_connections: 11
                    max_connections: 1024000
                    running: true
                - node: emqx@127.0.0.1
                  status:
                    current_connections: 10
                    max_connections: 1024000
                    running: true
                status:
                  current_connections: 21
                  max_connections: 2048000
                  running: true
                type: tcp
              - enable: false
                ids:
                - ssl:default
                node_status:
                - node: emqx@127.0.0.1
                  status:
                    current_connections: 31
                    max_connections: infinity
                    running: true
                - node: emqx@127.0.0.1
                  status:
                    current_connections: 40
                    max_connections: infinity
                    running: true
                status:
                  current_connections: 71
                  max_connections: infinity
                  running: true
                type: ssl
      security:
      - basicAuth: []
      - bearerAuth: []
  /monitor:
    get:
      tags:
      - Metrics
      description: List monitor (statistics) data for the whole cluster.
      parameters:
      - name: latest
        in: query
        description: The latest N seconds data. Like 300 for 5 min.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
        example: 300
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/emqx_dashboard_monitor_api.sampler'
                x-content-type: application/json
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      security:
      - basicAuth: []
      - bearerAuth: []
  /logout:
    post:
      tags:
      - Dashboard
      description: Dashboard user logout
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/logout_body'
      responses:
        "204":
          description: Dashboard logout successfully
        "401":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
      security:
      - basicAuth: []
      - bearerAuth: []
  /authorization/sources/built_in_database/rules/all:
    get:
      tags:
      - Authorization
      description: Show the list of rules for 'all'
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emqx_authz_api_mnesia.rules'
              examples:
                password_based:built_in_database:
                  summary: All
                  value:
                    rules:
                    - action: publish
                      permission: allow
                      topic: test/topic/1
                    - action: subscribe
                      permission: allow
                      topic: test/topic/2
                    - action: all
                      permission: deny
                      topic: eq test/#
                    - action: publish
                      permission: allow
                      qos:
                      - "1"
                      retain: "true"
                      topic: test/topic/3
                    - action: publish
                      permission: allow
                      qos:
                      - "0"
                      - "1"
                      - "2"
                      retain: all
                      topic: test/topic/4
      security:
      - basicAuth: []
      - bearerAuth: []
    post:
      tags:
      - Authorization
      description: Create/Update the list of rules for 'all'.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/emqx_authz_api_mnesia.rules'
            examples:
              password_based:built_in_database:
                summary: All
                value:
                  rules:
                  - action: publish
                    permission: allow
                    topic: test/topic/1
                  - action: subscribe
                    permission: allow
                    topic: test/topic/2
                  - action: all
                    permission: deny
                    topic: eq test/#
                  - action: publish
                    permission: allow
                    qos:
                    - "1"
                    retain: "true"
                    topic: test/topic/3
                  - action: publish
                    permission: allow
                    qos:
                    - "0"
                    - "1"
                    - "2"
                    retain: all
                    topic: test/topic/4
      responses:
        "204":
          description: Updated
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_35'
      security:
      - basicAuth: []
      - bearerAuth: []
    delete:
      tags:
      - Authorization
      description: Delete rules for 'all'
      parameters: []
      responses:
        "204":
          description: Deleted
      security:
      - basicAuth: []
      - bearerAuth: []
  /rule_engine:
    get:
      tags:
      - Rules
      description: Get rule engine configuration.
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emqx_rule_api_schema.rule_engine'
      security:
      - basicAuth: []
      - bearerAuth: []
    put:
      tags:
      - Rules
      description: Update rule engine configuration.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/emqx_rule_api_schema.rule_engine'
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emqx_rule_api_schema.rule_engine'
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_36'
      security:
      - basicAuth: []
      - bearerAuth: []
components:
  schemas:
    emqx_gateway_api.gateway_listener_overview:
      type: object
      properties:
        id:
          type: string
          description: Listener ID
        running:
          type: boolean
          description: Listener Running status
        type:
          type: string
          description: Listener Type
          enum:
          - tcp
          - ssl
          - udp
          - dtls
      example:
        running: true
        id: id
        type: tcp
    emqx_rule_api_schema.ctx_unsub:
      required:
      - event_type
      type: object
      properties:
        event_type:
          type: string
          description: Event Type
          enum:
          - session_unsubscribed
        clientid:
          type: string
          description: The Client ID
        username:
          type: string
          description: Username
        payload:
          type: string
          description: The Message Payload
        peerhost:
          type: string
          description: The IP Address of the Peer Client
        topic:
          type: string
          description: Message Topic
        publish_received_at:
          type: integer
          description: The Time that this Message is Received
        qos:
          maximum: 2
          minimum: 0
          type: integer
          description: The Message QoS
          example: 0
    modules.rewrite:
      required:
      - action
      - dest_topic
      - re
      - source_topic
      type: object
      properties:
        action:
          type: string
          description: "Topic rewriting takes effect on the type of operation:<br/>\
            \  - `subscribe`: Rewrite topic when client do subscribe.<br/>  - `publish`:\
            \ Rewrite topic when client do publish.<br/>  - `all`: Both"
          example: publish
          enum:
          - subscribe
          - publish
          - all
        source_topic:
          type: string
          description: "Source topic, specified by the client."
          example: x/#
        dest_topic:
          type: string
          description: Destination topic.
          example: z/y/$1
        re:
          type: string
          description: Regular expressions
          example: ^x/y/(.+)$
      example:
        re: ^x/y/(.+)$
        source_topic: x/#
        action: publish
        dest_topic: z/y/$1
    authz.node_status:
      type: object
      properties:
        node:
          type: string
          description: Node name.
          example: emqx@127.0.0.1
        status:
          type: string
          description: The status of the resource for each node.
          enum:
          - connected
          - disconnected
          - connecting
      example:
        node: emqx@127.0.0.1
        status: connected
    emqx_mgmt_api_publish.publish_ok:
      type: object
      properties:
        id:
          type: string
          description: A globally unique message ID for correlation/tracing.
      example:
        id: id
    emqx_exproto_schema.exproto_grpc_server:
      required:
      - bind
      type: object
      properties:
        bind:
          type: string
          description: Listening address and port for the gRPC server.
          example: 127.0.0.1:80
        ssl_options:
          $ref: '#/components/schemas/emqx_exproto_schema.ssl_server_opts'
    broker.listener_wss_opts:
      type: object
      properties:
        cacertfile:
          type: string
          description: "Trusted PEM format CA certificates bundle file.<br/><br/>The\
            \ certificates in this file are used to verify the TLS peer's certificates.<br/>Append\
            \ new certificates to the file if new CAs are to be trusted.<br/>There\
            \ is no need to restart EMQX to have the updated file loaded, because<br/>the\
            \ system regularly checks if file has been updated (and reload).<br/><br/>NOTE:\
            \ invalidating (deleting) a certificate from the file will not affect<br/>already\
            \ established connections."
          default: "${EMQX_ETC_DIR}/certs/cacert.pem"
        cacerts:
          type: boolean
          description: "When enabled, uses the system trusted CA certificates for\
            \ establishing to TLS connections."
          default: false
        certfile:
          type: string
          description: "PEM format certificates chain file.<br/><br/>The certificates\
            \ in this file should be in reversed order of the certificate<br/>issue\
            \ chain. That is, the host's certificate should be placed in the beginning<br/>of\
            \ the file, followed by the immediate issuer certificate and so on.<br/>Although\
            \ the root CA certificate is optional, it should be placed at the end\
            \ of<br/>the file if it is to be added."
          default: "${EMQX_ETC_DIR}/certs/cert.pem"
        keyfile:
          type: string
          description: PEM format private key file.
          default: "${EMQX_ETC_DIR}/certs/key.pem"
        verify:
          type: string
          description: Enable or disable peer verification.
          default: verify_none
          enum:
          - verify_peer
          - verify_none
        reuse_sessions:
          type: boolean
          description: Enable TLS session reuse.</br><br/>Has no effect when TLS version
            is configured (or negotiated) to 1.3
          default: true
        depth:
          minimum: 0
          type: integer
          description: "Maximum number of non-self-issued intermediate certificates\
            \ that can follow the peer certificate in a valid certification path.<br/>So,\
            \ if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/><br/>if\
            \ 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/><br/>if 2 the\
            \ path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA."
          default: 10
        password:
          type: string
          description: String containing the user's password. Only used if the private
            key file is password-protected.
          format: password
          example: ""
        versions:
          type: array
          description: "All TLS/DTLS versions to be supported.<br/><br/>NOTE: PSK\
            \ ciphers are suppressed by 'tlsv1.3' version config.<br/><br/>In case\
            \ PSK cipher suites are intended, make sure to configure<br/><code>['tlsv1.2',\
            \ 'tlsv1.1']</code> here."
          items:
            type: string
          default:
          - tlsv1.3
          - tlsv1.2
        ciphers:
          type: array
          description: "This config holds TLS cipher suite names separated by comma,<br/>or\
            \ as an array of strings. e.g.<br/><code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"\
            </code> or<br/><code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"\
            ]</code>.<br/><br/><br/>Ciphers (and their ordering) define the way in\
            \ which the<br/>client and server encrypts information over the network\
            \ connection.<br/>Selecting a good cipher suite is critical for the<br/>application's\
            \ data security, confidentiality and performance.<br/><br/>The names should\
            \ be in OpenSSL string format (not RFC format).<br/>All default values\
            \ and examples provided by EMQX config<br/>documentation are all in OpenSSL\
            \ format.<br/><br/><br/>NOTE: Certain cipher suites are only compatible\
            \ with<br/>specific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or\
            \ 'tlsv1.3')<br/>incompatible cipher suites will be silently dropped.<br/>For\
            \ instance, if only 'tlsv1.3' is given in the <code>versions</code>,<br/>configuring\
            \ cipher suites for other versions will have no effect.<br/><br/><br/><br/>NOTE:\
            \ PSK ciphers are suppressed by 'tlsv1.3' version config<br/><br/>If PSK\
            \ cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/><br/>PSK\
            \ cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,<br/>RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,<br/>RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,<br/>RSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"\
            </code>"
          items:
            type: string
          default: []
        secure_renegotiate:
          type: boolean
          description: "SSL parameter renegotiation is a feature that allows a client\
            \ and a server<br/>to renegotiate the parameters of the SSL connection\
            \ on the fly.<br/>RFC 5746 defines a more secure way of doing this. By\
            \ enabling secure renegotiation,<br/>you drop support for the insecure\
            \ renegotiation, prone to MitM attacks.</br><br/>Has no effect when TLS\
            \ version is configured (or negotiated) to 1.3"
          default: true
        log_level:
          type: string
          description: Log level for SSL communication. Default is 'notice'. Set to
            'debug' to inspect TLS handshake messages.
          default: notice
          enum:
          - emergency
          - alert
          - critical
          - error
          - warning
          - notice
          - info
          - debug
          - none
          - all
        hibernate_after:
          type: string
          description: Hibernate the SSL process after idling for amount of time reducing
            its memory footprint.
          example: 12m
          default: 5s
        dhfile:
          type: string
          description: "Path to a file containing PEM-encoded Diffie-Hellman parameters<br/>to\
            \ be used by the server if a cipher suite using Diffie-Hellman<br/>key\
            \ exchange is negotiated. If not specified, default parameters<br/>are\
            \ used.<br/><br/>NOTE: The <code>dhfile</code> option is not supported\
            \ by TLS 1.3."
        fail_if_no_peer_cert:
          type: boolean
          description: "Used together with {verify, verify_peer} by an TLS/DTLS server.<br/>If\
            \ set to true, the server fails if the client does not have a<br/>certificate\
            \ to send, that is, sends an empty certificate.<br/>If set to false, it\
            \ fails only if the client sends an invalid<br/>certificate (an empty\
            \ certificate is considered valid)."
          default: false
        honor_cipher_order:
          type: boolean
          description: "An important security setting, it forces the cipher to be\
            \ set based<br/> on the server-specified order instead of the client-specified\
            \ order,<br/> hence enforcing the (usually more properly configured) security<br/>\
            \ ordering of the server administrator."
          default: true
        client_renegotiation:
          type: boolean
          description: "In protocols that support client-initiated renegotiation,<br/>the\
            \ cost of resources of such an operation is higher for the server than\
            \ the client.<br/>This can act as a vector for denial of service attacks.<br/>The\
            \ SSL application already takes measures to counter-act such attempts,<br/>but\
            \ client-initiated renegotiation can be strictly disabled by setting this\
            \ option to false.<br/>The default value is true. Note that disabling\
            \ renegotiation can result in<br/>long-lived connections becoming unusable\
            \ due to limits on<br/>the number of messages the underlying cipher suite\
            \ can encipher.</br><br/>Has no effect when TLS version is configured\
            \ (or negotiated) to 1.3"
          default: true
        handshake_timeout:
          type: string
          description: Maximum time duration allowed for the handshake to complete
          example: 12m
          default: 15s
    broker.sysmon_os:
      type: object
      properties:
        cpu_check_interval:
          type: string
          description: The time interval for the periodic CPU check.
          example: 12m
          default: 60s
        cpu_high_watermark:
          type: number
          description: "The threshold, as percentage of system CPU load,<br/> for\
            \ how much system cpu can be used before the corresponding alarm is raised."
        cpu_low_watermark:
          type: number
          description: "The threshold, as percentage of system CPU load,<br/> for\
            \ how much system cpu can be used before the corresponding alarm is cleared."
        mem_check_interval:
          description: The time interval for the periodic memory check.
          oneOf:
          - type: string
            example: 12m
          - type: string
            enum:
            - disabled
          default: 60s
        sysmem_high_watermark:
          type: number
          description: "The threshold, as percentage of system memory,<br/> for how\
            \ much system memory can be allocated before the corresponding alarm is\
            \ raised."
        procmem_high_watermark:
          type: number
          description: "The threshold, as percentage of system memory,<br/> for how\
            \ much system memory can be allocated by one Erlang process before<br/>\
            \ the corresponding alarm is raised."
      example:
        cpu_check_interval: 12m
        sysmem_high_watermark: 5.63737665663332876420099637471139430999755859375
        cpu_high_watermark: 1.46581298050294517310021547018550336360931396484375
        procmem_high_watermark: 2.3021358869347654518833223846741020679473876953125
        cpu_low_watermark: 5.962133916683182377482808078639209270477294921875
        mem_check_interval: ""
    rule_engine.builtin_action_republish:
      type: object
      properties:
        function:
          type: string
          description: Republish the message as a new MQTT message
          enum:
          - republish
        args:
          $ref: '#/components/schemas/rule_engine.republish_args'
    emqx_authn_schema.metrics:
      type: object
      properties:
        nomatch:
          type: integer
          description: The number of times the instance was ignored when the required
            authentication information was not found in the current instance.
        total:
          type: integer
          description: The total number of times the current instance was triggered.
        success:
          type: integer
          description: "The required authentication information is found in the current\
            \ instance, and the instance returns authentication success."
        failed:
          type: integer
          description: "The required authentication information is found in the current\
            \ instance, and the instance returns authentication failure."
        rate:
          type: number
          description: "The total rate at which instances are triggered, times/second."
        rate_max:
          type: number
          description: "The highest trigger rate the instance has ever reached, times/second."
        rate_last5m:
          type: number
          description: "The average trigger rate of the instance within 5 minutes,\
            \ times/second."
      example:
        nomatch: 7
        rate_last5m: 1.231513536777255612975068288506008684635162353515625
        total: 9
        rate: 4.1456080298839363962315474054776132106781005859375
        rate_max: 7.3862819483858839220147274318151175975799560546875
        success: 3
        failed: 2
    broker.sysmon:
      type: object
      properties:
        vm:
          $ref: '#/components/schemas/broker.sysmon_vm'
        os:
          $ref: '#/components/schemas/broker.sysmon_os'
      example:
        os:
          cpu_check_interval: 12m
          sysmem_high_watermark: 5.63737665663332876420099637471139430999755859375
          cpu_high_watermark: 1.46581298050294517310021547018550336360931396484375
          procmem_high_watermark: 2.3021358869347654518833223846741020679473876953125
          cpu_low_watermark: 5.962133916683182377482808078639209270477294921875
          mem_check_interval: ""
        vm:
          long_schedule: ""
          busy_dist_port: true
          process_check_interval: 12m
          busy_port: true
          long_gc: ""
          large_heap: ""
          process_high_watermark: 0.80082819046101150206595775671303272247314453125
          process_low_watermark: 6.02745618307040320615897144307382404804229736328125
    dashboard.http:
      type: object
      properties:
        bind:
          type: string
          description: Port without IP(18083) or port with specified IP(127.0.0.1:18083).<br/>Disabled
            when setting bind to `0`.<br/>
          example: 0.0.0.0:18083
          default: "0"
        num_acceptors:
          type: integer
          description: Socket acceptor pool size for TCP protocols. Default is the
            number of schedulers online
          default: 4
        max_connections:
          type: integer
          description: Maximum number of simultaneous connections.
          default: 512
        backlog:
          type: integer
          description: Defines the maximum length that the queue of pending connections
            can grow to.
          default: 1024
        send_timeout:
          type: string
          description: Send timeout for the socket.
          example: 12m
          default: 10s
        inet6:
          type: boolean
          description: "Enable IPv6 support, default is false, which means IPv4 only."
          default: false
        ipv6_v6only:
          type: boolean
          description: Disable IPv4-to-IPv6 mapping for the listener.<br/>The configuration
            is only valid when the inet6 is true.
          default: false
        proxy_header:
          type: boolean
          description: Enable support for `HAProxy` header. Be aware once enabled
            regular HTTP requests can't be handled anymore.
          default: false
      example:
        proxy_header: false
        max_connections: 6
        bind: 0.0.0.0:18083
        backlog: 1
        ipv6_v6only: false
        inet6: false
        send_timeout: 12m
        num_acceptors: 0
    emqx_gateway_api.update_exproto:
      required:
      - handler
      - server
      type: object
      properties:
        server:
          $ref: '#/components/schemas/emqx_exproto_schema.exproto_grpc_server'
        handler:
          $ref: '#/components/schemas/emqx_exproto_schema.exproto_grpc_handler'
        mountpoint:
          type: string
          description: "When publishing or subscribing, prefix all topics with a mountpoint\
            \ string.<br/>The prefixed string will be removed from the topic name\
            \ when the message is delivered to the subscriber.<br/>The mountpoint\
            \ is a way that users can use to implement isolation of message routing\
            \ between different listeners.<br/>For example if a client A subscribes\
            \ to `t` with `listeners.tcp.\\<name>.mountpoint` set to `some_tenant`,<br/>then\
            \ the client actually subscribes to the topic `some_tenant/t`.<br/>Similarly,\
            \ if another client B (connected to the same listener as the client A)\
            \ sends a message to topic `t`,<br/>the message is routed to all the clients\
            \ subscribed `some_tenant/t`,<br/>so client A will receive the message,\
            \ with topic name `t`. Set to `\"\"` to disable the feature.<br/>Variables\
            \ in mountpoint string:<br/><br/>  - <code>${clientid}</code>: clientid<br/><br/>\
            \  - <code>${username}</code>: username"
          default: ""
        enable:
          type: boolean
          description: Whether to enable this gateway
          default: true
        enable_stats:
          type: boolean
          description: Whether to enable client process statistic
          default: true
        idle_timeout:
          type: string
          description: The idle time of the client connection process. It has two
            purposes:<br/>  1. A newly created client process that does not receive
            any client requests after that time will be closed directly.<br/>  2.
            A running client process that does not receive any client requests after
            this time will go into hibernation to save resources.
          example: 12m
          default: 30s
        clientinfo_override:
          $ref: '#/components/schemas/gateway.clientinfo_override'
    emqx_authn_api.request_user_create:
      required:
      - password
      - user_id
      type: object
      properties:
        user_id:
          type: string
        password:
          type: string
        is_superuser:
          type: boolean
          default: false
    emqx_gateway_api.update_mqttsn:
      required:
      - gateway_id
      type: object
      properties:
        gateway_id:
          type: integer
          description: "MQTT-SN Gateway ID.<br/>When the <code>broadcast</code> option\
            \ is enabled, the gateway will broadcast ADVERTISE message with this value"
          default: 1
        broadcast:
          type: boolean
          description: Whether to periodically broadcast ADVERTISE messages
          default: false
        enable_qos3:
          type: boolean
          description: "Allows connectionless clients to publish messages with a Qos\
            \ of -1.<br/>This feature is defined for very simple client implementations\
            \ which do not support any other features except this one. There is no\
            \ connection setup nor tear down, no registration nor subscription. The\
            \ client just sends its 'PUBLISH' messages to a GW"
          default: true
        subs_resume:
          type: boolean
          description: Whether to initiate all subscribed topic name registration
            messages to the client after the Session has been taken over by a new
            channel
          default: false
        predefined:
          type: array
          description: The pre-defined topic IDs and topic names.<br/>A 'pre-defined'
            topic ID is a topic ID whose mapping to a topic name is known in advance
            by both the client's application and the gateway
          items:
            $ref: '#/components/schemas/emqx_mqttsn_schema.mqttsn_predefined'
          default: []
        mountpoint:
          type: string
          description: "When publishing or subscribing, prefix all topics with a mountpoint\
            \ string.<br/>The prefixed string will be removed from the topic name\
            \ when the message is delivered to the subscriber.<br/>The mountpoint\
            \ is a way that users can use to implement isolation of message routing\
            \ between different listeners.<br/>For example if a client A subscribes\
            \ to `t` with `listeners.tcp.\\<name>.mountpoint` set to `some_tenant`,<br/>then\
            \ the client actually subscribes to the topic `some_tenant/t`.<br/>Similarly,\
            \ if another client B (connected to the same listener as the client A)\
            \ sends a message to topic `t`,<br/>the message is routed to all the clients\
            \ subscribed `some_tenant/t`,<br/>so client A will receive the message,\
            \ with topic name `t`. Set to `\"\"` to disable the feature.<br/>Variables\
            \ in mountpoint string:<br/><br/>  - <code>${clientid}</code>: clientid<br/><br/>\
            \  - <code>${username}</code>: username"
          default: ""
        enable:
          type: boolean
          description: Whether to enable this gateway
          default: true
        enable_stats:
          type: boolean
          description: Whether to enable client process statistic
          default: true
        idle_timeout:
          type: string
          description: The idle time of the client connection process. It has two
            purposes:<br/>  1. A newly created client process that does not receive
            any client requests after that time will be closed directly.<br/>  2.
            A running client process that does not receive any client requests after
            this time will go into hibernation to save resources.
          example: 12m
          default: 30s
        clientinfo_override:
          $ref: '#/components/schemas/gateway.clientinfo_override'
    authn-hash.simple:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: Simple password hashing algorithm.
          enum:
          - plain
          - md5
          - sha
          - sha256
          - sha512
        salt_position:
          type: string
          description: "Salt position for PLAIN, MD5, SHA, SHA256 and SHA512 algorithms."
          default: prefix
          enum:
          - disable
          - prefix
          - suffix
    emqx_gateway_api.stomp:
      type: object
      properties:
        name:
          type: string
          description: Gateway Name
          enum:
          - stomp
        frame:
          $ref: '#/components/schemas/emqx_stomp_schema.stomp_frame'
        mountpoint:
          type: string
          description: "When publishing or subscribing, prefix all topics with a mountpoint\
            \ string.<br/>The prefixed string will be removed from the topic name\
            \ when the message is delivered to the subscriber.<br/>The mountpoint\
            \ is a way that users can use to implement isolation of message routing\
            \ between different listeners.<br/>For example if a client A subscribes\
            \ to `t` with `listeners.tcp.\\<name>.mountpoint` set to `some_tenant`,<br/>then\
            \ the client actually subscribes to the topic `some_tenant/t`.<br/>Similarly,\
            \ if another client B (connected to the same listener as the client A)\
            \ sends a message to topic `t`,<br/>the message is routed to all the clients\
            \ subscribed `some_tenant/t`,<br/>so client A will receive the message,\
            \ with topic name `t`. Set to `\"\"` to disable the feature.<br/>Variables\
            \ in mountpoint string:<br/><br/>  - <code>${clientid}</code>: clientid<br/><br/>\
            \  - <code>${username}</code>: username"
          default: ""
        enable:
          type: boolean
          description: Whether to enable this gateway
          default: true
        enable_stats:
          type: boolean
          description: Whether to enable client process statistic
          default: true
        idle_timeout:
          type: string
          description: The idle time of the client connection process. It has two
            purposes:<br/>  1. A newly created client process that does not receive
            any client requests after that time will be closed directly.<br/>  2.
            A running client process that does not receive any client requests after
            this time will go into hibernation to save resources.
          example: 12m
          default: 30s
        clientinfo_override:
          $ref: '#/components/schemas/gateway.clientinfo_override'
        listeners:
          type: array
          items:
            oneOf:
            - $ref: '#/components/schemas/emqx_gateway_api.ssl_listener'
            - $ref: '#/components/schemas/emqx_gateway_api.tcp_listener'
    emqx_authz_api_mnesia.rules_for_username:
      required:
      - username
      type: object
      properties:
        rules:
          type: array
          items:
            $ref: '#/components/schemas/emqx_authz_api_mnesia.rule_item'
        username:
          type: string
          description: Username
          example: user1
      example:
        rules:
        - qos:
          - 0
          - 0
          retain: ""
          topic: test/topic/1
          action: publish
          permission: allow
        - qos:
          - 0
          - 0
          retain: ""
          topic: test/topic/1
          action: publish
          permission: allow
        username: user1
    emqx_gateway_api_clients.exproto_client:
      type: object
      properties:
        node:
          type: string
          description: Name of the node to which the client is connected
        clientid:
          type: string
          description: Client ID
        username:
          type: string
          description: Username of client when connecting
        mountpoint:
          type: string
          description: Topic mountpoint
        proto_name:
          type: string
          description: Client protocol name
        proto_ver:
          type: string
          description: Protocol version used by the client
        ip_address:
          type: string
          description: Client's IP address
        port:
          type: integer
          description: Client's port
        is_bridge:
          type: boolean
          description: Indicates whether the client is connected via bridge
        connected_at:
          description: Client connection time
          oneOf:
          - type: integer
            description: epoch-millisecond
            example: 1640995200000
          - type: string
            format: date-time
            example: 2022-01-01T00:00:00Z
        disconnected_at:
          description: "Client offline time, This field is only valid and returned\
            \ when connected is false"
          oneOf:
          - type: integer
            description: epoch-millisecond
            example: 1640995200000
          - type: string
            format: date-time
            example: 2022-01-01T00:00:00Z
        connected:
          type: boolean
          description: Whether the client is connected
        keepalive:
          type: integer
          description: "Keepalive time, with the unit of second"
        clean_start:
          type: boolean
          description: Indicate whether the client is using a brand new session
        expiry_interval:
          type: integer
          description: "Session expiration interval, with the unit of second"
        created_at:
          description: Session creation time
          oneOf:
          - type: integer
            description: epoch-millisecond
            example: 1640995200000
          - type: string
            format: date-time
            example: 2022-01-01T00:00:00Z
        subscriptions_cnt:
          type: integer
          description: Number of subscriptions established by this client
        subscriptions_max:
          type: integer
          description: Maximum number of subscriptions allowed by this client
        inflight_cnt:
          type: integer
          description: Current length of inflight
        inflight_max:
          type: integer
          description: Maximum length of inflight
        mqueue_len:
          type: integer
          description: Current length of message queue
        mqueue_max:
          type: integer
          description: Maximum length of message queue
        mqueue_dropped:
          type: integer
          description: Number of messages dropped by the message queue due to exceeding
            the length
        awaiting_rel_cnt:
          type: integer
          description: Number of awaiting acknowledge packet
        awaiting_rel_max:
          type: integer
          description: Maximum allowed number of awaiting PUBREC packet
        recv_oct:
          type: integer
          description: Number of bytes received
        recv_cnt:
          type: integer
          description: Number of socket packets received
        recv_pkt:
          type: integer
          description: Number of protocol packets received
        recv_msg:
          type: integer
          description: Number of message packets received
        send_oct:
          type: integer
          description: Number of bytes sent
        send_cnt:
          type: integer
          description: Number of socket packets sent
        send_pkt:
          type: integer
          description: Number of protocol packets sent
        send_msg:
          type: integer
          description: Number of message packets sent
        mailbox_len:
          type: integer
          description: Process mailbox size
        heap_size:
          type: integer
          description: Process heap size with the unit of byte
        reductions:
          type: integer
          description: Erlang reduction
    emqx_lwm2m_schema.translator:
      required:
      - topic
      type: object
      properties:
        topic:
          type: string
          description: Topic Name
        qos:
          maximum: 2
          minimum: 0
          type: integer
          description: QoS Level
          example: 0
          default: 0
    connector-mqtt.ingress:
      type: object
      properties:
        pool_size:
          minimum: 1
          type: integer
          description: "Size of the pool of MQTT clients that will ingest messages\
            \ from the remote broker.<br/><br/>This value will be respected only if\
            \ 'remote.topic' is a shared subscription topic or topic-filter<br/>(for\
            \ example `$share/name1/topic1` or `$share/name2/topic2/#`), otherwise\
            \ only a single MQTT client will be used.<br/>Each MQTT client will be\
            \ assigned 'clientid' of the form '${clientid_prefix}:${bridge_name}:ingress:${node}:${n}'<br/>where\
            \ 'n' is the number of a client inside the pool.<br/>NOTE: Non-shared\
            \ subscription will not work well when EMQX is clustered."
          default: 8
        remote:
          $ref: '#/components/schemas/connector-mqtt.ingress_remote'
        local:
          $ref: '#/components/schemas/connector-mqtt.ingress_local'
    connector-mqtt.egress_local:
      type: object
      properties:
        topic:
          type: string
          description: The local topic to be forwarded to the remote broker
    emqx_authz_api_schema.mongo_sharded:
      required:
      - collection
      - database
      - servers
      - type
      type: object
      properties:
        enable:
          type: boolean
          description: Set to <code>true</code> or <code>false</code> to disable this
            ACL provider.
          default: true
        type:
          type: string
          description: Backend type.
          default: mongodb
          enum:
          - mongodb
        collection:
          type: string
          description: '`MongoDB` collection containing the authorization data.'
        filter:
          type: object
          description: "Conditional expression that defines the filter condition in\
            \ the query.<br/>Filter supports the following placeholders:<br/> - <code>${username}</code>:\
            \ Will be replaced at runtime with <code>Username</code> used by the client\
            \ when connecting;<br/> - <code>${clientid}</code>: Will be replaced at\
            \ runtime with <code>Client ID</code> used by the client when connecting."
          example: {}
          default: {}
        mongo_type:
          type: string
          description: Sharded cluster. Must be set to 'sharded' when MongoDB server
            is running in 'sharded' mode.
          default: sharded
          enum:
          - sharded
        servers:
          type: string
          description: "A Node list for Cluster to connect to. The nodes should be\
            \ separated with commas, such as: `Node[,Node].`<br/>For each Node should\
            \ be: The IPv4 or IPv6 address or the hostname to connect to.<br/>A host\
            \ entry has the following form: `Host[:Port]`.<br/>The MongoDB default\
            \ port 27017 is used if `[:Port]` is not specified."
        w_mode:
          type: string
          description: Write mode.
          default: unsafe
          enum:
          - unsafe
          - safe
        srv_record:
          type: boolean
          description: Use DNS SRV record.
          default: false
        pool_size:
          minimum: 1
          type: integer
          description: Size of the connection pool towards the bridge target service.
          default: 8
        username:
          type: string
          description: The username associated with the bridge in the external database
            used for authentication or identification purposes.
        password:
          type: string
          description: "The password associated with the bridge, used for authentication\
            \ with the external database."
          format: password
        auth_source:
          type: string
          description: Database name associated with the user's credentials.
        database:
          type: string
          description: Database name.
        topology:
          $ref: '#/components/schemas/emqx_mongodb.topology'
        ssl:
          $ref: '#/components/schemas/broker.ssl_client_opts'
    authn.builtin_db:
      required:
      - backend
      - mechanism
      - user_id_type
      type: object
      properties:
        mechanism:
          type: string
          description: Authentication mechanism.
          enum:
          - password_based
        backend:
          type: string
          description: Backend type.
          enum:
          - built_in_database
        user_id_type:
          type: string
          description: Specify whether to use `clientid` or `username` for authentication.
          default: username
          enum:
          - clientid
          - username
        password_hash_algorithm:
          description: Options for password hash creation and verification.
          oneOf:
          - $ref: '#/components/schemas/authn-hash.simple'
          - $ref: '#/components/schemas/authn-hash.pbkdf2'
          - $ref: '#/components/schemas/authn-hash.bcrypt_rw'
          default:
            name: sha256
            salt_position: prefix
        enable:
          type: boolean
          description: Set to <code>true</code> or <code>false</code> to disable this
            auth provider.
          default: true
    listeners.wss_required_bind:
      required:
      - bind
      - id
      - type
      type: object
      properties:
        type:
          type: string
          description: Listener type
          enum:
          - wss
        running:
          type: boolean
          description: Listener status
        id:
          type: string
          description: Listener id
        current_connections:
          minimum: 0
          type: integer
          description: Current connections
        enable:
          type: boolean
          description: Enable listener.
          default: true
        bind:
          type: string
          description: IP address and port for the listening socket.
          example: 127.0.0.1:80
          default: "8084"
        acceptors:
          minimum: 1
          type: integer
          description: The size of the listener's receiving pool.
          default: 16
        max_connections:
          description: The maximum number of concurrent connections allowed by the
            listener.
          oneOf:
          - minimum: 1
            type: integer
          - type: string
            enum:
            - infinity
          default: infinity
        mountpoint:
          type: string
          description: "When publishing or subscribing, prefix all topics with a mountpoint\
            \ string.<br/>The prefixed string will be removed from the topic name\
            \ when the message<br/>is delivered to the subscriber. The mountpoint\
            \ is a way that users can use<br/>to implement isolation of message routing\
            \ between different listeners.<br/>For example if a client A subscribes\
            \ to `t` with `listeners.tcp.\\<name>.mountpoint`<br/>set to `some_tenant`,\
            \ then the client actually subscribes to the topic<br/>`some_tenant/t`.\
            \ Similarly, if another client B (connected to the same listener<br/>as\
            \ the client A) sends a message to topic `t`, the message is routed<br/>to\
            \ all the clients subscribed `some_tenant/t`, so client A will receive\
            \ the<br/>message, with topic name `t`.<br/><br/>Set to `\"\"` to disable\
            \ the feature.<br/><br/><br/>Variables in mountpoint string:<br/>  - <code>${clientid}</code>:\
            \ clientid<br/>  - <code>${username}</code>: username"
          default: ""
        enable_authn:
          type: string
          description: "Set <code>true</code> (default) to enable client authentication\
            \ on this listener, the authentication<br/>process goes through the configured\
            \ authentication chain.<br/>When set to <code>false</code> to allow any\
            \ clients with or without authentication information such as username\
            \ or password to log in.<br/>When set to <code>quick_deny_anonymous</code>,\
            \ it behaves like when set to <code>true</code>, but clients will be<br/>denied\
            \ immediately without going through any authenticators if <code>username</code>\
            \ is not provided. This is useful to fence off<br/>anonymous clients early."
          default: "true"
          enum:
          - "true"
          - "false"
          - quick_deny_anonymous
        max_conn_rate:
          type: string
          description: "Maximum connection rate.<br/><br/>This is used to limit the\
            \ connection rate for this listener,<br/>once the limit is reached, new\
            \ connections will be deferred or refused"
          example: 1000/s
        messages_rate:
          type: string
          description: "Messages publish rate.<br/><br/>This is used to limit the\
            \ inbound message numbers for each client connected to this listener,<br/>once\
            \ the limit is reached, the restricted client will slow down and even\
            \ be hung for a while."
          example: 1000/s
        bytes_rate:
          type: string
          description: "Data publish rate.<br/><br/>This is used to limit the inbound\
            \ bytes rate for each client connected to this listener,<br/>once the\
            \ limit is reached, the restricted client will slow down and even be hung\
            \ for a while."
          example: 100MB/s
        access_rules:
          type: array
          description: "The access control rules for this listener.<br/>See: https://github.com/emqtt/esockd#allowdeny"
          items:
            type: string
          default:
          - allow all
        proxy_protocol:
          type: boolean
          description: "Enable the Proxy Protocol V1/2 if the EMQX cluster is deployed\
            \ behind HAProxy or Nginx.<br/><br/>See: https://www.haproxy.com/blog/haproxy/proxy-protocol/"
          default: false
        proxy_protocol_timeout:
          type: string
          description: Timeout for proxy protocol. EMQX will close the TCP connection
            if proxy protocol packet is not received within the timeout.
          example: 12m
          default: 3s
        tcp_options:
          $ref: '#/components/schemas/broker.tcp_opts'
        ssl_options:
          $ref: '#/components/schemas/broker.listener_wss_opts'
        websocket:
          $ref: '#/components/schemas/broker.ws_opts'
    emqx_authz_api_schema.built_in_database:
      required:
      - type
      type: object
      properties:
        enable:
          type: boolean
          description: Set to <code>true</code> or <code>false</code> to disable this
            ACL provider.
          default: true
        type:
          type: string
          description: Backend type.
          default: built_in_database
          enum:
          - built_in_database
    cluster.core_replicants:
      type: object
      properties:
        core_node:
          type: string
          description: Core node name
          example: emqx-core@127.0.0.1
        replicant_nodes:
          type: array
          items:
            $ref: '#/components/schemas/cluster.replicant_info'
      example:
        core_node: emqx-core@127.0.0.1
        replicant_nodes:
        - node: emqx-replicant@127.0.0.2
          streams: 10
        - node: emqx-replicant@127.0.0.2
          streams: 10
    emqx_mgmt_api_stats.node_stats_data:
      type: object
      properties:
        channels.count:
          minimum: 0
          type: integer
          description: sessions.count
          example: 0
        channels.max:
          minimum: 0
          type: integer
          description: session.max
          example: 0
        connections.count:
          minimum: 0
          type: integer
          description: Number of current connections
          example: 0
        connections.max:
          minimum: 0
          type: integer
          description: Historical maximum number of connections
          example: 0
        delayed.count:
          minimum: 0
          type: integer
          description: Number of delayed messages
          example: 0
        delayed.max:
          minimum: 0
          type: integer
          description: Historical maximum number of delayed messages
          example: 0
        live_connections.count:
          minimum: 0
          type: integer
          description: Number of current live connections
          example: 0
        live_connections.max:
          minimum: 0
          type: integer
          description: Historical maximum number of live connections
          example: 0
        retained.count:
          minimum: 0
          type: integer
          description: Number of currently retained messages
          example: 0
        retained.max:
          minimum: 0
          type: integer
          description: Historical maximum number of retained messages
          example: 0
        sessions.count:
          minimum: 0
          type: integer
          description: Number of current sessions
          example: 0
        sessions.max:
          minimum: 0
          type: integer
          description: Historical maximum number of sessions
          example: 0
        suboptions.count:
          minimum: 0
          type: integer
          description: subscriptions.count
          example: 0
        suboptions.max:
          minimum: 0
          type: integer
          description: subscriptions.max
          example: 0
        subscribers.count:
          minimum: 0
          type: integer
          description: Number of current subscribers
          example: 0
        subscribers.max:
          minimum: 0
          type: integer
          description: Historical maximum number of subscribers
          example: 0
        subscriptions.count:
          minimum: 0
          type: integer
          description: "Number of current subscriptions, including shared subscriptions"
          example: 0
        subscriptions.max:
          minimum: 0
          type: integer
          description: Historical maximum number of subscriptions
          example: 0
        subscriptions.shared.count:
          minimum: 0
          type: integer
          description: Number of current shared subscriptions
          example: 0
        subscriptions.shared.max:
          minimum: 0
          type: integer
          description: Historical maximum number of shared subscriptions
          example: 0
        topics.count:
          minimum: 0
          type: integer
          description: Number of current topics
          example: 0
        topics.max:
          minimum: 0
          type: integer
          description: Historical maximum number of topics
          example: 0
      example:
        sessions.max: 0
        suboptions.count: 0
        channels.max: 0
        sessions.count: 0
        subscriptions.shared.count: 0
        channels.count: 0
        live_connections.count: 0
        topics.count: 0
        retained.count: 0
        subscriptions.max: 0
        subscribers.count: 0
        subscriptions.count: 0
        connections.max: 0
        suboptions.max: 0
        subscribers.max: 0
        subscriptions.shared.max: 0
        topics.max: 0
        delayed.count: 0
        delayed.max: 0
        live_connections.max: 0
        connections.count: 0
        retained.max: 0
    emqx_rule_api_schema.rule_info:
      required:
      - id
      - sql
      type: object
      properties:
        id:
          type: string
          description: The ID of the rule
          example: 293fb66f
        from:
          type: array
          description: The topics of the rule
          example: t/#
          items:
            type: string
        created_at:
          type: string
          description: The created time of the rule
          example: 2021-12-01T15:00:43.153+08:00
        name:
          type: string
          description: The name of the rule
          example: foo
          default: ""
        sql:
          type: string
          description: "SQL query to transform the messages.<br/>Example: <code>SELECT\
            \ * FROM \"test/topic\" WHERE payload.x = 1</code>"
          example: SELECT * FROM "test/topic" WHERE payload.x = 1
        actions:
          type: array
          description: "A list of actions of the rule.<br/>An action can be a string\
            \ that refers to the channel ID of an EMQX bridge, or an object<br/>that\
            \ refers to a function.<br/>There a some built-in functions like \"republish\"\
            \ and \"console\", and we also support user<br/>provided functions in\
            \ the format: \"{module}:{function}\".<br/>The actions in the list are\
            \ executed sequentially.<br/>This means that if one of the action is executing\
            \ slowly, all the following actions will not<br/>be executed until it\
            \ returns.<br/>If one of the action crashed, all other actions come after\
            \ it will still be executed, in the<br/>original order.<br/>If there's\
            \ any error when running an action, there will be an error message, and\
            \ the 'failure'<br/>counter of the function action or the bridge channel\
            \ will increase."
          example:
          - webhook:my_webhook
          - args:
              payload: "${payload}"
              topic: t/1
            function: republish
          - function: console
          items:
            oneOf:
            - $ref: '#/components/schemas/rule_engine.user_provided_function'
            - $ref: '#/components/schemas/rule_engine.builtin_action_console'
            - $ref: '#/components/schemas/rule_engine.builtin_action_republish'
            - type: string
          default: []
        enable:
          type: boolean
          description: Enable or disable the rule
          default: true
        description:
          type: string
          description: The description of the rule
          example: Some description
          default: ""
        metadata:
          type: object
          description: "Rule metadata, do not change manually"
          example: {}
      example:
        metadata: {}
        enable: true
        name: foo
        created_at: 2021-12-01T15:00:43.153+08:00
        description: Some description
        from: t/#
        id: 293fb66f
        actions:
        - webhook:my_webhook
        - args:
            payload: "${payload}"
            topic: t/1
          function: republish
        - function: console
        sql: SELECT * FROM "test/topic" WHERE payload.x = 1
    rule_engine.republish_args:
      required:
      - topic
      type: object
      properties:
        topic:
          type: string
          description: "The target topic of message to be re-published.<br/>Template\
            \ with variables is allowed, see description of the 'republish_args'."
          example: a/1
        qos:
          description: "The qos of the message to be re-published.<br/>Template with\
            \ variables is allowed, see description of the 'republish_args'.<br/>Defaults\
            \ to ${qos}. If variable ${qos} is not found from the selected result\
            \ of the rule,<br/>0 is used."
          example: "${qos}"
          oneOf:
          - type: string
          - maximum: 2
            minimum: 0
            type: integer
            example: 0
          default: "${qos}"
        retain:
          description: "The 'retain' flag of the message to be re-published.<br/>Template\
            \ with variables is allowed, see description of the 'republish_args'.<br/>Defaults\
            \ to ${retain}. If variable ${retain} is not found from the selected result<br/>of\
            \ the rule, false is used."
          example: "${retain}"
          oneOf:
          - type: string
          - type: boolean
          default: "${retain}"
        payload:
          type: string
          description: "The payload of the message to be re-published.<br/>Template\
            \ with variables is allowed, see description of the 'republish_args'.<br/>Defaults\
            \ to ${payload}. If variable ${payload} is not found from the selected\
            \ result<br/>of the rule, then the string \"undefined\" is used."
          example: "${payload}"
          default: "${payload}"
        user_properties:
          type: string
          description: "From which variable should the MQTT message's User-Property\
            \ pairs be taken from.<br/>The value must be a map.<br/>You may configure\
            \ it to <code>${pub_props.'User-Property'}</code> or<br/>use <code>SELECT\
            \ *,pub_props.'User-Property' as user_properties</code><br/>to forward\
            \ the original user properties to the republished message.<br/>You may\
            \ also call <code>map_put</code> function like<br/><code>map_put('my-prop-name',\
            \ 'my-prop-value', user_properties) as user_properties</code><br/>to inject\
            \ user properties.<br/>NOTE: MQTT spec allows duplicated user property\
            \ names, but EMQX Rule-Engine does not."
          example: "${pub_props.'User-Property'}"
          default: "${user_properties}"
    authz.node_metrics:
      type: object
      properties:
        node:
          type: string
          description: Node name.
          example: emqx@127.0.0.1
        metrics:
          $ref: '#/components/schemas/authz.metrics'
      example:
        node: emqx@127.0.0.1
        metrics: null
    emqx_rule_api_schema.metrics:
      type: object
      properties:
        matched:
          minimum: 0
          type: integer
          description: How many times the FROM clause of the SQL is matched.
        matched.rate:
          type: number
          description: "The rate of matched, times/second"
        matched.rate.max:
          type: number
          description: "The max rate of matched, times/second"
        matched.rate.last5m:
          type: number
          description: "The average rate of matched in last 5 minutes, times/second"
        passed:
          minimum: 0
          type: integer
          description: How many times the SQL is passed
        failed:
          minimum: 0
          type: integer
          description: How many times the SQL statement has failed
        failed.exception:
          minimum: 0
          type: integer
          description: "How many times the SQL is failed due to exceptions. This may\
            \ because of a crash when calling a SQL function, or trying to do arithmetic\
            \ operation on undefined variables"
        failed.unknown:
          minimum: 0
          type: integer
          description: How many times the SQL is failed due to an unknown error.
        actions.total:
          minimum: 0
          type: integer
          description: "How many times the actions are called by the rule. This value\
            \ may several times of 'matched', depending on the number of the actions\
            \ of the rule."
        actions.success:
          minimum: 0
          type: integer
          description: How many times the rule successided to call the actions.
        actions.failed:
          minimum: 0
          type: integer
          description: How many times the rule failed to call the actions.
        actions.failed.out_of_service:
          minimum: 0
          type: integer
          description: "How many times the rule has failed to call actions due to\
            \ the action is out of service. For example, a bridge is disabled or stopped."
        actions.failed.unknown:
          minimum: 0
          type: integer
          description: "The number of action failures that have occurred due to unanticipated\
            \ reasons. For more information on these errors, please refer to the EMQX\
            \ log file."
      example:
        actions.failed.unknown: 0
        actions.failed.out_of_service: 0
        matched.rate.max: 1.46581298050294517310021547018550336360931396484375
        failed: 0
        failed.exception: 0
        matched.rate: 6.02745618307040320615897144307382404804229736328125
        actions.failed: 0
        failed.unknown: 0
        actions.success: 0
        matched: 0
        passed: 0
        actions.total: 0
        matched.rate.last5m: 5.962133916683182377482808078639209270477294921875
    authn.mysql:
      required:
      - backend
      - database
      - mechanism
      - query
      - server
      type: object
      properties:
        mechanism:
          type: string
          description: Authentication mechanism.
          enum:
          - password_based
        backend:
          type: string
          description: Backend type.
          enum:
          - mysql
        password_hash_algorithm:
          description: Options for password hash verification.
          oneOf:
          - $ref: '#/components/schemas/authn-hash.simple'
          - $ref: '#/components/schemas/authn-hash.pbkdf2'
          - $ref: '#/components/schemas/authn-hash.bcrypt'
          default:
            name: sha256
            salt_position: prefix
        query:
          type: string
          description: "SQL used to query data for authentication, such as password\
            \ hash."
        query_timeout:
          type: string
          description: Timeout for the SQL query.
          example: 32s
          default: 5s
        enable:
          type: boolean
          description: Set to <code>true</code> or <code>false</code> to disable this
            auth provider.
          default: true
        server:
          type: string
          description: "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A\
            \ host entry has the following form: `Host[:Port]`.<br/><br/>The MySQL\
            \ default port 3306 is used if `[:Port]` is not specified."
        database:
          type: string
          description: Database name.
        pool_size:
          minimum: 1
          type: integer
          description: Size of the connection pool towards the bridge target service.
          default: 8
        username:
          type: string
          description: The username associated with the bridge in the external database
            used for authentication or identification purposes.
          default: root
        password:
          type: string
          description: "The password associated with the bridge, used for authentication\
            \ with the external database."
          format: password
        auto_reconnect:
          type: boolean
          description: Deprecated. Enable automatic reconnect to the database.
          deprecated: true
          default: true
        ssl:
          $ref: '#/components/schemas/broker.ssl_client_opts'
    bridge.metrics:
      type: object
      properties:
        dropped:
          type: integer
          description: Count of messages dropped.
        dropped.other:
          type: integer
          description: Count of messages dropped due to other reasons.
        dropped.queue_full:
          type: integer
          description: Count of messages dropped due to the queue is full.
        dropped.resource_not_found:
          type: integer
          description: Count of messages dropped due to the resource is not found.
        dropped.resource_stopped:
          type: integer
          description: Count of messages dropped due to the resource is stopped.
        matched:
          type: integer
          description: Count of this bridge is matched and queried.
        queuing:
          type: integer
          description: Count of messages that are currently queuing.
        retried:
          type: integer
          description: Times of retried.
        failed:
          type: integer
          description: Count of messages that sent failed.
        inflight:
          type: integer
          description: Count of messages that were sent asynchronously but ACKs are
            not yet received.
        success:
          type: integer
          description: Count of messages that sent successfully.
        rate:
          type: number
          description: "The rate of matched, times/second"
        rate_max:
          type: number
          description: "The max rate of matched, times/second"
        rate_last5m:
          type: number
          description: "The average rate of matched in the last 5 minutes, times/second"
        received:
          type: number
          description: Count of messages that is received from the remote system.
      example:
        retried: 9
        rate_last5m: 1.024645700144157789424070870154537260532379150390625
        queuing: 7
        dropped: 0
        received: 1.489415909854170383397331534069962799549102783203125
        failed: 3
        dropped.resource_stopped: 5
        inflight: 2
        dropped.queue_full: 1
        rate: 7.3862819483858839220147274318151175975799560546875
        rate_max: 1.231513536777255612975068288506008684635162353515625
        success: 4
        dropped.resource_not_found: 5
        matched: 2
        dropped.other: 6
    emqx_rule_api_schema.ctx_acked:
      required:
      - event_type
      type: object
      properties:
        event_type:
          type: string
          description: Event Type
          enum:
          - message_acked
        id:
          type: string
          description: Message ID
        from_clientid:
          type: string
          description: The Client ID
        from_username:
          type: string
          description: The User Name
        clientid:
          type: string
          description: The Client ID
        username:
          type: string
          description: Username
        payload:
          type: string
          description: The Message Payload
        peerhost:
          type: string
          description: The IP Address of the Peer Client
        topic:
          type: string
          description: Message Topic
        publish_received_at:
          type: integer
          description: The Time that this Message is Received
        qos:
          maximum: 2
          minimum: 0
          type: integer
          description: The Message QoS
          example: 0
    dashboard.error_code:
      type: object
      properties:
        code:
          type: string
          description: Code Name
        description:
          type: string
          description: Description
      example:
        code: code
        description: description
    listeners.wss_not_required_bind:
      required:
      - id
      - type
      type: object
      properties:
        type:
          type: string
          description: Listener type
          enum:
          - wss
        running:
          type: boolean
          description: Listener status
        id:
          type: string
          description: Listener id
        current_connections:
          minimum: 0
          type: integer
          description: Current connections
        bind:
          type: string
          description: IP address and port for the listening socket.
          example: 127.0.0.1:80
          default: "8084"
        enable:
          type: boolean
          description: Enable listener.
          default: true
        acceptors:
          minimum: 1
          type: integer
          description: The size of the listener's receiving pool.
          default: 16
        max_connections:
          description: The maximum number of concurrent connections allowed by the
            listener.
          oneOf:
          - minimum: 1
            type: integer
          - type: string
            enum:
            - infinity
          default: infinity
        mountpoint:
          type: string
          description: "When publishing or subscribing, prefix all topics with a mountpoint\
            \ string.<br/>The prefixed string will be removed from the topic name\
            \ when the message<br/>is delivered to the subscriber. The mountpoint\
            \ is a way that users can use<br/>to implement isolation of message routing\
            \ between different listeners.<br/>For example if a client A subscribes\
            \ to `t` with `listeners.tcp.\\<name>.mountpoint`<br/>set to `some_tenant`,\
            \ then the client actually subscribes to the topic<br/>`some_tenant/t`.\
            \ Similarly, if another client B (connected to the same listener<br/>as\
            \ the client A) sends a message to topic `t`, the message is routed<br/>to\
            \ all the clients subscribed `some_tenant/t`, so client A will receive\
            \ the<br/>message, with topic name `t`.<br/><br/>Set to `\"\"` to disable\
            \ the feature.<br/><br/><br/>Variables in mountpoint string:<br/>  - <code>${clientid}</code>:\
            \ clientid<br/>  - <code>${username}</code>: username"
          default: ""
        enable_authn:
          type: string
          description: "Set <code>true</code> (default) to enable client authentication\
            \ on this listener, the authentication<br/>process goes through the configured\
            \ authentication chain.<br/>When set to <code>false</code> to allow any\
            \ clients with or without authentication information such as username\
            \ or password to log in.<br/>When set to <code>quick_deny_anonymous</code>,\
            \ it behaves like when set to <code>true</code>, but clients will be<br/>denied\
            \ immediately without going through any authenticators if <code>username</code>\
            \ is not provided. This is useful to fence off<br/>anonymous clients early."
          default: "true"
          enum:
          - "true"
          - "false"
          - quick_deny_anonymous
        max_conn_rate:
          type: string
          description: "Maximum connection rate.<br/><br/>This is used to limit the\
            \ connection rate for this listener,<br/>once the limit is reached, new\
            \ connections will be deferred or refused"
          example: 1000/s
        messages_rate:
          type: string
          description: "Messages publish rate.<br/><br/>This is used to limit the\
            \ inbound message numbers for each client connected to this listener,<br/>once\
            \ the limit is reached, the restricted client will slow down and even\
            \ be hung for a while."
          example: 1000/s
        bytes_rate:
          type: string
          description: "Data publish rate.<br/><br/>This is used to limit the inbound\
            \ bytes rate for each client connected to this listener,<br/>once the\
            \ limit is reached, the restricted client will slow down and even be hung\
            \ for a while."
          example: 100MB/s
        access_rules:
          type: array
          description: "The access control rules for this listener.<br/>See: https://github.com/emqtt/esockd#allowdeny"
          items:
            type: string
          default:
          - allow all
        proxy_protocol:
          type: boolean
          description: "Enable the Proxy Protocol V1/2 if the EMQX cluster is deployed\
            \ behind HAProxy or Nginx.<br/><br/>See: https://www.haproxy.com/blog/haproxy/proxy-protocol/"
          default: false
        proxy_protocol_timeout:
          type: string
          description: Timeout for proxy protocol. EMQX will close the TCP connection
            if proxy protocol packet is not received within the timeout.
          example: 12m
          default: 3s
        tcp_options:
          $ref: '#/components/schemas/broker.tcp_opts'
        ssl_options:
          $ref: '#/components/schemas/broker.listener_wss_opts'
        websocket:
          $ref: '#/components/schemas/broker.ws_opts'
    emqx_authz_api_schema.postgresql:
      required:
      - database
      - query
      - server
      - type
      - username
      type: object
      properties:
        enable:
          type: boolean
          description: Set to <code>true</code> or <code>false</code> to disable this
            ACL provider.
          default: true
        type:
          type: string
          description: Backend type.
          default: postgresql
          enum:
          - postgresql
        query:
          type: string
          description: Database query used to retrieve authorization data.
        server:
          type: string
          description: "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A\
            \ host entry has the following form: `Host[:Port]`.<br/><br/>The PostgreSQL\
            \ default port 5432 is used if `[:Port]` is not specified."
        database:
          type: string
          description: Database name.
        pool_size:
          minimum: 1
          type: integer
          description: Size of the connection pool towards the bridge target service.
          default: 8
        username:
          type: string
          description: The username associated with the bridge in the external database
            used for authentication or identification purposes.
        password:
          type: string
          description: "The password associated with the bridge, used for authentication\
            \ with the external database."
          format: password
        auto_reconnect:
          type: boolean
          description: Deprecated. Enable automatic reconnect to the database.
          deprecated: true
          default: true
        ssl:
          $ref: '#/components/schemas/broker.ssl_client_opts'
    emqx_mgmt_api_metrics.aggregated_metrics:
      type: object
      properties:
        actions.failure:
          minimum: 0
          type: integer
          description: Number of failure executions of the rule engine action
        actions.success:
          minimum: 0
          type: integer
          description: Number of successful executions of the rule engine action
        bytes.received:
          minimum: 0
          type: integer
          description: 'Number of bytes received '
        bytes.sent:
          minimum: 0
          type: integer
          description: Number of bytes sent on this connection
        client.auth.anonymous:
          minimum: 0
          type: integer
          description: Number of clients who log in anonymously
        client.authenticate:
          minimum: 0
          type: integer
          description: Number of client authentications
        client.check_authz:
          minimum: 0
          type: integer
          description: Number of Authorization rule checks
        client.connack:
          minimum: 0
          type: integer
          description: Number of CONNACK packet sent
        client.connect:
          minimum: 0
          type: integer
          description: Number of client connections
        client.connected:
          minimum: 0
          type: integer
          description: Number of successful client connections
        client.disconnected:
          minimum: 0
          type: integer
          description: Number of client disconnects
        client.subscribe:
          minimum: 0
          type: integer
          description: Number of client subscriptions
        client.unsubscribe:
          minimum: 0
          type: integer
          description: Number of client unsubscriptions
        delivery.dropped:
          minimum: 0
          type: integer
          description: Total number of discarded messages when sending
        delivery.dropped.expired:
          minimum: 0
          type: integer
          description: Number of messages dropped due to message expiration on sending
        delivery.dropped.no_local:
          minimum: 0
          type: integer
          description: Number of messages that were dropped due to the No Local subscription
            option when sending
        delivery.dropped.qos0_msg:
          minimum: 0
          type: integer
          description: Number of messages with QoS 0 that were dropped because the
            message queue was full when sending
        delivery.dropped.queue_full:
          minimum: 0
          type: integer
          description: Number of messages with a non-zero QoS that were dropped because
            the message queue was full when sending
        delivery.dropped.too_large:
          minimum: 0
          type: integer
          description: The number of messages that were dropped because the length
            exceeded the limit when sending
        messages.acked:
          minimum: 0
          type: integer
          description: Number of received PUBACK and PUBREC packet
        messages.delayed:
          minimum: 0
          type: integer
          description: Number of delay-published messages
        messages.delivered:
          minimum: 0
          type: integer
          description: Number of messages forwarded to the subscription process internally
        messages.dropped:
          minimum: 0
          type: integer
          description: Total number of messages dropped before forwarding to the subscription
            process
        messages.dropped.await_pubrel_timeout:
          minimum: 0
          type: integer
          description: Number of messages dropped due to waiting PUBREL timeout
        messages.dropped.no_subscribers:
          minimum: 0
          type: integer
          description: Number of messages dropped due to no subscribers
        messages.forward:
          minimum: 0
          type: integer
          description: Number of messages forwarded to other nodes
        messages.publish:
          minimum: 0
          type: integer
          description: Number of messages published in addition to system messages
        messages.qos0.received:
          minimum: 0
          type: integer
          description: Number of QoS 0 messages received from clients
        messages.qos0.sent:
          minimum: 0
          type: integer
          description: Number of QoS 0 messages sent to clients
        messages.qos1.received:
          minimum: 0
          type: integer
          description: Number of QoS 1 messages received from clients
        messages.qos1.sent:
          minimum: 0
          type: integer
          description: Number of QoS 1 messages sent to clients
        messages.qos2.received:
          minimum: 0
          type: integer
          description: Number of QoS 2 messages received from clients
        messages.qos2.sent:
          minimum: 0
          type: integer
          description: Number of QoS 2 messages sent to clients
        messages.received:
          minimum: 0
          type: integer
          description: "Number of messages received from the client, equal to the\
            \ sum of messages.qos0.received\fmessages.qos1.received and messages.qos2.received"
        messages.retained:
          minimum: 0
          type: integer
          description: Number of retained messages
        messages.sent:
          minimum: 0
          type: integer
          description: "Number of messages sent to the client, equal to the sum of\
            \ messages.qos0.sent\fmessages.qos1.sent and messages.qos2.sent"
        packets.auth.received:
          minimum: 0
          type: integer
          description: Number of received AUTH packet
        packets.auth.sent:
          minimum: 0
          type: integer
          description: Number of sent AUTH packet
        packets.connack.auth_error:
          minimum: 0
          type: integer
          description: Number of received CONNECT packet with failed authentication
        packets.connack.error:
          minimum: 0
          type: integer
          description: Number of received CONNECT packet with unsuccessful connections
        packets.connack.sent:
          minimum: 0
          type: integer
          description: Number of sent CONNACK packet
        packets.connect.received:
          minimum: 0
          type: integer
          description: Number of received CONNECT packet
        packets.disconnect.received:
          minimum: 0
          type: integer
          description: Number of received DISCONNECT packet
        packets.disconnect.sent:
          minimum: 0
          type: integer
          description: Number of sent DISCONNECT packet
        packets.pingreq.received:
          minimum: 0
          type: integer
          description: Number of received PINGREQ packet
        packets.pingresp.sent:
          minimum: 0
          type: integer
          description: Number of sent PUBRESP packet
        packets.puback.inuse:
          minimum: 0
          type: integer
          description: Number of received PUBACK packet with occupied identifiers
        packets.puback.missed:
          minimum: 0
          type: integer
          description: Number of received packet with identifiers.
        packets.puback.received:
          minimum: 0
          type: integer
          description: Number of received PUBACK packet
        packets.puback.sent:
          minimum: 0
          type: integer
          description: Number of sent PUBACK packet
        packets.pubcomp.inuse:
          minimum: 0
          type: integer
          description: Number of received PUBCOMP packet with occupied identifiers
        packets.pubcomp.missed:
          minimum: 0
          type: integer
          description: Number of missed PUBCOMP packet
        packets.pubcomp.received:
          minimum: 0
          type: integer
          description: Number of received PUBCOMP packet
        packets.pubcomp.sent:
          minimum: 0
          type: integer
          description: Number of sent PUBCOMP packet
        packets.publish.auth_error:
          minimum: 0
          type: integer
          description: Number of received PUBLISH packets with failed the Authorization
            check
        packets.publish.dropped:
          minimum: 0
          type: integer
          description: Number of messages discarded due to the receiving limit
        packets.publish.error:
          minimum: 0
          type: integer
          description: Number of received PUBLISH packet that cannot be published
        packets.publish.inuse:
          minimum: 0
          type: integer
          description: Number of received PUBLISH packet with occupied identifiers
        packets.publish.received:
          minimum: 0
          type: integer
          description: Number of received PUBLISH packet
        packets.publish.sent:
          minimum: 0
          type: integer
          description: Number of sent PUBLISH packet
        packets.pubrec.inuse:
          minimum: 0
          type: integer
          description: Number of received PUBREC packet with occupied identifiers
        packets.pubrec.missed:
          minimum: 0
          type: integer
          description: Number of received PUBREC packet with unknown identifiers
        packets.pubrec.received:
          minimum: 0
          type: integer
          description: Number of received PUBREC packet
        packets.pubrec.sent:
          minimum: 0
          type: integer
          description: Number of sent PUBREC packet
        packets.pubrel.missed:
          minimum: 0
          type: integer
          description: Number of received PUBREC packet with unknown identifiers
        packets.pubrel.received:
          minimum: 0
          type: integer
          description: Number of received PUBREL packet
        packets.pubrel.sent:
          minimum: 0
          type: integer
          description: Number of sent PUBREL packet
        packets.received:
          minimum: 0
          type: integer
          description: Number of received packet
        packets.sent:
          minimum: 0
          type: integer
          description: Number of sent packet
        packets.suback.sent:
          minimum: 0
          type: integer
          description: Number of sent SUBACK packet
        packets.subscribe.auth_error:
          minimum: 0
          type: integer
          description: Number of received SUBACK packet with failed Authorization
            check
        packets.subscribe.error:
          minimum: 0
          type: integer
          description: Number of received SUBSCRIBE packet with failed subscriptions
        packets.subscribe.received:
          minimum: 0
          type: integer
          description: Number of received SUBSCRIBE packet
        packets.unsuback.sent:
          minimum: 0
          type: integer
          description: Number of sent UNSUBACK packet
        packets.unsubscribe.error:
          minimum: 0
          type: integer
          description: Number of received UNSUBSCRIBE packet with failed unsubscriptions
        packets.unsubscribe.received:
          minimum: 0
          type: integer
          description: Number of received UNSUBSCRIBE packet
        rules.matched:
          minimum: 0
          type: integer
          description: Number of rule matched
        session.created:
          minimum: 0
          type: integer
          description: Number of sessions created
        session.discarded:
          minimum: 0
          type: integer
          description: Number of sessions dropped because Clean Session or Clean Start
            is true
        session.resumed:
          minimum: 0
          type: integer
          description: Number of sessions resumed because Clean Session or Clean Start
            is false
        session.takenover:
          minimum: 0
          type: integer
          description: Number of sessions takenover because Clean Session or Clean
            Start is false
        session.terminated:
          minimum: 0
          type: integer
          description: Number of terminated sessions
    emqx_authz_api_schema.redis_cluster:
      required:
      - cmd
      - servers
      - type
      type: object
      properties:
        enable:
          type: boolean
          description: Set to <code>true</code> or <code>false</code> to disable this
            ACL provider.
          default: true
        type:
          type: string
          description: Backend type.
          default: redis
          enum:
          - redis
        cmd:
          type: string
          description: Database query used to retrieve authorization data.
          example: HGETALL mqtt_authz
        servers:
          type: string
          description: "A Node list for Cluster to connect to. The nodes should be\
            \ separated with commas, such as: `Node[,Node].`<br/>For each Node should\
            \ be: The IPv4 or IPv6 address or the hostname to connect to.<br/>A host\
            \ entry has the following form: `Host[:Port]`.<br/>The Redis default port\
            \ 6379 is used if `[:Port]` is not specified."
        redis_type:
          type: string
          description: Cluster mode. Must be set to 'cluster' when Redis server is
            running in clustered mode.
          default: cluster
          enum:
          - cluster
        pool_size:
          minimum: 1
          type: integer
          description: Size of the connection pool towards the bridge target service.
          default: 8
        password:
          type: string
          description: "The password associated with the bridge, used for authentication\
            \ with the external database."
          format: password
        auto_reconnect:
          type: boolean
          description: Deprecated. Enable automatic reconnect to the database.
          deprecated: true
          default: true
        ssl:
          $ref: '#/components/schemas/broker.ssl_client_opts'
    connector-http.request:
      type: object
      properties:
        method:
          type: string
          description: HTTP method.
        path:
          type: string
          description: URL path.
        body:
          type: string
          description: HTTP request body.
        headers:
          type: object
          description: List of HTTP headers.
          example: {}
        max_retries:
          minimum: 0
          type: integer
          description: Max retry times if error on sending request.
        request_timeout:
          type: string
          description: HTTP request timeout.
          example: 32s
    emqx_mgmt_api_banned.ban:
      required:
      - as
      - who
      type: object
      properties:
        as:
          type: string
          description: "Ban method, which can be client ID, username or IP address."
          example: username
          enum:
          - clientid
          - username
          - peerhost
        who:
          type: string
          description: "Ban object, specific client ID, username or IP address."
          example: Banned name
        by:
          type: string
          description: Initiator of the ban.
          example: mgmt_api
        reason:
          type: string
          description: "Ban reason, record the reason why the current object was banned."
          example: Too many requests
        at:
          description: "The start time of the ban, the format is rfc3339, the default\
            \ is the time when the operation was initiated."
          example: 2021-10-25T21:48:47+08:00
          oneOf:
          - type: integer
            description: epoch-second
            example: 1640995200
          - type: string
            format: date-time
            example: 2022-01-01T00:00:00Z
        until:
          description: "The end time of the ban, the format is rfc3339, the default\
            \ is the time when the operation was initiated + 1 year."
          example: 2021-10-25T21:53:47+08:00
          oneOf:
          - type: integer
            description: epoch-second
            example: 1640995200
          - type: string
            format: date-time
            example: 2022-01-01T00:00:00Z
      example:
        reason: Too many requests
        as: username
        at: 2021-10-25T21:48:47+08:00
        by: mgmt_api
        until: 2021-10-25T21:53:47+08:00
        who: Banned name
    bridge.node_status:
      type: object
      properties:
        node:
          type: string
          description: The node name.
          example: emqx@127.0.0.1
        status:
          type: string
          enum:
          - connected
          - disconnected
          - connecting
          - inconsistent
        status_reason:
          type: string
          description: This is the reason given in case a bridge is failing to connect.
          example: Connection refused
    authz.node_error:
      type: object
      properties:
        node:
          type: string
          description: Node name.
          example: emqx@127.0.0.1
        error:
          type: string
          description: The error of node.
      example:
        node: emqx@127.0.0.1
        error: error
    api_key.app:
      type: object
      properties:
        name:
          type: string
          description: "Unique and format by [a-zA-Z0-9-_]"
          example: EMQX-API-KEY-1
        api_key:
          type: string
          description: TODO:uses HMAC-SHA256 for signing.
          example: a4697a5c75a769f6
        api_secret:
          type: string
          description: "An API secret is a simple encrypted string that identifiesan\
            \ application without any principal.They are useful for accessing public\
            \ data anonymously,and are used to associate API requests."
          example: MzAyMjk3ODMwMDk0NjIzOTUxNjcwNzQ0NzQ3MTE2NDYyMDI
        expired_at:
          description: No longer valid datetime
          example: 2021-12-05T02:01:34.186Z
          oneOf:
          - oneOf:
            - type: integer
              description: epoch-second
              example: 1640995200
            - type: string
              format: date-time
              example: 2022-01-01T00:00:00Z
          - type: string
            enum:
            - infinity
          default: infinity
        created_at:
          description: ApiKey create datetime
          example: 2021-12-01T00:00:00.000Z
          oneOf:
          - type: integer
            description: epoch-second
            example: 1640995200
          - type: string
            format: date-time
            example: 2022-01-01T00:00:00Z
        desc:
          type: string
          example: Note
        enable:
          type: boolean
          description: Enable/Disable
        expired:
          type: boolean
          description: Expired
      example:
        expired: true
        api_key: a4697a5c75a769f6
        enable: true
        name: EMQX-API-KEY-1
        created_at: 2021-12-01T00:00:00.000Z
        expired_at: 2021-12-05T02:01:34.186Z
        api_secret: MzAyMjk3ODMwMDk0NjIzOTUxNjcwNzQ0NzQ3MTE2NDYyMDI
        desc: Note
    emqx_mgmt_api_publish.publish_error:
      type: object
      properties:
        reason_code:
          type: integer
          description: "The MQTT reason code, as the same ones used in PUBACK packet.<br/><br/>Currently\
            \ supported codes are:<br/><br/><br/>16(0x10): No matching subscribers;<br/><br/>131(0x81):\
            \ Error happened when dispatching the message. e.g. during EMQX restart;<br/><br/>144(0x90):\
            \ Topic name invalid;<br/><br/>151(0x97): Publish rate limited, or message\
            \ size exceeded limit. The global size limit can be configured with <code>mqtt.max_packet_size</code><br/><br/>NOTE:\
            \ The message size is estimated with the received topic and payload size,\
            \ meaning the actual size of serialized bytes (when sent to MQTT subscriber)<br/>might\
            \ be slightly over the limit."
          example: 16
        message:
          type: string
          description: Describes the failure reason in detail.
          example: no_matching_subscribers
    authn.jwt_hmac:
      required:
      - algorithm
      - mechanism
      - secret
      type: object
      properties:
        algorithm:
          type: string
          description: "JWT signing algorithm, Supports HMAC (configured as <code>hmac-based</code>)\
            \ and RSA, ECDSA (configured as <code>public-key</code>)."
          enum:
          - hmac-based
        secret:
          type: string
          description: The key to verify the JWT using HMAC algorithm.
        secret_base64_encoded:
          type: boolean
          description: Whether secret is base64 encoded.
          default: false
        mechanism:
          type: string
          description: Authentication mechanism.
          enum:
          - jwt
        acl_claim_name:
          type: string
          description: JWT claim name to use for getting ACL rules.
          default: acl
        verify_claims:
          type: array
          description: "A list of custom claims to validate, which is a list of name/value\
            \ pairs.<br/>Values can use the following placeholders:<br/>- <code>${username}</code>:\
            \ Will be replaced at runtime with <code>Username</code> used by the client\
            \ when connecting<br/>- <code>${clientid}</code>: Will be replaced at\
            \ runtime with <code>Client ID</code> used by the client when connecting<br/>Authentication\
            \ will verify that the value of claims in the JWT (taken from the Password\
            \ field) matches what is required in <code>verify_claims</code>."
          items:
            type: string
            example: any
          default: []
        from:
          type: string
          description: Field to take JWT from.
          default: password
          enum:
          - username
          - password
        enable:
          type: boolean
          description: Set to <code>true</code> or <code>false</code> to disable this
            auth provider.
          default: true
    authn.mongo_rs:
      required:
      - backend
      - collection
      - database
      - mechanism
      - replica_set_name
      - servers
      type: object
      properties:
        mechanism:
          type: string
          description: Authentication mechanism.
          enum:
          - password_based
        backend:
          type: string
          description: Backend type.
          enum:
          - mongodb
        collection:
          type: string
          description: Collection used to store authentication data.
        filter:
          type: object
          description: "Conditional expression that defines the filter condition in\
            \ the query.<br/>Filter supports the following placeholders:<br/>- <code>${username}</code>:\
            \ Will be replaced at runtime with <code>Username</code> used by the client\
            \ when connecting<br/>- <code>${clientid}</code>: Will be replaced at\
            \ runtime with <code>Client ID</code> used by the client when connecting"
          example: {}
          default: {}
        password_hash_field:
          type: string
          description: Document field that contains password hash.
          default: password_hash
        salt_field:
          type: string
          description: Document field that contains the password salt.
          default: salt
        is_superuser_field:
          type: string
          description: Document field that defines if the user has superuser privileges.
          default: is_superuser
        password_hash_algorithm:
          description: Options for password hash verification.
          oneOf:
          - $ref: '#/components/schemas/authn-hash.simple'
          - $ref: '#/components/schemas/authn-hash.pbkdf2'
          - $ref: '#/components/schemas/authn-hash.bcrypt'
          default:
            name: sha256
            salt_position: prefix
        enable:
          type: boolean
          description: Set to <code>true</code> or <code>false</code> to disable this
            auth provider.
          default: true
        mongo_type:
          type: string
          description: Replica set. Must be set to 'rs' when MongoDB server is running
            in 'replica set' mode.
          default: rs
          enum:
          - rs
        servers:
          type: string
          description: "A Node list for Cluster to connect to. The nodes should be\
            \ separated with commas, such as: `Node[,Node].`<br/>For each Node should\
            \ be: The IPv4 or IPv6 address or the hostname to connect to.<br/>A host\
            \ entry has the following form: `Host[:Port]`.<br/>The MongoDB default\
            \ port 27017 is used if `[:Port]` is not specified."
        w_mode:
          type: string
          description: Write mode.
          default: unsafe
          enum:
          - unsafe
          - safe
        r_mode:
          type: string
          description: Read mode.
          default: master
          enum:
          - master
          - slave_ok
        replica_set_name:
          type: string
          description: Name of the replica set.
        srv_record:
          type: boolean
          description: Use DNS SRV record.
          default: false
        pool_size:
          minimum: 1
          type: integer
          description: Size of the connection pool towards the bridge target service.
          default: 8
        username:
          type: string
          description: The username associated with the bridge in the external database
            used for authentication or identification purposes.
        password:
          type: string
          description: "The password associated with the bridge, used for authentication\
            \ with the external database."
          format: password
        auth_source:
          type: string
          description: Database name associated with the user's credentials.
        database:
          type: string
          description: Database name.
        topology:
          $ref: '#/components/schemas/emqx_mongodb.topology'
        ssl:
          $ref: '#/components/schemas/broker.ssl_client_opts'
    broker.deflate_opts:
      type: object
      properties:
        level:
          type: string
          description: Compression level.
          enum:
          - none
          - default
          - best_compression
          - best_speed
        mem_level:
          maximum: 9
          minimum: 1
          type: integer
          description: Specifies the size of the compression state.<br/><br/>Lower
            values decrease memory usage per connection.
          default: 8
        strategy:
          type: string
          description: Specifies the compression strategy.
          default: default
          enum:
          - default
          - filtered
          - huffman_only
          - rle
        server_context_takeover:
          type: string
          description: Takeover means the compression state is retained between server
            messages.
          default: takeover
          enum:
          - takeover
          - no_takeover
        client_context_takeover:
          type: string
          description: Takeover means the compression state is retained between client
            messages.
          default: takeover
          enum:
          - takeover
          - no_takeover
        server_max_window_bits:
          maximum: 15
          minimum: 8
          type: integer
          description: Specifies the size of the compression context for the server.
          default: 15
        client_max_window_bits:
          maximum: 15
          minimum: 8
          type: integer
          description: Specifies the size of the compression context for the client.
          default: 15
    broker.authz_cache:
      required:
      - enable
      type: object
      properties:
        enable:
          type: boolean
          description: Enable or disable the authorization cache.
          default: true
        max_size:
          maximum: 1048576
          minimum: 1
          type: integer
          description: Maximum number of cached items.
          default: 32
        ttl:
          type: string
          description: Time to live for the cached data.
          example: 12m
          default: 1m
      example:
        enable: true
        ttl: 12m
        max_size: 83973
    broker.tcp_opts:
      type: object
      properties:
        active_n:
          type: integer
          description: "Specify the {active, N} option for this Socket.<br/><br/>See:\
            \ https://erlang.org/doc/man/inet.html#setopts-2"
          default: 100
        backlog:
          minimum: 1
          type: integer
          description: TCP backlog defines the maximum length that the queue of<br/>pending
            connections can grow to.
          default: 1024
        send_timeout:
          type: string
          description: The TCP send timeout for the connections.
          example: 12m
          default: 15s
        send_timeout_close:
          type: boolean
          description: Close the connection if send timeout.
          default: true
        recbuf:
          type: string
          description: The TCP receive buffer (OS kernel) for the connections.
          example: 2KB
        sndbuf:
          type: string
          description: The TCP send buffer (OS kernel) for the connections.
          example: 4KB
        buffer:
          type: string
          description: The size of the user-space buffer used by the driver.
          example: 4KB
          default: 4KB
        high_watermark:
          type: string
          description: The socket is set to a busy state when the amount of data queued
            internally<br/>by the VM socket implementation reaches this limit.
          example: 32MB
          default: 1MB
        nodelay:
          type: boolean
          description: The TCP_NODELAY flag for the connections.
          default: true
        reuseaddr:
          type: boolean
          description: The SO_REUSEADDR flag for the connections.
          default: true
        keepalive:
          type: string
          description: "Enable TCP keepalive for MQTT connections over TCP or SSL.<br/>The\
            \ value is three comma separated numbers in the format of 'Idle,Interval,Probes'<br/>\
            \ - Idle: The number of seconds a connection needs to be idle before the\
            \ server begins to send out keep-alive probes (Linux default 7200).<br/>\
            \ - Interval: The number of seconds between TCP keep-alive probes (Linux\
            \ default 75).<br/> - Probes: The maximum number of TCP keep-alive probes\
            \ to send before giving up and killing the connection if no response is\
            \ obtained from the other end (Linux default 9).<br/>For example \"240,30,5\"\
            \ means: EMQX should start sending TCP keepalive probes after the connection\
            \ is in idle for 240 seconds, and the probes are sent every 30 seconds\
            \ until a response is received from the MQTT client, if it misses 5 consecutive\
            \ responses, EMQX should close the connection.<br/>Default: 'none'"
          default: none
    emqx_topic_metrics_api.reset:
      required:
      - action
      type: object
      properties:
        topic:
          type: string
          description: "Topic Name. If this parameter is not present,all created topic\
            \ metrics will be reset."
          example: testtopic/1
        action:
          type: string
          description: Action. Only support reset
          example: reset
    emqx_rule_api_schema.rule_metrics:
      required:
      - id
      type: object
      properties:
        id:
          type: string
          description: The ID of the rule
          example: 293fb66f
        metrics:
          $ref: '#/components/schemas/emqx_rule_api_schema.metrics'
        node_metrics:
          type: array
          description: The metrics of the rule for each node
          items:
            $ref: '#/components/schemas/emqx_rule_api_schema.node_metrics'
      example:
        node_metrics:
        - actions.failed.unknown: 0
          actions.failed.out_of_service: 0
          matched.rate.max: 6.8468526983526398765889098285697400569915771484375
          failed: 0
          failed.exception: 0
          node: emqx@127.0.0.1
          matched.rate: 1.489415909854170383397331534069962799549102783203125
          actions.failed: 0
          failed.unknown: 0
          actions.success: 0
          matched: 0
          passed: 0
          actions.total: 0
          matched.rate.last5m: 7.4577447736837658709418974467553198337554931640625
        - actions.failed.unknown: 0
          actions.failed.out_of_service: 0
          matched.rate.max: 6.8468526983526398765889098285697400569915771484375
          failed: 0
          failed.exception: 0
          node: emqx@127.0.0.1
          matched.rate: 1.489415909854170383397331534069962799549102783203125
          actions.failed: 0
          failed.unknown: 0
          actions.success: 0
          matched: 0
          passed: 0
          actions.total: 0
          matched.rate.last5m: 7.4577447736837658709418974467553198337554931640625
        id: 293fb66f
        metrics:
          actions.failed.unknown: 0
          actions.failed.out_of_service: 0
          matched.rate.max: 1.46581298050294517310021547018550336360931396484375
          failed: 0
          failed.exception: 0
          matched.rate: 6.02745618307040320615897144307382404804229736328125
          actions.failed: 0
          failed.unknown: 0
          actions.success: 0
          matched: 0
          passed: 0
          actions.total: 0
          matched.rate.last5m: 5.962133916683182377482808078639209270477294921875
    emqx_gateway_api.update_stomp:
      type: object
      properties:
        frame:
          $ref: '#/components/schemas/emqx_stomp_schema.stomp_frame'
        mountpoint:
          type: string
          description: "When publishing or subscribing, prefix all topics with a mountpoint\
            \ string.<br/>The prefixed string will be removed from the topic name\
            \ when the message is delivered to the subscriber.<br/>The mountpoint\
            \ is a way that users can use to implement isolation of message routing\
            \ between different listeners.<br/>For example if a client A subscribes\
            \ to `t` with `listeners.tcp.\\<name>.mountpoint` set to `some_tenant`,<br/>then\
            \ the client actually subscribes to the topic `some_tenant/t`.<br/>Similarly,\
            \ if another client B (connected to the same listener as the client A)\
            \ sends a message to topic `t`,<br/>the message is routed to all the clients\
            \ subscribed `some_tenant/t`,<br/>so client A will receive the message,\
            \ with topic name `t`. Set to `\"\"` to disable the feature.<br/>Variables\
            \ in mountpoint string:<br/><br/>  - <code>${clientid}</code>: clientid<br/><br/>\
            \  - <code>${username}</code>: username"
          default: ""
        enable:
          type: boolean
          description: Whether to enable this gateway
          default: true
        enable_stats:
          type: boolean
          description: Whether to enable client process statistic
          default: true
        idle_timeout:
          type: string
          description: The idle time of the client connection process. It has two
            purposes:<br/>  1. A newly created client process that does not receive
            any client requests after that time will be closed directly.<br/>  2.
            A running client process that does not receive any client requests after
            this time will go into hibernation to save resources.
          example: 12m
          default: 30s
        clientinfo_override:
          $ref: '#/components/schemas/gateway.clientinfo_override'
    connector-mqtt.egress_remote:
      required:
      - topic
      type: object
      properties:
        topic:
          type: string
          description: Forward to which topic of the remote broker.<br/><br/>Template
            with variables is allowed.
        qos:
          description: The QoS of the MQTT message to be sent.<br/><br/>Template with
            variables is allowed.
          oneOf:
          - type: string
          - maximum: 2
            minimum: 0
            type: integer
            example: 0
          default: 1
        retain:
          description: The 'retain' flag of the MQTT message to be sent.<br/><br/>Template
            with variables is allowed.
          oneOf:
          - type: string
          - type: boolean
          default: false
        payload:
          type: string
          description: The payload of the MQTT message to be sent.<br/><br/>Template
            with variables is allowed.
    plugins.position:
      type: object
      properties:
        position:
          description: "<br/>             Enable auto-boot at position in the boot\
            \ list, where Position could be<br/>             'front', 'rear', or 'before:other-vsn',\
            \ 'after:other-vsn'<br/>             to specify a relative position.<br/>\
            \            "
          oneOf:
          - type: string
          - type: string
            enum:
            - rear
          - type: string
            enum:
            - front
    bridge.node_metrics:
      type: object
      properties:
        node:
          type: string
          description: The node name.
          example: emqx@127.0.0.1
        metrics:
          $ref: '#/components/schemas/bridge.metrics'
      example:
        node: emqx@127.0.0.1
        metrics: null
    emqx_exproto_schema.ssl_server_opts:
      type: object
      properties:
        cacertfile:
          type: string
          description: "Trusted PEM format CA certificates bundle file.<br/><br/>The\
            \ certificates in this file are used to verify the TLS peer's certificates.<br/>Append\
            \ new certificates to the file if new CAs are to be trusted.<br/>There\
            \ is no need to restart EMQX to have the updated file loaded, because<br/>the\
            \ system regularly checks if file has been updated (and reload).<br/><br/>NOTE:\
            \ invalidating (deleting) a certificate from the file will not affect<br/>already\
            \ established connections."
          default: "${EMQX_ETC_DIR}/certs/cacert.pem"
        cacerts:
          type: boolean
          description: "When enabled, uses the system trusted CA certificates for\
            \ establishing to TLS connections."
          default: false
        certfile:
          type: string
          description: "PEM format certificates chain file.<br/><br/>The certificates\
            \ in this file should be in reversed order of the certificate<br/>issue\
            \ chain. That is, the host's certificate should be placed in the beginning<br/>of\
            \ the file, followed by the immediate issuer certificate and so on.<br/>Although\
            \ the root CA certificate is optional, it should be placed at the end\
            \ of<br/>the file if it is to be added."
          default: "${EMQX_ETC_DIR}/certs/cert.pem"
        keyfile:
          type: string
          description: PEM format private key file.
          default: "${EMQX_ETC_DIR}/certs/key.pem"
        verify:
          type: string
          description: Enable or disable peer verification.
          default: verify_none
          enum:
          - verify_peer
          - verify_none
        reuse_sessions:
          type: boolean
          description: Enable TLS session reuse.</br><br/>Has no effect when TLS version
            is configured (or negotiated) to 1.3
          default: true
        depth:
          minimum: 0
          type: integer
          description: "Maximum number of non-self-issued intermediate certificates\
            \ that can follow the peer certificate in a valid certification path.<br/>So,\
            \ if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/><br/>if\
            \ 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/><br/>if 2 the\
            \ path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA."
          default: 10
        password:
          type: string
          description: String containing the user's password. Only used if the private
            key file is password-protected.
          format: password
          example: ""
        versions:
          type: array
          description: "All TLS/DTLS versions to be supported.<br/><br/>NOTE: PSK\
            \ ciphers are suppressed by 'tlsv1.3' version config.<br/><br/>In case\
            \ PSK cipher suites are intended, make sure to configure<br/><code>['tlsv1.2',\
            \ 'tlsv1.1']</code> here."
          items:
            type: string
          default:
          - tlsv1.3
          - tlsv1.2
        ciphers:
          type: array
          description: "This config holds TLS cipher suite names separated by comma,<br/>or\
            \ as an array of strings. e.g.<br/><code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"\
            </code> or<br/><code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"\
            ]</code>.<br/><br/><br/>Ciphers (and their ordering) define the way in\
            \ which the<br/>client and server encrypts information over the network\
            \ connection.<br/>Selecting a good cipher suite is critical for the<br/>application's\
            \ data security, confidentiality and performance.<br/><br/>The names should\
            \ be in OpenSSL string format (not RFC format).<br/>All default values\
            \ and examples provided by EMQX config<br/>documentation are all in OpenSSL\
            \ format.<br/><br/><br/>NOTE: Certain cipher suites are only compatible\
            \ with<br/>specific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or\
            \ 'tlsv1.3')<br/>incompatible cipher suites will be silently dropped.<br/>For\
            \ instance, if only 'tlsv1.3' is given in the <code>versions</code>,<br/>configuring\
            \ cipher suites for other versions will have no effect.<br/><br/><br/><br/>NOTE:\
            \ PSK ciphers are suppressed by 'tlsv1.3' version config<br/><br/>If PSK\
            \ cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/><br/>PSK\
            \ cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,<br/>RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,<br/>RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,<br/>RSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"\
            </code>"
          items:
            type: string
          default: []
        secure_renegotiate:
          type: boolean
          description: "SSL parameter renegotiation is a feature that allows a client\
            \ and a server<br/>to renegotiate the parameters of the SSL connection\
            \ on the fly.<br/>RFC 5746 defines a more secure way of doing this. By\
            \ enabling secure renegotiation,<br/>you drop support for the insecure\
            \ renegotiation, prone to MitM attacks.</br><br/>Has no effect when TLS\
            \ version is configured (or negotiated) to 1.3"
          default: true
        log_level:
          type: string
          description: Log level for SSL communication. Default is 'notice'. Set to
            'debug' to inspect TLS handshake messages.
          default: notice
          enum:
          - emergency
          - alert
          - critical
          - error
          - warning
          - notice
          - info
          - debug
          - none
          - all
        hibernate_after:
          type: string
          description: Hibernate the SSL process after idling for amount of time reducing
            its memory footprint.
          example: 12m
          default: 5s
        dhfile:
          type: string
          description: "Path to a file containing PEM-encoded Diffie-Hellman parameters<br/>to\
            \ be used by the server if a cipher suite using Diffie-Hellman<br/>key\
            \ exchange is negotiated. If not specified, default parameters<br/>are\
            \ used.<br/><br/>NOTE: The <code>dhfile</code> option is not supported\
            \ by TLS 1.3."
        fail_if_no_peer_cert:
          type: boolean
          description: "Used together with {verify, verify_peer} by an TLS/DTLS server.<br/>If\
            \ set to true, the server fails if the client does not have a<br/>certificate\
            \ to send, that is, sends an empty certificate.<br/>If set to false, it\
            \ fails only if the client sends an invalid<br/>certificate (an empty\
            \ certificate is considered valid)."
          default: false
        honor_cipher_order:
          type: boolean
          description: "An important security setting, it forces the cipher to be\
            \ set based<br/> on the server-specified order instead of the client-specified\
            \ order,<br/> hence enforcing the (usually more properly configured) security<br/>\
            \ ordering of the server administrator."
          default: true
        client_renegotiation:
          type: boolean
          description: "In protocols that support client-initiated renegotiation,<br/>the\
            \ cost of resources of such an operation is higher for the server than\
            \ the client.<br/>This can act as a vector for denial of service attacks.<br/>The\
            \ SSL application already takes measures to counter-act such attempts,<br/>but\
            \ client-initiated renegotiation can be strictly disabled by setting this\
            \ option to false.<br/>The default value is true. Note that disabling\
            \ renegotiation can result in<br/>long-lived connections becoming unusable\
            \ due to limits on<br/>the number of messages the underlying cipher suite\
            \ can encipher.</br><br/>Has no effect when TLS version is configured\
            \ (or negotiated) to 1.3"
          default: true
        handshake_timeout:
          type: string
          description: Maximum time duration allowed for the handshake to complete
          example: 12m
          default: 15s
    plugins.running_status:
      type: object
      properties:
        node:
          type: string
          example: emqx@127.0.0.1
        status:
          type: string
          description: "Install plugin status at runtime<br/>1. running: plugin is\
            \ running.<br/>2. stopped: plugin is stopped.<br/>"
          enum:
          - running
          - stopped
      example:
        node: emqx@127.0.0.1
        status: running
    bridge_mqtt.creation_opts:
      type: object
      properties:
        worker_pool_size:
          maximum: 1024
          minimum: 1
          type: integer
          description: "The number of buffer workers. Only applicable for egress type\
            \ bridges.<br/>For bridges only have ingress direction data flow, it can\
            \ be set to 0 otherwise must be greater than 0."
          default: 16
        health_check_interval:
          type: string
          description: Health check interval.
          example: 32s
          default: 15s
        start_after_created:
          type: boolean
          description: Whether start the resource right after created.
          default: true
        start_timeout:
          type: string
          description: Time interval to wait for an auto-started resource to become
            healthy before responding resource creation requests.
          example: 32s
          default: 5s
        auto_restart_interval:
          deprecated: true
          oneOf:
          - type: string
            example: 32s
          - type: string
            enum:
            - infinity
          default: 15s
        query_mode:
          type: string
          description: "Query mode. Optional 'sync/async', default 'async'."
          default: async
          enum:
          - sync
          - async
        request_ttl:
          description: "Starting from the moment when the request enters the buffer,\
            \ if the request remains in the buffer for the specified time or is sent\
            \ but does not receive a response or acknowledgement in time, the request\
            \ is considered expired."
          oneOf:
          - type: string
            enum:
            - infinity
          - type: string
            example: 32s
          default: 45s
        inflight_window:
          minimum: 1
          type: integer
          description: "Query inflight window. When query_mode is set to async, this\
            \ config has to be set to 1 if messages from the same MQTT client have\
            \ to be strictly ordered."
          default: 100
        enable_queue:
          type: boolean
          description: "Enable disk buffer queue (only applicable for egress bridges).<br/>When\
            \ Enabled, messages will be buffered on disk when the bridge connection\
            \ is down.<br/>When disabled the messages are buffered in RAM only."
          deprecated: true
          default: false
        max_buffer_bytes:
          type: string
          description: Maximum number of bytes to buffer for each buffer worker.
          example: 32MB
          default: 256MB
    emqx_gateway_api.update_coap:
      type: object
      properties:
        heartbeat:
          type: string
          description: "The gateway server required minimum heartbeat interval.<br/>When\
            \ connection mode is enabled, this parameter is used to set the minimum\
            \ heartbeat interval for the connection to be alive"
          example: 12m
          default: 30s
        connection_required:
          type: boolean
          description: "Enable or disable connection mode.<br/>Connection mode is\
            \ a feature of non-standard protocols. When connection mode is enabled,\
            \ it is necessary to maintain the creation, authentication and alive of\
            \ connection resources"
          default: false
        notify_type:
          type: string
          description: "The Notification Message will be delivered to the CoAP client\
            \ if a new message received on an observed topic.<br/>The type of delivered\
            \ coap message can be set to:<br/><br/>  - non: Non-confirmable;<br/><br/>\
            \  - con: Confirmable;<br/><br/>  - qos: Mapping from QoS type of received\
            \ message, QoS0 -> non, QoS1,2 -> con"
          default: qos
          enum:
          - non
          - con
          - qos
        subscribe_qos:
          type: string
          description: "The Default QoS Level indicator for subscribe request.<br/>This\
            \ option specifies the QoS level for the CoAP Client when establishing\
            \ a subscription membership, if the subscribe request is not carried `qos`\
            \ option. The indicator can be set to:<br/><br/>  - qos0, qos1, qos2:\
            \ Fixed default QoS level<br/><br/>  - coap: Dynamic QoS level by the\
            \ message type of subscribe request<br/><br/>    * qos0: If the subscribe\
            \ request is non-confirmable<br/><br/>    * qos1: If the subscribe request\
            \ is confirmable"
          default: coap
          enum:
          - qos0
          - qos1
          - qos2
          - coap
        publish_qos:
          type: string
          description: "The Default QoS Level indicator for publish request.<br/>This\
            \ option specifies the QoS level for the CoAP Client when publishing a\
            \ message to EMQX PUB/SUB system, if the publish request is not carried\
            \ `qos` option. The indicator can be set to:<br/><br/>  - qos0, qos1,\
            \ qos2: Fixed default QoS level<br/><br/>  - coap: Dynamic QoS level by\
            \ the message type of publish request<br/><br/>    * qos0: If the publish\
            \ request is non-confirmable<br/><br/>    * qos1: If the publish request\
            \ is confirmable"
          default: coap
          enum:
          - qos0
          - qos1
          - qos2
          - coap
        mountpoint:
          type: string
          description: "When publishing or subscribing, prefix all topics with a mountpoint\
            \ string.<br/>The prefixed string will be removed from the topic name\
            \ when the message is delivered to the subscriber.<br/>The mountpoint\
            \ is a way that users can use to implement isolation of message routing\
            \ between different listeners.<br/>For example if a client A subscribes\
            \ to `t` with `listeners.tcp.\\<name>.mountpoint` set to `some_tenant`,<br/>then\
            \ the client actually subscribes to the topic `some_tenant/t`.<br/>Similarly,\
            \ if another client B (connected to the same listener as the client A)\
            \ sends a message to topic `t`,<br/>the message is routed to all the clients\
            \ subscribed `some_tenant/t`,<br/>so client A will receive the message,\
            \ with topic name `t`. Set to `\"\"` to disable the feature.<br/>Variables\
            \ in mountpoint string:<br/><br/>  - <code>${clientid}</code>: clientid<br/><br/>\
            \  - <code>${username}</code>: username"
          default: ""
        enable:
          type: boolean
          description: Whether to enable this gateway
          default: true
        enable_stats:
          type: boolean
          description: Whether to enable client process statistic
          default: true
        idle_timeout:
          type: string
          description: The idle time of the client connection process. It has two
            purposes:<br/>  1. A newly created client process that does not receive
            any client requests after that time will be closed directly.<br/>  2.
            A running client process that does not receive any client requests after
            this time will go into hibernation to save resources.
          example: 12m
          default: 30s
        clientinfo_override:
          $ref: '#/components/schemas/gateway.clientinfo_override'
    broker.mqtt:
      type: object
      properties:
        idle_timeout:
          description: "Configure the duration of time that a connection can remain\
            \ idle (i.e., without any data transfer) before being:<br/>  - Automatically\
            \ disconnected  if no CONNECT package is received from the client yet.<br/>\
            \  - Put into hibernation mode to save resources if some CONNECT packages\
            \ are already received.<br/>Note: Please set the parameter with caution\
            \ as long idle time will lead to resource waste."
          oneOf:
          - type: string
            example: 12m
          - type: string
            enum:
            - infinity
          default: 15s
        max_packet_size:
          type: string
          description: Maximum MQTT packet size allowed.
          example: 32MB
          default: 1MB
        max_clientid_len:
          maximum: 65535
          minimum: 23
          type: integer
          description: Maximum allowed length of MQTT Client ID.
          default: 65535
        max_topic_levels:
          maximum: 65535
          minimum: 1
          type: integer
          description: Maximum topic levels allowed.
          default: 128
        max_topic_alias:
          maximum: 65535
          minimum: 0
          type: integer
          description: "Maximum topic alias, 0 means no topic alias supported."
          default: 65535
        retain_available:
          type: boolean
          description: Whether to enable support for MQTT retained message.
          default: true
        wildcard_subscription:
          type: boolean
          description: Whether to enable support for MQTT wildcard subscription.
          default: true
        shared_subscription:
          type: boolean
          description: Whether to enable support for MQTT shared subscription.
          default: true
        shared_subscription_strategy:
          type: string
          description: "Dispatch strategy for shared subscription.<br/>  - `random`:\
            \ dispatch the message to a random selected subscriber<br/>  - `round_robin`:\
            \ select the subscribers in a round-robin manner<br/>  - `round_robin_per_group`:\
            \ select the subscribers in round-robin fashion within each shared subscriber\
            \ group<br/>  - `local`: select random local subscriber otherwise select\
            \ random cluster-wide<br/>  - `sticky`: always use the last selected subscriber\
            \ to dispatch, until the subscriber disconnects.<br/>  - `hash_clientid`:\
            \ select the subscribers by hashing the `clientIds`<br/>  - `hash_topic`:\
            \ select the subscribers by hashing the source topic"
          default: round_robin
          enum:
          - random
          - round_robin
          - round_robin_per_group
          - sticky
          - local
          - hash_topic
          - hash_clientid
        exclusive_subscription:
          type: boolean
          description: Whether to enable support for MQTT exclusive subscription.
          default: false
        ignore_loop_deliver:
          type: boolean
          description: "Whether the messages sent by the MQTT v3.1.1/v3.1.0 client\
            \ will be looped back to the publisher itself, similar to <code>No Local</code>\
            \ in MQTT 5.0."
          default: false
        strict_mode:
          type: boolean
          description: "Whether to parse MQTT messages in strict mode.<br/>In strict\
            \ mode, invalid utf8 strings in for example client ID, topic name, etc.\
            \ will cause the client to be disconnected."
          default: false
        response_information:
          type: string
          description: "UTF-8 string, for creating the response topic, for example,\
            \ if set to <code>reqrsp/</code>, the publisher/subscriber will communicate\
            \ using the topic prefix <code>reqrsp/</code>.<br/>To disable this feature,\
            \ input <code>\"\"</code> in the text box below. Only applicable to MQTT\
            \ 5.0 clients."
          default: ""
        server_keepalive:
          description: "The keep alive duration required by EMQX. To use the setting\
            \ from the client side, choose disabled from the drop-down list. Only\
            \ applicable to MQTT 5.0 clients."
          oneOf:
          - type: string
            enum:
            - disabled
          - minimum: 1
            type: integer
          default: disabled
        keepalive_multiplier:
          type: number
          description: "Keep-Alive Timeout = Keep-Alive interval × Keep-Alive Multiplier.<br/>The\
            \ default value 1.5 is following the MQTT 5.0 specification. This multiplier\
            \ is adjustable, providing system administrators flexibility for tailoring\
            \ to their specific needs. For instance, if a client's 10-second Keep-Alive\
            \ interval PINGREQ gets delayed by an extra 10 seconds, changing the multiplier\
            \ to 2 lets EMQX tolerate this delay."
          default: 1.5
        retry_interval:
          type: string
          description: Retry interval for QoS 1/2 message delivering.
          example: 12m
          default: 30s
        use_username_as_clientid:
          type: boolean
          description: Whether to use Username as Client ID.<br/>This setting takes
            effect later than <code>Use Peer Certificate as Username</code> and <code>Use
            peer certificate as Client ID</code>.
          default: false
        peer_cert_as_username:
          type: string
          description: "Use the CN, DN field in the peer certificate or the entire\
            \ certificate content as Username. Only works for the TLS connection.<br/>Supported\
            \ configurations are the following:<br/>- <code>cn</code>: CN field of\
            \ the certificate<br/>- <code>dn</code>: DN field of the certificate<br/>-\
            \ <code>crt</code>: Content of the <code>DER</code> or <code>PEM</code>\
            \ certificate<br/>- <code>pem</code>: Convert <code>DER</code> certificate\
            \ content to <code>PEM</code> format and use as Username<br/>- <code>md5</code>:\
            \ MD5 value of the <code>DER</code> or <code>PEM</code> certificate"
          default: disabled
          enum:
          - disabled
          - cn
          - dn
          - crt
          - pem
          - md5
        peer_cert_as_clientid:
          type: string
          description: "Use the CN, DN field in the peer certificate or the entire\
            \ certificate content as Client ID. Only works for the TLS connection.<br/>Supported\
            \ configurations are the following:<br/>- <code>cn</code>: CN field of\
            \ the certificate<br/>- <code>dn</code>: DN field of the certificate<br/>-\
            \ <code>crt</code>: <code>DER</code> or <code>PEM</code> certificate<br/>-\
            \ <code>pem</code>: Convert <code>DER</code> certificate content to <code>PEM</code>\
            \ format and use as Client ID<br/>- <code>md5</code>: MD5 value of the\
            \ <code>DER</code> or <code>PEM</code> certificate"
          default: disabled
          enum:
          - disabled
          - cn
          - dn
          - crt
          - pem
          - md5
        session_expiry_interval:
          type: string
          description: "Specifies how long the session will expire after the connection\
            \ is disconnected, only for non-MQTT 5.0 connections."
          example: 12m
          default: 2h
        max_awaiting_rel:
          description: "For each publisher session, the maximum number of outstanding\
            \ QoS 2 messages pending on the client to send PUBREL. After reaching\
            \ this limit, new QoS 2 PUBLISH requests will be rejected with `147(0x93)`\
            \ until either PUBREL is received or timed out."
          oneOf:
          - type: string
            enum:
            - infinity
          - minimum: 0
            type: integer
          default: 100
        max_qos_allowed:
          maximum: 2
          minimum: 0
          type: integer
          description: Maximum QoS allowed.
          example: 0
          default: 2
        mqueue_priorities:
          description: "Topic priorities. Priority number [1-255]<br/>There's no priority\
            \ table by default, hence all messages are treated equal.<br/><br/>**NOTE**:\
            \ Comma and equal signs are not allowed for priority topic names.<br/>**NOTE**:\
            \ Messages for topics not in the priority table are treated as either\
            \ highest or lowest priority depending on the configured value for <code>mqtt.mqueue_default_priority</code>.<br/><br/>**Examples**:<br/>To\
            \ configure <code>\"topic/1\" > \"topic/2\"</code>:<br/><code>mqueue_priorities:\
            \ {\"topic/1\": 10, \"topic/2\": 8}</code>"
          oneOf:
          - type: object
            example: {}
          - type: string
            enum:
            - disabled
          default: disabled
        mqueue_default_priority:
          type: string
          description: "Default topic priority, which will be used by topics not in\
            \ <code>Topic Priorities</code> (<code>mqueue_priorities</code>)."
          default: lowest
          enum:
          - highest
          - lowest
        mqueue_store_qos0:
          type: boolean
          description: Specifies whether to store QoS 0 messages in the message queue
            while the connection is down but the session remains.
          default: true
        max_mqueue_len:
          description: "Maximum queue length. Enqueued messages when persistent client\
            \ disconnected, or inflight window is full."
          oneOf:
          - type: string
            enum:
            - infinity
          - minimum: 0
            type: integer
          default: 1000
        max_inflight:
          maximum: 65535
          minimum: 1
          type: integer
          description: Maximum number of QoS 1 and QoS 2 messages that are allowed
            to be delivered simultaneously before completing the acknowledgment.
          default: 32
        max_subscriptions:
          description: Maximum number of subscriptions allowed per client.
          oneOf:
          - type: string
            enum:
            - infinity
          - minimum: 1
            type: integer
          default: infinity
        upgrade_qos:
          type: boolean
          description: Force upgrade of QoS level according to subscription.
          default: false
        await_rel_timeout:
          type: string
          description: "For client to broker QoS 2 message, the time limit for the\
            \ broker to wait before the `PUBREL` message is received. The wait is\
            \ aborted after timed out, meaning the packet ID is freed for new `PUBLISH`\
            \ requests. Receiving a stale `PUBREL` causes a warning level log. Note,\
            \ the message is delivered to subscribers before entering the wait for\
            \ PUBREL."
          example: 12m
          default: 300s
      example:
        retain_available: true
        max_mqueue_len: ""
        peer_cert_as_clientid: disabled
        max_packet_size: 32MB
        max_inflight: 36944
        session_expiry_interval: 12m
        exclusive_subscription: false
        ignore_loop_deliver: false
        await_rel_timeout: 12m
        strict_mode: false
        idle_timeout: ""
        retry_interval: 12m
        peer_cert_as_username: disabled
        upgrade_qos: false
        max_topic_alias: 9606
        max_clientid_len: 5269
        use_username_as_clientid: false
        shared_subscription_strategy: round_robin
        response_information: response_information
        max_subscriptions: ""
        max_qos_allowed: 0
        mqueue_default_priority: lowest
        server_keepalive: ""
        keepalive_multiplier: 5.962133916683182377482808078639209270477294921875
        mqueue_store_qos0: true
        mqueue_priorities: ""
        max_topic_levels: 39501
        max_awaiting_rel: ""
        wildcard_subscription: true
        shared_subscription: true
    emqx_mgmt_api_publish.publish_message:
      required:
      - payload
      - topic
      type: object
      properties:
        payload_encoding:
          type: string
          description: "MQTT Payload Encoding, <code>base64</code> or <code>plain</code>.\
            \ When set to <code>base64</code>, the message is decoded before it is\
            \ published."
          default: plain
          enum:
          - plain
          - base64
        topic:
          type: string
          description: Topic Name
          example: api/example/topic
        qos:
          maximum: 2
          minimum: 0
          type: integer
          description: MQTT message QoS
          example: 0
          default: 0
        clientid:
          type: string
          deprecated: true
        payload:
          type: string
          description: The MQTT message payload.
          example: hello emqx api
        properties:
          $ref: '#/components/schemas/emqx_mgmt_api_publish.message_properties'
        retain:
          type: boolean
          description: A boolean field to indicate if this message should be retained.
          default: false
    emqx_mgmt_api_clients.subscribe:
      required:
      - topic
      type: object
      properties:
        topic:
          type: string
          description: Topic
          example: testtopic/#
        qos:
          maximum: 2
          minimum: 0
          type: integer
          description: QoS
          example: 0
          default: 0
        nl:
          type: integer
          description: No Local
          default: 0
        rap:
          type: integer
          description: Retain as Published
          default: 0
        rh:
          type: integer
          description: Retain Handling
          default: 0
    emqx_authn_api.response_users:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/emqx_authn_api.response_user'
        meta:
          $ref: '#/components/schemas/public.meta'
      example:
        data:
        - is_superuser: false
          user_id: user_id
        - is_superuser: false
          user_id: user_id
        meta:
          limit: 50
          count: 0
          page: 1
          hasnext: true
    emqx_gateway_api.tcp_listener:
      type: object
      properties:
        id:
          type: string
          description: Listener ID
        type:
          type: string
          description: Listener Type
          enum:
          - tcp
        name:
          type: string
          description: Listener Name
        running:
          type: boolean
          description: Listener Running status
        acceptors:
          type: integer
          description: Size of the acceptor pool.
          default: 16
        tcp_options:
          $ref: '#/components/schemas/broker.tcp_opts'
        proxy_protocol:
          type: boolean
          description: "Enable the Proxy Protocol V1/2 if the EMQX cluster is deployed\
            \ behind HAProxy or Nginx.<br/>See: https://www.haproxy.com/blog/haproxy/proxy-protocol/"
          default: false
        proxy_protocol_timeout:
          type: string
          description: Timeout for proxy protocol.<br/>EMQX will close the TCP connection
            if proxy protocol packet is not received within the timeout.
          example: 12m
          default: 15s
        enable:
          type: boolean
          description: Enable the listener.
          default: true
        bind:
          type: string
          description: The IP address and port that the listener will bind.
          example: 127.0.0.1:80
        max_connections:
          description: Maximum number of concurrent connections.
          oneOf:
          - type: string
            enum:
            - infinity
          - minimum: 1
            type: integer
          default: 1024
        max_conn_rate:
          type: integer
          description: Maximum connections per second.
          default: 1000
        enable_authn:
          type: boolean
          description: Set <code>true</code> (default) to enable client authentication
            on this listener. <br/>When set to <code>false</code> clients will be
            allowed to connect without authentication.
          default: true
        mountpoint:
          type: string
          description: "When publishing or subscribing, prefix all topics with a mountpoint\
            \ string.<br/>The prefixed string will be removed from the topic name\
            \ when the message is delivered to the subscriber.<br/>The mountpoint\
            \ is a way that users can use to implement isolation of message routing\
            \ between different listeners.<br/>For example if a client A subscribes\
            \ to `t` with `listeners.tcp.\\<name>.mountpoint` set to `some_tenant`,<br/>then\
            \ the client actually subscribes to the topic `some_tenant/t`.<br/>Similarly,\
            \ if another client B (connected to the same listener as the client A)\
            \ sends a message to topic `t`,<br/>the message is routed to all the clients\
            \ subscribed `some_tenant/t`,<br/>so client A will receive the message,\
            \ with topic name `t`. Set to `\"\"` to disable the feature.<br/>Variables\
            \ in mountpoint string:<br/><br/>  - <code>${clientid}</code>: clientid<br/><br/>\
            \  - <code>${username}</code>: username"
        access_rules:
          type: array
          description: "The access control rules for this listener.<br/>See: https://github.com/emqtt/esockd#allowdeny"
          items:
            type: string
          default: []
    emqx_conf_schema.log:
      type: object
      properties:
        console:
          $ref: '#/components/schemas/emqx_conf_schema.console_handler'
        file:
          description: File-based log handlers.
          oneOf:
          - type: object
            properties:
              $handler_name:
                $ref: '#/components/schemas/emqx_conf_schema.log_file_handler'
          - $ref: '#/components/schemas/emqx_conf_schema.log_file_handler'
          default:
            level: warning
      example:
        console:
          formatter: text
          time_offset: system
          level: warning
          enable: true
        file: ""
    emqx_authz_api_schema.http_get:
      required:
      - method
      - type
      - url
      type: object
      properties:
        method:
          type: string
          description: HTTP method.
          default: get
          enum:
          - get
        headers:
          type: object
          description: List of HTTP headers (without <code>content-type</code>).
          example: {}
          default:
            accept: application/json
            cache-control: no-cache
            connection: keep-alive
            keep-alive: "timeout=30, max=1000"
        enable:
          type: boolean
          description: Set to <code>true</code> or <code>false</code> to disable this
            ACL provider.
          default: true
        type:
          type: string
          description: Backend type.
          default: http
          enum:
          - http
        url:
          type: string
          description: URL of the auth server.
        body:
          type: object
          description: HTTP request body.
          example: {}
        request_timeout:
          type: string
          description: Request timeout.
          default: 30s
        connect_timeout:
          type: string
          description: The timeout when connecting to the HTTP server.
          example: 32s
          default: 15s
        enable_pipelining:
          minimum: 1
          type: integer
          description: "A positive integer. Whether to send HTTP requests continuously,\
            \ when set to 1, it means that after each HTTP request is sent, you need\
            \ to wait for the server to return and then continue to send the next\
            \ request."
          default: 100
        max_retries:
          minimum: 0
          type: integer
          deprecated: true
        pool_size:
          minimum: 1
          type: integer
          description: The pool size.
          default: 8
        request:
          $ref: '#/components/schemas/connector-http.request'
        retry_interval:
          type: string
          example: 12m
          deprecated: true
        ssl:
          $ref: '#/components/schemas/broker.ssl_client_opts'
    emqx_mgmt_api_clients.unsubscribe:
      type: object
      properties:
        topic:
          type: string
          description: Topic
          example: testtopic/#
    emqx_mgmt_api_metrics.node_metrics:
      type: object
      properties:
        node:
          type: string
          description: Node name
        actions.failure:
          minimum: 0
          type: integer
          description: Number of failure executions of the rule engine action
        actions.success:
          minimum: 0
          type: integer
          description: Number of successful executions of the rule engine action
        bytes.received:
          minimum: 0
          type: integer
          description: 'Number of bytes received '
        bytes.sent:
          minimum: 0
          type: integer
          description: Number of bytes sent on this connection
        client.auth.anonymous:
          minimum: 0
          type: integer
          description: Number of clients who log in anonymously
        client.authenticate:
          minimum: 0
          type: integer
          description: Number of client authentications
        client.check_authz:
          minimum: 0
          type: integer
          description: Number of Authorization rule checks
        client.connack:
          minimum: 0
          type: integer
          description: Number of CONNACK packet sent
        client.connect:
          minimum: 0
          type: integer
          description: Number of client connections
        client.connected:
          minimum: 0
          type: integer
          description: Number of successful client connections
        client.disconnected:
          minimum: 0
          type: integer
          description: Number of client disconnects
        client.subscribe:
          minimum: 0
          type: integer
          description: Number of client subscriptions
        client.unsubscribe:
          minimum: 0
          type: integer
          description: Number of client unsubscriptions
        delivery.dropped:
          minimum: 0
          type: integer
          description: Total number of discarded messages when sending
        delivery.dropped.expired:
          minimum: 0
          type: integer
          description: Number of messages dropped due to message expiration on sending
        delivery.dropped.no_local:
          minimum: 0
          type: integer
          description: Number of messages that were dropped due to the No Local subscription
            option when sending
        delivery.dropped.qos0_msg:
          minimum: 0
          type: integer
          description: Number of messages with QoS 0 that were dropped because the
            message queue was full when sending
        delivery.dropped.queue_full:
          minimum: 0
          type: integer
          description: Number of messages with a non-zero QoS that were dropped because
            the message queue was full when sending
        delivery.dropped.too_large:
          minimum: 0
          type: integer
          description: The number of messages that were dropped because the length
            exceeded the limit when sending
        messages.acked:
          minimum: 0
          type: integer
          description: Number of received PUBACK and PUBREC packet
        messages.delayed:
          minimum: 0
          type: integer
          description: Number of delay-published messages
        messages.delivered:
          minimum: 0
          type: integer
          description: Number of messages forwarded to the subscription process internally
        messages.dropped:
          minimum: 0
          type: integer
          description: Total number of messages dropped before forwarding to the subscription
            process
        messages.dropped.await_pubrel_timeout:
          minimum: 0
          type: integer
          description: Number of messages dropped due to waiting PUBREL timeout
        messages.dropped.no_subscribers:
          minimum: 0
          type: integer
          description: Number of messages dropped due to no subscribers
        messages.forward:
          minimum: 0
          type: integer
          description: Number of messages forwarded to other nodes
        messages.publish:
          minimum: 0
          type: integer
          description: Number of messages published in addition to system messages
        messages.qos0.received:
          minimum: 0
          type: integer
          description: Number of QoS 0 messages received from clients
        messages.qos0.sent:
          minimum: 0
          type: integer
          description: Number of QoS 0 messages sent to clients
        messages.qos1.received:
          minimum: 0
          type: integer
          description: Number of QoS 1 messages received from clients
        messages.qos1.sent:
          minimum: 0
          type: integer
          description: Number of QoS 1 messages sent to clients
        messages.qos2.received:
          minimum: 0
          type: integer
          description: Number of QoS 2 messages received from clients
        messages.qos2.sent:
          minimum: 0
          type: integer
          description: Number of QoS 2 messages sent to clients
        messages.received:
          minimum: 0
          type: integer
          description: "Number of messages received from the client, equal to the\
            \ sum of messages.qos0.received\fmessages.qos1.received and messages.qos2.received"
        messages.retained:
          minimum: 0
          type: integer
          description: Number of retained messages
        messages.sent:
          minimum: 0
          type: integer
          description: "Number of messages sent to the client, equal to the sum of\
            \ messages.qos0.sent\fmessages.qos1.sent and messages.qos2.sent"
        packets.auth.received:
          minimum: 0
          type: integer
          description: Number of received AUTH packet
        packets.auth.sent:
          minimum: 0
          type: integer
          description: Number of sent AUTH packet
        packets.connack.auth_error:
          minimum: 0
          type: integer
          description: Number of received CONNECT packet with failed authentication
        packets.connack.error:
          minimum: 0
          type: integer
          description: Number of received CONNECT packet with unsuccessful connections
        packets.connack.sent:
          minimum: 0
          type: integer
          description: Number of sent CONNACK packet
        packets.connect.received:
          minimum: 0
          type: integer
          description: Number of received CONNECT packet
        packets.disconnect.received:
          minimum: 0
          type: integer
          description: Number of received DISCONNECT packet
        packets.disconnect.sent:
          minimum: 0
          type: integer
          description: Number of sent DISCONNECT packet
        packets.pingreq.received:
          minimum: 0
          type: integer
          description: Number of received PINGREQ packet
        packets.pingresp.sent:
          minimum: 0
          type: integer
          description: Number of sent PUBRESP packet
        packets.puback.inuse:
          minimum: 0
          type: integer
          description: Number of received PUBACK packet with occupied identifiers
        packets.puback.missed:
          minimum: 0
          type: integer
          description: Number of received packet with identifiers.
        packets.puback.received:
          minimum: 0
          type: integer
          description: Number of received PUBACK packet
        packets.puback.sent:
          minimum: 0
          type: integer
          description: Number of sent PUBACK packet
        packets.pubcomp.inuse:
          minimum: 0
          type: integer
          description: Number of received PUBCOMP packet with occupied identifiers
        packets.pubcomp.missed:
          minimum: 0
          type: integer
          description: Number of missed PUBCOMP packet
        packets.pubcomp.received:
          minimum: 0
          type: integer
          description: Number of received PUBCOMP packet
        packets.pubcomp.sent:
          minimum: 0
          type: integer
          description: Number of sent PUBCOMP packet
        packets.publish.auth_error:
          minimum: 0
          type: integer
          description: Number of received PUBLISH packets with failed the Authorization
            check
        packets.publish.dropped:
          minimum: 0
          type: integer
          description: Number of messages discarded due to the receiving limit
        packets.publish.error:
          minimum: 0
          type: integer
          description: Number of received PUBLISH packet that cannot be published
        packets.publish.inuse:
          minimum: 0
          type: integer
          description: Number of received PUBLISH packet with occupied identifiers
        packets.publish.received:
          minimum: 0
          type: integer
          description: Number of received PUBLISH packet
        packets.publish.sent:
          minimum: 0
          type: integer
          description: Number of sent PUBLISH packet
        packets.pubrec.inuse:
          minimum: 0
          type: integer
          description: Number of received PUBREC packet with occupied identifiers
        packets.pubrec.missed:
          minimum: 0
          type: integer
          description: Number of received PUBREC packet with unknown identifiers
        packets.pubrec.received:
          minimum: 0
          type: integer
          description: Number of received PUBREC packet
        packets.pubrec.sent:
          minimum: 0
          type: integer
          description: Number of sent PUBREC packet
        packets.pubrel.missed:
          minimum: 0
          type: integer
          description: Number of received PUBREC packet with unknown identifiers
        packets.pubrel.received:
          minimum: 0
          type: integer
          description: Number of received PUBREL packet
        packets.pubrel.sent:
          minimum: 0
          type: integer
          description: Number of sent PUBREL packet
        packets.received:
          minimum: 0
          type: integer
          description: Number of received packet
        packets.sent:
          minimum: 0
          type: integer
          description: Number of sent packet
        packets.suback.sent:
          minimum: 0
          type: integer
          description: Number of sent SUBACK packet
        packets.subscribe.auth_error:
          minimum: 0
          type: integer
          description: Number of received SUBACK packet with failed Authorization
            check
        packets.subscribe.error:
          minimum: 0
          type: integer
          description: Number of received SUBSCRIBE packet with failed subscriptions
        packets.subscribe.received:
          minimum: 0
          type: integer
          description: Number of received SUBSCRIBE packet
        packets.unsuback.sent:
          minimum: 0
          type: integer
          description: Number of sent UNSUBACK packet
        packets.unsubscribe.error:
          minimum: 0
          type: integer
          description: Number of received UNSUBSCRIBE packet with failed unsubscriptions
        packets.unsubscribe.received:
          minimum: 0
          type: integer
          description: Number of received UNSUBSCRIBE packet
        rules.matched:
          minimum: 0
          type: integer
          description: Number of rule matched
        session.created:
          minimum: 0
          type: integer
          description: Number of sessions created
        session.discarded:
          minimum: 0
          type: integer
          description: Number of sessions dropped because Clean Session or Clean Start
            is true
        session.resumed:
          minimum: 0
          type: integer
          description: Number of sessions resumed because Clean Session or Clean Start
            is false
        session.takenover:
          minimum: 0
          type: integer
          description: Number of sessions takenover because Clean Session or Clean
            Start is false
        session.terminated:
          minimum: 0
          type: integer
          description: Number of terminated sessions
      example:
        messages.qos0.received: 0
        delivery.dropped: 0
        packets.puback.sent: 0
        client.authenticate: 0
        delivery.dropped.too_large: 0
        messages.acked: 0
        packets.publish.inuse: 0
        packets.subscribe.error: 0
        packets.publish.received: 0
        messages.sent: 0
        messages.retained: 0
        packets.pubrel.sent: 0
        packets.publish.dropped: 0
        messages.dropped.await_pubrel_timeout: 0
        packets.publish.error: 0
        packets.pubcomp.sent: 0
        client.connect: 0
        packets.unsubscribe.error: 0
        packets.suback.sent: 0
        client.subscribe: 0
        packets.puback.inuse: 0
        session.created: 0
        packets.publish.sent: 0
        bytes.received: 0
        messages.qos0.sent: 0
        packets.pubcomp.received: 0
        packets.auth.received: 0
        packets.pubrec.received: 0
        packets.disconnect.received: 0
        packets.unsuback.sent: 0
        packets.subscribe.received: 0
        session.discarded: 0
        session.terminated: 0
        packets.pingreq.received: 0
        delivery.dropped.expired: 0
        packets.puback.received: 0
        session.takenover: 0
        node: node
        packets.pubrec.inuse: 0
        packets.pingresp.sent: 0
        messages.dropped.no_subscribers: 0
        packets.sent: 0
        messages.received: 0
        packets.connack.sent: 0
        delivery.dropped.queue_full: 0
        packets.subscribe.auth_error: 0
        packets.pubcomp.inuse: 0
        packets.pubrel.missed: 0
        packets.disconnect.sent: 0
        packets.publish.auth_error: 0
        packets.received: 0
        messages.publish: 0
        packets.connect.received: 0
        client.auth.anonymous: 0
        messages.delayed: 0
        messages.qos2.sent: 0
        actions.failure: 0
        packets.pubcomp.missed: 0
        actions.success: 0
        session.resumed: 0
        packets.pubrec.sent: 0
        client.disconnected: 0
        packets.connack.error: 0
        packets.unsubscribe.received: 0
        client.connected: 0
        client.connack: 0
        packets.pubrec.missed: 0
        client.check_authz: 0
        messages.dropped: 0
        messages.forward: 0
        messages.qos1.received: 0
        packets.puback.missed: 0
        messages.delivered: 0
        bytes.sent: 0
        messages.qos2.received: 0
        messages.qos1.sent: 0
        packets.auth.sent: 0
        client.unsubscribe: 0
        delivery.dropped.no_local: 0
        packets.connack.auth_error: 0
        delivery.dropped.qos0_msg: 0
        rules.matched: 0
        packets.pubrel.received: 0
    listeners.quic_not_required_bind:
      required:
      - id
      - type
      type: object
      properties:
        type:
          type: string
          description: Listener type
          enum:
          - quic
        running:
          type: boolean
          description: Listener status
        id:
          type: string
          description: Listener id
        current_connections:
          minimum: 0
          type: integer
          description: Current connections
        bind:
          type: string
          description: IP address and port for the listening socket.
          example: 127.0.0.1:80
          default: "14567"
        ciphers:
          type: array
          description: "This config holds TLS cipher suite names separated by comma,<br/>or\
            \ as an array of strings. e.g.<br/><code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"\
            </code> or<br/><code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"\
            ]</code>.<br/><br/><br/>Ciphers (and their ordering) define the way in\
            \ which the<br/>client and server encrypts information over the network\
            \ connection.<br/>Selecting a good cipher suite is critical for the<br/>application's\
            \ data security, confidentiality and performance.<br/><br/>The names should\
            \ be in OpenSSL string format (not RFC format).<br/>All default values\
            \ and examples provided by EMQX config<br/>documentation are all in OpenSSL\
            \ format.<br/><br/><br/>NOTE: Certain cipher suites are only compatible\
            \ with<br/>specific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or\
            \ 'tlsv1.3')<br/>incompatible cipher suites will be silently dropped.<br/>For\
            \ instance, if only 'tlsv1.3' is given in the <code>versions</code>,<br/>configuring\
            \ cipher suites for other versions will have no effect.<br/><br/><br/><br/>NOTE:\
            \ PSK ciphers are suppressed by 'tlsv1.3' version config<br/><br/>If PSK\
            \ cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/><br/>PSK\
            \ cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,<br/>RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,<br/>RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,<br/>RSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"\
            </code><br/><br/><br/>NOTE: QUIC listener supports only 'tlsv1.3' ciphers"
          items:
            type: string
          default:
          - TLS_AES_256_GCM_SHA384
          - TLS_AES_128_GCM_SHA256
          - TLS_CHACHA20_POLY1305_SHA256
        ssl_options:
          $ref: '#/components/schemas/broker.listener_quic_ssl_opts'
        enable:
          type: boolean
          description: Enable listener.
          default: true
        acceptors:
          minimum: 1
          type: integer
          description: The size of the listener's receiving pool.
          default: 16
        max_connections:
          description: The maximum number of concurrent connections allowed by the
            listener.
          oneOf:
          - minimum: 1
            type: integer
          - type: string
            enum:
            - infinity
          default: infinity
        mountpoint:
          type: string
          description: "When publishing or subscribing, prefix all topics with a mountpoint\
            \ string.<br/>The prefixed string will be removed from the topic name\
            \ when the message<br/>is delivered to the subscriber. The mountpoint\
            \ is a way that users can use<br/>to implement isolation of message routing\
            \ between different listeners.<br/>For example if a client A subscribes\
            \ to `t` with `listeners.tcp.\\<name>.mountpoint`<br/>set to `some_tenant`,\
            \ then the client actually subscribes to the topic<br/>`some_tenant/t`.\
            \ Similarly, if another client B (connected to the same listener<br/>as\
            \ the client A) sends a message to topic `t`, the message is routed<br/>to\
            \ all the clients subscribed `some_tenant/t`, so client A will receive\
            \ the<br/>message, with topic name `t`.<br/><br/>Set to `\"\"` to disable\
            \ the feature.<br/><br/><br/>Variables in mountpoint string:<br/>  - <code>${clientid}</code>:\
            \ clientid<br/>  - <code>${username}</code>: username"
          default: ""
        enable_authn:
          type: string
          description: "Set <code>true</code> (default) to enable client authentication\
            \ on this listener, the authentication<br/>process goes through the configured\
            \ authentication chain.<br/>When set to <code>false</code> to allow any\
            \ clients with or without authentication information such as username\
            \ or password to log in.<br/>When set to <code>quick_deny_anonymous</code>,\
            \ it behaves like when set to <code>true</code>, but clients will be<br/>denied\
            \ immediately without going through any authenticators if <code>username</code>\
            \ is not provided. This is useful to fence off<br/>anonymous clients early."
          default: "true"
          enum:
          - "true"
          - "false"
          - quick_deny_anonymous
        max_conn_rate:
          type: string
          description: "Maximum connection rate.<br/><br/>This is used to limit the\
            \ connection rate for this listener,<br/>once the limit is reached, new\
            \ connections will be deferred or refused"
          example: 1000/s
        messages_rate:
          type: string
          description: "Messages publish rate.<br/><br/>This is used to limit the\
            \ inbound message numbers for each client connected to this listener,<br/>once\
            \ the limit is reached, the restricted client will slow down and even\
            \ be hung for a while."
          example: 1000/s
        bytes_rate:
          type: string
          description: "Data publish rate.<br/><br/>This is used to limit the inbound\
            \ bytes rate for each client connected to this listener,<br/>once the\
            \ limit is reached, the restricted client will slow down and even be hung\
            \ for a while."
          example: 100MB/s
    retainer.message:
      type: object
      properties:
        payload:
          type: string
          description: Payload.
        msgid:
          type: string
          description: Message ID.
        topic:
          type: string
          description: Topic.
        qos:
          maximum: 2
          minimum: 0
          type: integer
          description: QoS.
          example: 0
        publish_at:
          type: string
          description: "Message publish time, RFC 3339 format."
        from_clientid:
          type: string
          description: The clientid of publisher.
        from_username:
          type: string
          description: The username of publisher.
      example:
        from_clientid: from_clientid
        qos: 0
        payload: payload
        from_username: from_username
        msgid: msgid
        topic: topic
        publish_at: publish_at
    emqx_authn_schema.node_status:
      type: object
      properties:
        node:
          type: string
          description: Node name.
          example: emqx@127.0.0.1
        status:
          type: string
          description: The status of the resource for each node.
          enum:
          - connected
          - disconnected
          - connecting
      example:
        node: emqx@127.0.0.1
        status: connected
    exhook.server_config:
      required:
      - name
      - url
      type: object
      properties:
        name:
          type: string
          description: Name of the exhook server
          example: default
        enable:
          type: boolean
          description: Enable this Exhook server
          default: true
        url:
          type: string
          description: URL of the gRPC server
          example: http://127.0.0.1:9000
        request_timeout:
          type: string
          description: The timeout of request gRPC server
          example: 12m
          default: 5s
        failed_action:
          type: string
          description: The value that is returned when the request to the gRPC server
            fails for any reason
          default: deny
          enum:
          - deny
          - ignore
        ssl:
          $ref: '#/components/schemas/exhook.ssl_conf'
        socket_options:
          $ref: '#/components/schemas/exhook.socket_options'
        auto_reconnect:
          description: "Whether to automatically reconnect (initialize) the gRPC server.<br/>When\
            \ gRPC is not available, Exhook tries to request the gRPC service at that\
            \ interval and reinitialize the list of mounted hooks."
          oneOf:
          - type: string
            example: 12m
          - type: string
            enum:
            - "false"
          default: 60s
        pool_size:
          minimum: 1
          type: integer
          description: The process pool size for gRPC client
          default: 8
    emqx_rule_api_schema.ctx_sub:
      required:
      - event_type
      type: object
      properties:
        event_type:
          type: string
          description: Event Type
          enum:
          - session_subscribed
        clientid:
          type: string
          description: The Client ID
        username:
          type: string
          description: Username
        payload:
          type: string
          description: The Message Payload
        peerhost:
          type: string
          description: The IP Address of the Peer Client
        topic:
          type: string
          description: Message Topic
        publish_received_at:
          type: integer
          description: The Time that this Message is Received
        qos:
          maximum: 2
          minimum: 0
          type: integer
          description: The Message QoS
          example: 0
    gateway.clientinfo_override:
      type: object
      properties:
        username:
          type: string
          description: Template for overriding username.
        password:
          type: string
          description: Template for overriding password.
          format: password
        clientid:
          type: string
          description: Template for overriding clientid.
    emqx_rule_api_schema.rule_events:
      required:
      - event
      type: object
      properties:
        event:
          type: string
          description: The event topics
          enum:
          - $events/client_connected
          - $events/client_disconnected
          - $events/client_connack
          - $events/client_check_authz_complete
          - $events/session_subscribed
          - $events/session_unsubscribed
          - $events/message_delivered
          - $events/message_acked
          - $events/message_dropped
          - $events/delivery_dropped
        title:
          type: string
          description: The title
          example: some title
        description:
          type: string
          description: The description
          example: some desc
        columns:
          type: object
          description: The columns
          example: {}
        test_columns:
          type: object
          description: The test columns
          example: {}
        sql_example:
          type: string
          description: The sql_example
      example:
        sql_example: sql_example
        test_columns: {}
        columns: {}
        description: some desc
        event: $events/client_connected
        title: some title
    authn.scram:
      required:
      - backend
      - mechanism
      type: object
      properties:
        mechanism:
          type: string
          description: Authentication mechanism.
          enum:
          - scram
        backend:
          type: string
          description: Backend type.
          enum:
          - built_in_database
        algorithm:
          type: string
          description: Hashing algorithm.
          default: sha256
          enum:
          - sha256
          - sha512
        iteration_count:
          minimum: 0
          type: integer
          description: Iteration count.
          default: 4096
        enable:
          type: boolean
          description: Set to <code>true</code> or <code>false</code> to disable this
            auth provider.
          default: true
    exhook.socket_options:
      type: object
      properties:
        keepalive:
          type: boolean
          description: "Enables/disables periodic transmission on a connected socket\
            \ when no other data is exchanged.<br/>If the other end does not respond,\
            \ the connection is considered broken and an error message is sent to\
            \ the controlling process."
          default: true
        nodelay:
          type: boolean
          description: "If true, option TCP_NODELAY is turned on for the socket,<br/>which\
            \ means that also small amounts of data are sent immediately"
          default: true
        recbuf:
          type: string
          description: The minimum size of receive buffer to use for the socket
          example: 64KB
        sndbuf:
          type: string
          description: The minimum size of send buffer to use for the socket
          example: 16KB
      example:
        sndbuf: 16KB
        recbuf: 64KB
        keepalive: true
        nodelay: true
    emqx_mgmt_api_clients.keepalive:
      type: object
      properties:
        interval:
          maximum: 65535
          minimum: 0
          type: integer
          description: "Keepalive time, with the unit of second"
    listeners.status:
      required:
      - running
      type: object
      properties:
        running:
          description: Listener running status
          oneOf:
          - type: boolean
          - type: string
            enum:
            - inconsistent
        max_connections:
          description: Max connections
          oneOf:
          - type: integer
          - type: string
            enum:
            - infinity
        current_connections:
          minimum: 0
          type: integer
          description: Current connections
      example:
        running: ""
        current_connections: 0
        max_connections: ""
    listeners.ws_not_required_bind:
      required:
      - id
      - type
      type: object
      properties:
        type:
          type: string
          description: Listener type
          enum:
          - ws
        running:
          type: boolean
          description: Listener status
        id:
          type: string
          description: Listener id
        current_connections:
          minimum: 0
          type: integer
          description: Current connections
        bind:
          type: string
          description: IP address and port for the listening socket.
          example: 127.0.0.1:80
          default: "8083"
        enable:
          type: boolean
          description: Enable listener.
          default: true
        acceptors:
          minimum: 1
          type: integer
          description: The size of the listener's receiving pool.
          default: 16
        max_connections:
          description: The maximum number of concurrent connections allowed by the
            listener.
          oneOf:
          - minimum: 1
            type: integer
          - type: string
            enum:
            - infinity
          default: infinity
        mountpoint:
          type: string
          description: "When publishing or subscribing, prefix all topics with a mountpoint\
            \ string.<br/>The prefixed string will be removed from the topic name\
            \ when the message<br/>is delivered to the subscriber. The mountpoint\
            \ is a way that users can use<br/>to implement isolation of message routing\
            \ between different listeners.<br/>For example if a client A subscribes\
            \ to `t` with `listeners.tcp.\\<name>.mountpoint`<br/>set to `some_tenant`,\
            \ then the client actually subscribes to the topic<br/>`some_tenant/t`.\
            \ Similarly, if another client B (connected to the same listener<br/>as\
            \ the client A) sends a message to topic `t`, the message is routed<br/>to\
            \ all the clients subscribed `some_tenant/t`, so client A will receive\
            \ the<br/>message, with topic name `t`.<br/><br/>Set to `\"\"` to disable\
            \ the feature.<br/><br/><br/>Variables in mountpoint string:<br/>  - <code>${clientid}</code>:\
            \ clientid<br/>  - <code>${username}</code>: username"
          default: ""
        enable_authn:
          type: string
          description: "Set <code>true</code> (default) to enable client authentication\
            \ on this listener, the authentication<br/>process goes through the configured\
            \ authentication chain.<br/>When set to <code>false</code> to allow any\
            \ clients with or without authentication information such as username\
            \ or password to log in.<br/>When set to <code>quick_deny_anonymous</code>,\
            \ it behaves like when set to <code>true</code>, but clients will be<br/>denied\
            \ immediately without going through any authenticators if <code>username</code>\
            \ is not provided. This is useful to fence off<br/>anonymous clients early."
          default: "true"
          enum:
          - "true"
          - "false"
          - quick_deny_anonymous
        max_conn_rate:
          type: string
          description: "Maximum connection rate.<br/><br/>This is used to limit the\
            \ connection rate for this listener,<br/>once the limit is reached, new\
            \ connections will be deferred or refused"
          example: 1000/s
        messages_rate:
          type: string
          description: "Messages publish rate.<br/><br/>This is used to limit the\
            \ inbound message numbers for each client connected to this listener,<br/>once\
            \ the limit is reached, the restricted client will slow down and even\
            \ be hung for a while."
          example: 1000/s
        bytes_rate:
          type: string
          description: "Data publish rate.<br/><br/>This is used to limit the inbound\
            \ bytes rate for each client connected to this listener,<br/>once the\
            \ limit is reached, the restricted client will slow down and even be hung\
            \ for a while."
          example: 100MB/s
        access_rules:
          type: array
          description: "The access control rules for this listener.<br/>See: https://github.com/emqtt/esockd#allowdeny"
          items:
            type: string
          default:
          - allow all
        proxy_protocol:
          type: boolean
          description: "Enable the Proxy Protocol V1/2 if the EMQX cluster is deployed\
            \ behind HAProxy or Nginx.<br/><br/>See: https://www.haproxy.com/blog/haproxy/proxy-protocol/"
          default: false
        proxy_protocol_timeout:
          type: string
          description: Timeout for proxy protocol. EMQX will close the TCP connection
            if proxy protocol packet is not received within the timeout.
          example: 12m
          default: 3s
        tcp_options:
          $ref: '#/components/schemas/broker.tcp_opts'
        websocket:
          $ref: '#/components/schemas/broker.ws_opts'
    connector-mqtt.egress:
      required:
      - remote
      type: object
      properties:
        pool_size:
          minimum: 1
          type: integer
          description: "Size of the pool of MQTT clients that will publish messages\
            \ to the remote broker.<br/><br/>Each MQTT client will be assigned 'clientid'\
            \ of the form '${clientid_prefix}:${bridge_name}:egress:${node}:${n}'<br/>where\
            \ 'n' is the number of a client inside the pool."
          default: 8
        local:
          $ref: '#/components/schemas/connector-mqtt.egress_local'
        remote:
          $ref: '#/components/schemas/connector-mqtt.egress_remote'
    emqx_authn_api.request_user_update:
      required:
      - password
      type: object
      properties:
        password:
          type: string
        is_superuser:
          type: boolean
          default: false
    broker.force_gc:
      type: object
      properties:
        enable:
          type: boolean
          description: Enable forced garbage collection.
          default: true
        count:
          minimum: 0
          type: integer
          description: GC the process after this many received messages.
          default: 16000
        bytes:
          type: string
          description: GC the process after specified number of bytes have passed
            through.
          example: 32MB
          default: 16MB
      example:
        enable: true
        bytes: 32MB
        count: 0
    emqx_gateway_api_clients.subscription:
      type: object
      properties:
        topic:
          type: string
          description: Topic Filter/Name
        qos:
          type: integer
          description: "QoS level, enum: 0, 1, 2"
        nl:
          type: integer
          description: "No Local option, enum: 0, 1"
        rap:
          type: integer
          description: "Retain as Published option, enum: 0, 1"
        rh:
          type: integer
          description: "Retain Handling option, enum: 0, 1, 2"
        sub_props:
          $ref: '#/components/schemas/emqx_gateway_api_clients.extra_sub_props'
      example:
        rap: 1
        qos: 0
        rh: 5
        sub_props:
          subid: subid
        topic: topic
        nl: 6
    authn.jwt_jwks:
      required:
      - endpoint
      - mechanism
      - use_jwks
      type: object
      properties:
        use_jwks:
          type: string
          description: Whether to use JWKS.
          enum:
          - "true"
        endpoint:
          type: string
          description: "JWKS endpoint, it's a read-only endpoint that returns the\
            \ server's public key set in the JWKS format."
        pool_size:
          minimum: 1
          type: integer
          description: Size of the connection pool towards the bridge target service.
          default: 8
        refresh_interval:
          type: integer
          description: JWKS refresh interval.
          default: 300
        ssl:
          $ref: '#/components/schemas/broker.ssl_client_opts'
        mechanism:
          type: string
          description: Authentication mechanism.
          enum:
          - jwt
        acl_claim_name:
          type: string
          description: JWT claim name to use for getting ACL rules.
          default: acl
        verify_claims:
          type: array
          description: "A list of custom claims to validate, which is a list of name/value\
            \ pairs.<br/>Values can use the following placeholders:<br/>- <code>${username}</code>:\
            \ Will be replaced at runtime with <code>Username</code> used by the client\
            \ when connecting<br/>- <code>${clientid}</code>: Will be replaced at\
            \ runtime with <code>Client ID</code> used by the client when connecting<br/>Authentication\
            \ will verify that the value of claims in the JWT (taken from the Password\
            \ field) matches what is required in <code>verify_claims</code>."
          items:
            type: string
            example: any
          default: []
        from:
          type: string
          description: Field to take JWT from.
          default: password
          enum:
          - username
          - password
        enable:
          type: boolean
          description: Set to <code>true</code> or <code>false</code> to disable this
            auth provider.
          default: true
    emqx_gateway_api.ssl_listener:
      type: object
      properties:
        id:
          type: string
          description: Listener ID
        type:
          type: string
          description: Listener Type
          enum:
          - ssl
        name:
          type: string
          description: Listener Name
        running:
          type: boolean
          description: Listener Running status
        acceptors:
          type: integer
          description: Size of the acceptor pool.
          default: 16
        tcp_options:
          $ref: '#/components/schemas/broker.tcp_opts'
        proxy_protocol:
          type: boolean
          description: "Enable the Proxy Protocol V1/2 if the EMQX cluster is deployed\
            \ behind HAProxy or Nginx.<br/>See: https://www.haproxy.com/blog/haproxy/proxy-protocol/"
          default: false
        proxy_protocol_timeout:
          type: string
          description: Timeout for proxy protocol.<br/>EMQX will close the TCP connection
            if proxy protocol packet is not received within the timeout.
          example: 12m
          default: 15s
        enable:
          type: boolean
          description: Enable the listener.
          default: true
        bind:
          type: string
          description: The IP address and port that the listener will bind.
          example: 127.0.0.1:80
        max_connections:
          description: Maximum number of concurrent connections.
          oneOf:
          - type: string
            enum:
            - infinity
          - minimum: 1
            type: integer
          default: 1024
        max_conn_rate:
          type: integer
          description: Maximum connections per second.
          default: 1000
        enable_authn:
          type: boolean
          description: Set <code>true</code> (default) to enable client authentication
            on this listener. <br/>When set to <code>false</code> clients will be
            allowed to connect without authentication.
          default: true
        mountpoint:
          type: string
          description: "When publishing or subscribing, prefix all topics with a mountpoint\
            \ string.<br/>The prefixed string will be removed from the topic name\
            \ when the message is delivered to the subscriber.<br/>The mountpoint\
            \ is a way that users can use to implement isolation of message routing\
            \ between different listeners.<br/>For example if a client A subscribes\
            \ to `t` with `listeners.tcp.\\<name>.mountpoint` set to `some_tenant`,<br/>then\
            \ the client actually subscribes to the topic `some_tenant/t`.<br/>Similarly,\
            \ if another client B (connected to the same listener as the client A)\
            \ sends a message to topic `t`,<br/>the message is routed to all the clients\
            \ subscribed `some_tenant/t`,<br/>so client A will receive the message,\
            \ with topic name `t`. Set to `\"\"` to disable the feature.<br/>Variables\
            \ in mountpoint string:<br/><br/>  - <code>${clientid}</code>: clientid<br/><br/>\
            \  - <code>${username}</code>: username"
        access_rules:
          type: array
          description: "The access control rules for this listener.<br/>See: https://github.com/emqtt/esockd#allowdeny"
          items:
            type: string
          default: []
        ssl_options:
          $ref: '#/components/schemas/broker.listener_ssl_opts'
    authn.mongo_sharded:
      required:
      - backend
      - collection
      - database
      - mechanism
      - servers
      type: object
      properties:
        mechanism:
          type: string
          description: Authentication mechanism.
          enum:
          - password_based
        backend:
          type: string
          description: Backend type.
          enum:
          - mongodb
        collection:
          type: string
          description: Collection used to store authentication data.
        filter:
          type: object
          description: "Conditional expression that defines the filter condition in\
            \ the query.<br/>Filter supports the following placeholders:<br/>- <code>${username}</code>:\
            \ Will be replaced at runtime with <code>Username</code> used by the client\
            \ when connecting<br/>- <code>${clientid}</code>: Will be replaced at\
            \ runtime with <code>Client ID</code> used by the client when connecting"
          example: {}
          default: {}
        password_hash_field:
          type: string
          description: Document field that contains password hash.
          default: password_hash
        salt_field:
          type: string
          description: Document field that contains the password salt.
          default: salt
        is_superuser_field:
          type: string
          description: Document field that defines if the user has superuser privileges.
          default: is_superuser
        password_hash_algorithm:
          description: Options for password hash verification.
          oneOf:
          - $ref: '#/components/schemas/authn-hash.simple'
          - $ref: '#/components/schemas/authn-hash.pbkdf2'
          - $ref: '#/components/schemas/authn-hash.bcrypt'
          default:
            name: sha256
            salt_position: prefix
        enable:
          type: boolean
          description: Set to <code>true</code> or <code>false</code> to disable this
            auth provider.
          default: true
        mongo_type:
          type: string
          description: Sharded cluster. Must be set to 'sharded' when MongoDB server
            is running in 'sharded' mode.
          default: sharded
          enum:
          - sharded
        servers:
          type: string
          description: "A Node list for Cluster to connect to. The nodes should be\
            \ separated with commas, such as: `Node[,Node].`<br/>For each Node should\
            \ be: The IPv4 or IPv6 address or the hostname to connect to.<br/>A host\
            \ entry has the following form: `Host[:Port]`.<br/>The MongoDB default\
            \ port 27017 is used if `[:Port]` is not specified."
        w_mode:
          type: string
          description: Write mode.
          default: unsafe
          enum:
          - unsafe
          - safe
        srv_record:
          type: boolean
          description: Use DNS SRV record.
          default: false
        pool_size:
          minimum: 1
          type: integer
          description: Size of the connection pool towards the bridge target service.
          default: 8
        username:
          type: string
          description: The username associated with the bridge in the external database
            used for authentication or identification purposes.
        password:
          type: string
          description: "The password associated with the bridge, used for authentication\
            \ with the external database."
          format: password
        auth_source:
          type: string
          description: Database name associated with the user's credentials.
        database:
          type: string
          description: Database name.
        topology:
          $ref: '#/components/schemas/emqx_mongodb.topology'
        ssl:
          $ref: '#/components/schemas/broker.ssl_client_opts'
    emqx_authz_api_schema.http_post:
      required:
      - method
      - type
      - url
      type: object
      properties:
        method:
          type: string
          description: HTTP method.
          default: post
          enum:
          - post
        headers:
          type: object
          description: List of HTTP Headers.
          example: {}
          default:
            accept: application/json
            cache-control: no-cache
            connection: keep-alive
            content-type: application/json
            keep-alive: "timeout=30, max=1000"
        enable:
          type: boolean
          description: Set to <code>true</code> or <code>false</code> to disable this
            ACL provider.
          default: true
        type:
          type: string
          description: Backend type.
          default: http
          enum:
          - http
        url:
          type: string
          description: URL of the auth server.
        body:
          type: object
          description: HTTP request body.
          example: {}
        request_timeout:
          type: string
          description: Request timeout.
          default: 30s
        connect_timeout:
          type: string
          description: The timeout when connecting to the HTTP server.
          example: 32s
          default: 15s
        enable_pipelining:
          minimum: 1
          type: integer
          description: "A positive integer. Whether to send HTTP requests continuously,\
            \ when set to 1, it means that after each HTTP request is sent, you need\
            \ to wait for the server to return and then continue to send the next\
            \ request."
          default: 100
        max_retries:
          minimum: 0
          type: integer
          deprecated: true
        pool_size:
          minimum: 1
          type: integer
          description: The pool size.
          default: 8
        request:
          $ref: '#/components/schemas/connector-http.request'
        retry_interval:
          type: string
          example: 12m
          deprecated: true
        ssl:
          $ref: '#/components/schemas/broker.ssl_client_opts'
    retainer.mnesia_config:
      type: object
      properties:
        type:
          type: string
          description: Backend type.
          default: built_in_database
          enum:
          - built_in_database
        storage_type:
          type: string
          description: Specifies whether the messages are stored in RAM or persisted
            on disc.
          default: ram
          enum:
          - ram
          - disc
        max_retained_messages:
          minimum: 0
          type: integer
          description: Maximum number of retained messages. 0 means no limit.
          default: 0
        index_specs:
          type: array
          description: "Retainer index specifications: list of arrays of positive\
            \ ascending integers. Each array specifies an index. Numbers in an index\
            \ specification are 1-based word positions in topics. Words from specified\
            \ positions will be used for indexing.<br/>For example, it is good to\
            \ have <code>[2, 4]</code> index to optimize <code>+/X/+/Y/...</code>\
            \ topic wildcard subscriptions."
          example:
          - - 2
            - 4
          - - 1
            - 3
          items:
            type: integer
          default:
          - - 1
            - 2
            - 3
          - - 1
            - 3
          - - 2
            - 3
          - - 3
      example:
        storage_type: ram
        index_specs:
        - - 2
          - 4
        - - 1
          - 3
        type: built_in_database
        max_retained_messages: 0
    emqx_conf_schema.console_handler:
      type: object
      properties:
        level:
          type: string
          description: The log level for the current log handler.<br/>Defaults to
            warning.
          default: warning
          enum:
          - debug
          - info
          - notice
          - warning
          - error
          - critical
          - alert
          - emergency
          - all
        enable:
          type: boolean
          description: Enable this log handler.
          default: true
        formatter:
          type: string
          description: "Choose log formatter. <code>text</code> for free text, and\
            \ <code>json</code> for structured logging."
          default: text
          enum:
          - text
          - json
        time_offset:
          type: string
          description: "The time offset to be used when formatting the timestamp.<br/>Can\
            \ be one of:<br/>  - <code>system</code>: the time offset used by the\
            \ local system<br/>  - <code>utc</code>: the UTC time offset<br/>  - <code>+-[hh]:[mm]</code>:\
            \ user specified time offset, such as \"-02:00\" or \"+00:00\"<br/>Defaults\
            \ to: <code>system</code>."
          default: system
      example:
        formatter: text
        time_offset: system
        level: warning
        enable: true
    bridge_webhook.get:
      required:
      - name
      - type
      - url
      type: object
      properties:
        status:
          type: string
          description: "The status of the bridge<br/><br/>- <code>connecting</code>:\
            \ the initial state before any health probes were made.<br/><br/>- <code>connected</code>:\
            \ when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>:\
            \ when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>:\
            \ when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>:\
            \ When not all the nodes are at the same status."
          enum:
          - connected
          - disconnected
          - connecting
          - inconsistent
        status_reason:
          type: string
          description: This is the reason given in case a bridge is failing to connect.
          example: Connection refused
        node_status:
          type: array
          description: Node status.
          items:
            $ref: '#/components/schemas/bridge.node_status'
        type:
          type: string
          description: The Bridge Type
          enum:
          - webhook
        name:
          type: string
          description: "Bridge name, used as a human-readable description of the bridge."
        enable:
          type: boolean
          description: Enable or disable this bridge
          default: true
        resource_opts:
          $ref: '#/components/schemas/bridge_webhook.creation_opts'
        connect_timeout:
          type: string
          description: The timeout when connecting to the HTTP server.
          example: 32s
          default: 15s
        retry_interval:
          type: string
          example: 12m
          deprecated: true
        pool_type:
          type: string
          description: "The type of the pool. Can be one of `random`, `hash`."
          default: random
          enum:
          - random
          - hash
        pool_size:
          minimum: 1
          type: integer
          description: The pool size.
          default: 8
        enable_pipelining:
          minimum: 1
          type: integer
          description: "A positive integer. Whether to send HTTP requests continuously,\
            \ when set to 1, it means that after each HTTP request is sent, you need\
            \ to wait for the server to return and then continue to send the next\
            \ request."
          default: 100
        request:
          $ref: '#/components/schemas/connector-http.request'
        ssl:
          $ref: '#/components/schemas/broker.ssl_client_opts'
        url:
          type: string
          description: "The URL of the HTTP Bridge.<br/><br/>Template with variables\
            \ is allowed in the path, but variables cannot be used in the scheme,\
            \ host,<br/>or port part.<br/><br/>For example, <code> http://localhost:9901/${topic}\
            \ </code> is allowed, but<br/><code> http://${host}:9901/message </code>\
            \ or <code> http://localhost:${port}/message </code><br/>is not allowed."
        direction:
          type: string
          description: "Deprecated, The direction of this bridge, MUST be 'egress'"
          deprecated: true
          enum:
          - egress
        local_topic:
          type: string
          description: "The MQTT topic filter to be forwarded to the HTTP server.\
            \ All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic\
            \ will be forwarded.<br/><br/>NOTE: if this bridge is used as the action\
            \ of a rule (EMQX rule engine), and also local_topic is<br/>configured,\
            \ then both the data got from the rule and the MQTT messages that match\
            \ local_topic<br/>will be forwarded."
        method:
          type: string
          description: "The method of the HTTP request. All the available methods\
            \ are: post, put, get, delete.<br/><br/>Template with variables is allowed."
          default: post
          enum:
          - post
          - put
          - get
          - delete
        headers:
          type: object
          description: The headers of the HTTP request.<br/><br/>Template with variables
            is allowed.
          example: {}
          default:
            accept: application/json
            cache-control: no-cache
            connection: keep-alive
            content-type: application/json
            keep-alive: timeout=5
        body:
          type: string
          description: "The body of the HTTP request.<br/><br/>If not provided, the\
            \ body will be a JSON object of all the available fields.<br/><br/>There,\
            \ 'all the available fields' means the context of a MQTT message when<br/>this\
            \ webhook is triggered by receiving a MQTT message (the `local_topic`\
            \ is set),<br/>or the context of the event when this webhook is triggered\
            \ by a rule (i.e. this<br/>webhook is used as an action of a rule).<br/><br/>Template\
            \ with variables is allowed."
        max_retries:
          minimum: 0
          type: integer
          description: HTTP request max retry times if failed.
          default: 2
        request_timeout:
          type: string
          description: HTTP request timeout.
          example: 32s
          deprecated: true
          default: 15s
    emqx_authn_schema.metrics_status_fields:
      type: object
      properties:
        resource_metrics:
          $ref: '#/components/schemas/emqx_authn_schema.resource_metrics'
        node_resource_metrics:
          $ref: '#/components/schemas/emqx_authn_schema.node_resource_metrics'
        metrics:
          $ref: '#/components/schemas/emqx_authn_schema.metrics'
        node_metrics:
          $ref: '#/components/schemas/emqx_authn_schema.node_metrics'
        status:
          type: string
          description: The status of the resource.
          enum:
          - connected
          - disconnected
          - connecting
          - inconsistent
        node_status:
          $ref: '#/components/schemas/emqx_authn_schema.node_status'
        node_error:
          $ref: '#/components/schemas/emqx_authn_schema.node_error'
      example:
        node_metrics:
          node: emqx@127.0.0.1
          metrics: null
        node_status:
          node: emqx@127.0.0.1
          status: connected
        node_resource_metrics:
          node: emqx@127.0.0.1
          metrics: null
        metrics:
          nomatch: 7
          rate_last5m: 1.231513536777255612975068288506008684635162353515625
          total: 9
          rate: 4.1456080298839363962315474054776132106781005859375
          rate_max: 7.3862819483858839220147274318151175975799560546875
          success: 3
          failed: 2
        resource_metrics:
          rate_last5m: 2.3021358869347654518833223846741020679473876953125
          rate: 5.962133916683182377482808078639209270477294921875
          rate_max: 5.63737665663332876420099637471139430999755859375
          success: 6
          matched: 0
          failed: 1
        node_error:
          node: emqx@127.0.0.1
          error: error
        status: connected
    listeners.tcp_not_required_bind:
      required:
      - id
      - type
      type: object
      properties:
        type:
          type: string
          description: Listener type
          enum:
          - tcp
        running:
          type: boolean
          description: Listener status
        id:
          type: string
          description: Listener id
        current_connections:
          minimum: 0
          type: integer
          description: Current connections
        bind:
          type: string
          description: IP address and port for the listening socket.
          example: 127.0.0.1:80
          default: "1883"
        enable:
          type: boolean
          description: Enable listener.
          default: true
        acceptors:
          minimum: 1
          type: integer
          description: The size of the listener's receiving pool.
          default: 16
        max_connections:
          description: The maximum number of concurrent connections allowed by the
            listener.
          oneOf:
          - minimum: 1
            type: integer
          - type: string
            enum:
            - infinity
          default: infinity
        mountpoint:
          type: string
          description: "When publishing or subscribing, prefix all topics with a mountpoint\
            \ string.<br/>The prefixed string will be removed from the topic name\
            \ when the message<br/>is delivered to the subscriber. The mountpoint\
            \ is a way that users can use<br/>to implement isolation of message routing\
            \ between different listeners.<br/>For example if a client A subscribes\
            \ to `t` with `listeners.tcp.\\<name>.mountpoint`<br/>set to `some_tenant`,\
            \ then the client actually subscribes to the topic<br/>`some_tenant/t`.\
            \ Similarly, if another client B (connected to the same listener<br/>as\
            \ the client A) sends a message to topic `t`, the message is routed<br/>to\
            \ all the clients subscribed `some_tenant/t`, so client A will receive\
            \ the<br/>message, with topic name `t`.<br/><br/>Set to `\"\"` to disable\
            \ the feature.<br/><br/><br/>Variables in mountpoint string:<br/>  - <code>${clientid}</code>:\
            \ clientid<br/>  - <code>${username}</code>: username"
          default: ""
        enable_authn:
          type: string
          description: "Set <code>true</code> (default) to enable client authentication\
            \ on this listener, the authentication<br/>process goes through the configured\
            \ authentication chain.<br/>When set to <code>false</code> to allow any\
            \ clients with or without authentication information such as username\
            \ or password to log in.<br/>When set to <code>quick_deny_anonymous</code>,\
            \ it behaves like when set to <code>true</code>, but clients will be<br/>denied\
            \ immediately without going through any authenticators if <code>username</code>\
            \ is not provided. This is useful to fence off<br/>anonymous clients early."
          default: "true"
          enum:
          - "true"
          - "false"
          - quick_deny_anonymous
        max_conn_rate:
          type: string
          description: "Maximum connection rate.<br/><br/>This is used to limit the\
            \ connection rate for this listener,<br/>once the limit is reached, new\
            \ connections will be deferred or refused"
          example: 1000/s
        messages_rate:
          type: string
          description: "Messages publish rate.<br/><br/>This is used to limit the\
            \ inbound message numbers for each client connected to this listener,<br/>once\
            \ the limit is reached, the restricted client will slow down and even\
            \ be hung for a while."
          example: 1000/s
        bytes_rate:
          type: string
          description: "Data publish rate.<br/><br/>This is used to limit the inbound\
            \ bytes rate for each client connected to this listener,<br/>once the\
            \ limit is reached, the restricted client will slow down and even be hung\
            \ for a while."
          example: 100MB/s
        access_rules:
          type: array
          description: "The access control rules for this listener.<br/>See: https://github.com/emqtt/esockd#allowdeny"
          items:
            type: string
          default:
          - allow all
        proxy_protocol:
          type: boolean
          description: "Enable the Proxy Protocol V1/2 if the EMQX cluster is deployed\
            \ behind HAProxy or Nginx.<br/><br/>See: https://www.haproxy.com/blog/haproxy/proxy-protocol/"
          default: false
        proxy_protocol_timeout:
          type: string
          description: Timeout for proxy protocol. EMQX will close the TCP connection
            if proxy protocol packet is not received within the timeout.
          example: 12m
          default: 3s
        tcp_options:
          $ref: '#/components/schemas/broker.tcp_opts'
    public.meta:
      required:
      - hasnext
      type: object
      properties:
        page:
          minimum: 1
          type: integer
          description: Page number of the results to fetch.
          example: 1
          default: 1
        limit:
          maximum: 1000
          minimum: 1
          type: integer
          description: Results per page(max 1000)
          example: 50
          default: 100
        count:
          minimum: 0
          type: integer
          description: "Total number of records matching the query.<br/>Note: this\
            \ field is present only if the query can be optimized and does not require\
            \ a full table scan."
        hasnext:
          type: boolean
          description: Flag indicating whether there are more results available on
            next pages.
      example:
        limit: 50
        count: 0
        page: 1
        hasnext: true
    emqx_gateway_api_clients.extra_sub_props:
      type: object
      properties:
        subid:
          type: string
          description: "Only stomp protocol, a unique identity for the subscription.\
            \ range: 1-65535."
      example:
        subid: subid
    emqx_telemetry_api.status:
      type: object
      properties:
        enable:
          type: boolean
          description: Enable telemetry
          example: false
          default: true
      example:
        enable: false
    authn-hash.bcrypt_rw:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: BCRYPT password hashing.
          enum:
          - bcrypt
        salt_rounds:
          type: integer
          description: Salt rounds for BCRYPT password generation.
          example: 10
          default: 10
    emqx_mqttsn_schema.mqttsn_predefined:
      required:
      - id
      - topic
      type: object
      properties:
        id:
          maximum: 1024
          minimum: 1
          type: integer
          description: "Topic ID. Range: 1-65535"
        topic:
          type: string
          description: Topic Name
    broker.event_names:
      type: object
      properties:
        client_connected:
          type: boolean
          description: Enable to publish client connected event messages
          default: true
        client_disconnected:
          type: boolean
          description: Enable to publish client disconnected event messages.
          default: true
        client_subscribed:
          type: boolean
          description: Enable to publish event message that client subscribed a topic
            successfully.
          default: false
        client_unsubscribed:
          type: boolean
          description: Enable to publish event message that client unsubscribed a
            topic successfully.
          default: false
      example:
        client_subscribed: false
        client_connected: true
        client_disconnected: true
        client_unsubscribed: false
    gateway.dtls_opts:
      type: object
      properties:
        cacertfile:
          type: string
          description: "Trusted PEM format CA certificates bundle file.<br/><br/>The\
            \ certificates in this file are used to verify the TLS peer's certificates.<br/>Append\
            \ new certificates to the file if new CAs are to be trusted.<br/>There\
            \ is no need to restart EMQX to have the updated file loaded, because<br/>the\
            \ system regularly checks if file has been updated (and reload).<br/><br/>NOTE:\
            \ invalidating (deleting) a certificate from the file will not affect<br/>already\
            \ established connections."
          default: "${EMQX_ETC_DIR}/certs/cacert.pem"
        cacerts:
          type: boolean
          description: "When enabled, uses the system trusted CA certificates for\
            \ establishing to TLS connections."
          default: false
        certfile:
          type: string
          description: "PEM format certificates chain file.<br/><br/>The certificates\
            \ in this file should be in reversed order of the certificate<br/>issue\
            \ chain. That is, the host's certificate should be placed in the beginning<br/>of\
            \ the file, followed by the immediate issuer certificate and so on.<br/>Although\
            \ the root CA certificate is optional, it should be placed at the end\
            \ of<br/>the file if it is to be added."
          default: "${EMQX_ETC_DIR}/certs/cert.pem"
        keyfile:
          type: string
          description: PEM format private key file.
          default: "${EMQX_ETC_DIR}/certs/key.pem"
        verify:
          type: string
          description: Enable or disable peer verification.
          default: verify_none
          enum:
          - verify_peer
          - verify_none
        reuse_sessions:
          type: boolean
          description: Enable TLS session reuse.</br><br/>Has no effect when TLS version
            is configured (or negotiated) to 1.3
          default: true
        depth:
          minimum: 0
          type: integer
          description: "Maximum number of non-self-issued intermediate certificates\
            \ that can follow the peer certificate in a valid certification path.<br/>So,\
            \ if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/><br/>if\
            \ 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/><br/>if 2 the\
            \ path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA."
          default: 10
        password:
          type: string
          description: String containing the user's password. Only used if the private
            key file is password-protected.
          format: password
          example: ""
        versions:
          type: array
          description: "All TLS/DTLS versions to be supported.<br/><br/>NOTE: PSK\
            \ ciphers are suppressed by 'tlsv1.3' version config.<br/><br/>In case\
            \ PSK cipher suites are intended, make sure to configure<br/><code>['tlsv1.2',\
            \ 'tlsv1.1']</code> here."
          items:
            type: string
          default:
          - dtlsv1.2
        ciphers:
          type: array
          description: "This config holds TLS cipher suite names separated by comma,<br/>or\
            \ as an array of strings. e.g.<br/><code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"\
            </code> or<br/><code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"\
            ]</code>.<br/><br/><br/>Ciphers (and their ordering) define the way in\
            \ which the<br/>client and server encrypts information over the network\
            \ connection.<br/>Selecting a good cipher suite is critical for the<br/>application's\
            \ data security, confidentiality and performance.<br/><br/>The names should\
            \ be in OpenSSL string format (not RFC format).<br/>All default values\
            \ and examples provided by EMQX config<br/>documentation are all in OpenSSL\
            \ format.<br/><br/><br/>NOTE: Certain cipher suites are only compatible\
            \ with<br/>specific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or\
            \ 'tlsv1.3')<br/>incompatible cipher suites will be silently dropped.<br/>For\
            \ instance, if only 'tlsv1.3' is given in the <code>versions</code>,<br/>configuring\
            \ cipher suites for other versions will have no effect.<br/><br/><br/><br/>NOTE:\
            \ PSK ciphers are suppressed by 'tlsv1.3' version config<br/><br/>If PSK\
            \ cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/><br/>PSK\
            \ cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,<br/>RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,<br/>RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,<br/>RSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"\
            </code>"
          items:
            type: string
          default: []
        secure_renegotiate:
          type: boolean
          description: "SSL parameter renegotiation is a feature that allows a client\
            \ and a server<br/>to renegotiate the parameters of the SSL connection\
            \ on the fly.<br/>RFC 5746 defines a more secure way of doing this. By\
            \ enabling secure renegotiation,<br/>you drop support for the insecure\
            \ renegotiation, prone to MitM attacks.</br><br/>Has no effect when TLS\
            \ version is configured (or negotiated) to 1.3"
          default: true
        log_level:
          type: string
          description: Log level for SSL communication. Default is 'notice'. Set to
            'debug' to inspect TLS handshake messages.
          default: notice
          enum:
          - emergency
          - alert
          - critical
          - error
          - warning
          - notice
          - info
          - debug
          - none
          - all
        hibernate_after:
          type: string
          description: Hibernate the SSL process after idling for amount of time reducing
            its memory footprint.
          example: 12m
          default: 5s
        dhfile:
          type: string
          description: "Path to a file containing PEM-encoded Diffie-Hellman parameters<br/>to\
            \ be used by the server if a cipher suite using Diffie-Hellman<br/>key\
            \ exchange is negotiated. If not specified, default parameters<br/>are\
            \ used.<br/><br/>NOTE: The <code>dhfile</code> option is not supported\
            \ by TLS 1.3."
        fail_if_no_peer_cert:
          type: boolean
          description: "Used together with {verify, verify_peer} by an TLS/DTLS server.<br/>If\
            \ set to true, the server fails if the client does not have a<br/>certificate\
            \ to send, that is, sends an empty certificate.<br/>If set to false, it\
            \ fails only if the client sends an invalid<br/>certificate (an empty\
            \ certificate is considered valid)."
          default: false
        honor_cipher_order:
          type: boolean
          description: "An important security setting, it forces the cipher to be\
            \ set based<br/> on the server-specified order instead of the client-specified\
            \ order,<br/> hence enforcing the (usually more properly configured) security<br/>\
            \ ordering of the server administrator."
          default: true
        client_renegotiation:
          type: boolean
          description: "In protocols that support client-initiated renegotiation,<br/>the\
            \ cost of resources of such an operation is higher for the server than\
            \ the client.<br/>This can act as a vector for denial of service attacks.<br/>The\
            \ SSL application already takes measures to counter-act such attempts,<br/>but\
            \ client-initiated renegotiation can be strictly disabled by setting this\
            \ option to false.<br/>The default value is true. Note that disabling\
            \ renegotiation can result in<br/>long-lived connections becoming unusable\
            \ due to limits on<br/>the number of messages the underlying cipher suite\
            \ can encipher.</br><br/>Has no effect when TLS version is configured\
            \ (or negotiated) to 1.3"
          default: true
        handshake_timeout:
          type: string
          description: Maximum time duration allowed for the handshake to complete
          example: 12m
          default: 15s
        gc_after_handshake:
          type: boolean
          description: "Memory usage tuning. If enabled, will immediately perform\
            \ a garbage collection after the TLS/SSL handshake."
          default: false
        ocsp:
          $ref: '#/components/schemas/broker.ocsp'
        enable_crl_check:
          type: boolean
          description: Whether to enable CRL verification for this listener.
          default: false
    cluster.replicant_info:
      type: object
      properties:
        node:
          type: string
          description: Replicant node name
          example: emqx-replicant@127.0.0.2
        streams:
          minimum: 0
          type: integer
          description: The number of RLOG (replicated log) streams
          example: 10
      example:
        node: emqx-replicant@127.0.0.2
        streams: 10
    broker.force_shutdown:
      type: object
      properties:
        enable:
          type: boolean
          description: Enable `force_shutdown` feature.
          default: true
        max_mailbox_size:
          minimum: 0
          type: integer
          description: "In EMQX, each online client corresponds to an individual Erlang\
            \ process. The configuration value establishes a mailbox size limit for\
            \ these processes. If the mailbox size surpasses this limit, the client\
            \ will be automatically terminated."
          default: 1000
        max_heap_size:
          type: string
          description: Total heap size
          example: 1024KB
          default: 32MB
      example:
        max_heap_size: 1024KB
        enable: true
        max_mailbox_size: 0
    emqx_gateway_api_clients.stomp_client:
      type: object
      properties:
        node:
          type: string
          description: Name of the node to which the client is connected
        clientid:
          type: string
          description: Client ID
        username:
          type: string
          description: Username of client when connecting
        mountpoint:
          type: string
          description: Topic mountpoint
        proto_name:
          type: string
          description: Client protocol name
        proto_ver:
          type: string
          description: Protocol version used by the client
        ip_address:
          type: string
          description: Client's IP address
        port:
          type: integer
          description: Client's port
        is_bridge:
          type: boolean
          description: Indicates whether the client is connected via bridge
        connected_at:
          description: Client connection time
          oneOf:
          - type: integer
            description: epoch-millisecond
            example: 1640995200000
          - type: string
            format: date-time
            example: 2022-01-01T00:00:00Z
        disconnected_at:
          description: "Client offline time, This field is only valid and returned\
            \ when connected is false"
          oneOf:
          - type: integer
            description: epoch-millisecond
            example: 1640995200000
          - type: string
            format: date-time
            example: 2022-01-01T00:00:00Z
        connected:
          type: boolean
          description: Whether the client is connected
        keepalive:
          type: integer
          description: "Keepalive time, with the unit of second"
        clean_start:
          type: boolean
          description: Indicate whether the client is using a brand new session
        expiry_interval:
          type: integer
          description: "Session expiration interval, with the unit of second"
        created_at:
          description: Session creation time
          oneOf:
          - type: integer
            description: epoch-millisecond
            example: 1640995200000
          - type: string
            format: date-time
            example: 2022-01-01T00:00:00Z
        subscriptions_cnt:
          type: integer
          description: Number of subscriptions established by this client
        subscriptions_max:
          type: integer
          description: Maximum number of subscriptions allowed by this client
        inflight_cnt:
          type: integer
          description: Current length of inflight
        inflight_max:
          type: integer
          description: Maximum length of inflight
        mqueue_len:
          type: integer
          description: Current length of message queue
        mqueue_max:
          type: integer
          description: Maximum length of message queue
        mqueue_dropped:
          type: integer
          description: Number of messages dropped by the message queue due to exceeding
            the length
        awaiting_rel_cnt:
          type: integer
          description: Number of awaiting acknowledge packet
        awaiting_rel_max:
          type: integer
          description: Maximum allowed number of awaiting PUBREC packet
        recv_oct:
          type: integer
          description: Number of bytes received
        recv_cnt:
          type: integer
          description: Number of socket packets received
        recv_pkt:
          type: integer
          description: Number of protocol packets received
        recv_msg:
          type: integer
          description: Number of message packets received
        send_oct:
          type: integer
          description: Number of bytes sent
        send_cnt:
          type: integer
          description: Number of socket packets sent
        send_pkt:
          type: integer
          description: Number of protocol packets sent
        send_msg:
          type: integer
          description: Number of message packets sent
        mailbox_len:
          type: integer
          description: Process mailbox size
        heap_size:
          type: integer
          description: Process heap size with the unit of byte
        reductions:
          type: integer
          description: Erlang reduction
    authn.redis_sentinel:
      required:
      - backend
      - cmd
      - mechanism
      - sentinel
      - servers
      type: object
      properties:
        mechanism:
          type: string
          description: Authentication mechanism.
          enum:
          - password_based
        backend:
          type: string
          description: Backend type.
          enum:
          - redis
        cmd:
          type: string
          description: "The Redis Command used to query data for authentication such\
            \ as password hash, currently only supports <code>HGET</code> and <code>HMGET</code>."
        password_hash_algorithm:
          description: Options for password hash verification.
          oneOf:
          - $ref: '#/components/schemas/authn-hash.simple'
          - $ref: '#/components/schemas/authn-hash.pbkdf2'
          - $ref: '#/components/schemas/authn-hash.bcrypt'
          default:
            name: sha256
            salt_position: prefix
        enable:
          type: boolean
          description: Set to <code>true</code> or <code>false</code> to disable this
            auth provider.
          default: true
        servers:
          type: string
          description: "A Node list for Cluster to connect to. The nodes should be\
            \ separated with commas, such as: `Node[,Node].`<br/>For each Node should\
            \ be: The IPv4 or IPv6 address or the hostname to connect to.<br/>A host\
            \ entry has the following form: `Host[:Port]`.<br/>The Redis default port\
            \ 6379 is used if `[:Port]` is not specified."
        redis_type:
          type: string
          description: Sentinel mode. Must be set to 'sentinel' when Redis server
            is running in sentinel mode.
          default: sentinel
          enum:
          - sentinel
        sentinel:
          type: string
          description: The cluster name in Redis sentinel mode.
        pool_size:
          minimum: 1
          type: integer
          description: Size of the connection pool towards the bridge target service.
          default: 8
        password:
          type: string
          description: "The password associated with the bridge, used for authentication\
            \ with the external database."
          format: password
        database:
          minimum: 0
          type: integer
          description: Redis database ID.
          default: 0
        auto_reconnect:
          type: boolean
          description: Deprecated. Enable automatic reconnect to the database.
          deprecated: true
          default: true
        ssl:
          $ref: '#/components/schemas/broker.ssl_client_opts'
    emqx_authz_api_mnesia.clientid_response_data:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/emqx_authz_api_mnesia.rules_for_clientid'
        meta:
          $ref: '#/components/schemas/public.meta'
      example:
        data:
        - clientid: client1
          rules:
          - qos:
            - 0
            - 0
            retain: ""
            topic: test/topic/1
            action: publish
            permission: allow
          - qos:
            - 0
            - 0
            retain: ""
            topic: test/topic/1
            action: publish
            permission: allow
        - clientid: client1
          rules:
          - qos:
            - 0
            - 0
            retain: ""
            topic: test/topic/1
            action: publish
            permission: allow
          - qos:
            - 0
            - 0
            retain: ""
            topic: test/topic/1
            action: publish
            permission: allow
        meta:
          limit: 50
          count: 0
          page: 1
          hasnext: true
    emqx_mgmt_api_nodes.node_info:
      type: object
      properties:
        node:
          type: string
          description: Node name
          example: emqx@127.0.0.1
        connections:
          minimum: 0
          type: integer
          description: Number of clients session in this node
          example: 0
        live_connections:
          minimum: 0
          type: integer
          description: Number of clients currently connected to this node
          example: 0
        load1:
          type: number
          description: CPU average load in 1 minute
          example: 2.66
        load5:
          type: number
          description: CPU average load in 5 minute
          example: 2.66
        load15:
          type: number
          description: CPU average load in 15 minute
          example: 2.66
        max_fds:
          minimum: 0
          type: integer
          description: File descriptors limit
          example: 1024
        memory_total:
          type: string
          description: Allocated memory
          example: 512.00M
        memory_used:
          type: string
          description: Used memory
          example: 256.00M
        node_status:
          type: string
          description: Node status
          example: running
          enum:
          - running
          - stopped
        otp_release:
          type: string
          description: Erlang/OTP version
          example: 24.2/12.2
        process_available:
          minimum: 0
          type: integer
          description: Erlang processes limit
          example: 2097152
        process_used:
          minimum: 0
          type: integer
          description: Running Erlang processes
          example: 1024
        uptime:
          minimum: 0
          type: integer
          description: "System uptime, milliseconds"
          example: 5120000
        version:
          type: string
          description: Release version
          example: 5.0.0
        edition:
          type: string
          description: Release edition
          example: Opensource
          enum:
          - Opensource
          - Enterprise
        sys_path:
          type: string
          description: Path to system files
          example: path/to/emqx
        log_path:
          type: string
          description: Path to log files
          example: path/to/log | The log path is not yet set
        role:
          type: string
          description: Node role
          example: core
          enum:
          - core
          - replicant
      example:
        otp_release: 24.2/12.2
        node_status: running
        role: core
        log_path: path/to/log | The log path is not yet set
        edition: Opensource
        load5: 2.66
        memory_used: 256.00M
        version: 5.0.0
        live_connections: 0
        load1: 2.66
        max_fds: 1024
        uptime: 5120000
        node: emqx@127.0.0.1
        process_available: 2097152
        sys_path: path/to/emqx
        memory_total: 512.00M
        process_used: 1024
        connections: 0
        load15: 2.66
    emqx_delayed_api.message_without_payload:
      type: object
      properties:
        msgid:
          type: integer
          description: Delayed Message ID
        node:
          type: string
          description: The node where message from
        publish_at:
          type: string
          description: "Clinet publish message time, in RFC 3339 format"
        delayed_interval:
          minimum: 1
          type: integer
          description: Delayed interval(second)
        delayed_remaining:
          minimum: 0
          type: integer
          description: Delayed remaining(second)
        expected_at:
          type: string
          description: "Expect publish time, in RFC 3339 format"
        topic:
          type: string
          description: Topic
          example: /sys/#
        qos:
          maximum: 2
          minimum: 0
          type: integer
          description: QoS
          example: 0
        from_clientid:
          type: string
          description: From ClientID
        from_username:
          type: string
          description: From Username
      example:
        node: node
        expected_at: expected_at
        from_clientid: from_clientid
        qos: 0
        from_username: from_username
        msgid: 0
        topic: /sys/#
        delayed_interval: 1
        delayed_remaining: 0
        publish_at: publish_at
    emqx_authz_api_mnesia.rules:
      type: object
      properties:
        rules:
          type: array
          items:
            $ref: '#/components/schemas/emqx_authz_api_mnesia.rule_item'
      example:
        rules:
        - qos:
          - 0
          - 0
          retain: ""
          topic: test/topic/1
          action: publish
          permission: allow
        - qos:
          - 0
          - 0
          retain: ""
          topic: test/topic/1
          action: publish
          permission: allow
    slow_subscribers_statistics.record:
      type: object
      properties:
        clientid:
          type: string
          description: Message clientid
        node:
          type: string
          description: Message node name
        topic:
          type: string
          description: Message topic
        timespan:
          type: integer
          description: Timespan for message transmission
        last_update_time:
          type: integer
          description: The timestamp of last update
      example:
        node: node
        last_update_time: 6
        clientid: clientid
        topic: topic
        timespan: 0
    emqx_gateway_api_clients.mqttsn_client:
      type: object
      properties:
        node:
          type: string
          description: Name of the node to which the client is connected
        clientid:
          type: string
          description: Client ID
        username:
          type: string
          description: Username of client when connecting
        mountpoint:
          type: string
          description: Topic mountpoint
        proto_name:
          type: string
          description: Client protocol name
        proto_ver:
          type: string
          description: Protocol version used by the client
        ip_address:
          type: string
          description: Client's IP address
        port:
          type: integer
          description: Client's port
        is_bridge:
          type: boolean
          description: Indicates whether the client is connected via bridge
        connected_at:
          description: Client connection time
          oneOf:
          - type: integer
            description: epoch-millisecond
            example: 1640995200000
          - type: string
            format: date-time
            example: 2022-01-01T00:00:00Z
        disconnected_at:
          description: "Client offline time, This field is only valid and returned\
            \ when connected is false"
          oneOf:
          - type: integer
            description: epoch-millisecond
            example: 1640995200000
          - type: string
            format: date-time
            example: 2022-01-01T00:00:00Z
        connected:
          type: boolean
          description: Whether the client is connected
        keepalive:
          type: integer
          description: "Keepalive time, with the unit of second"
        clean_start:
          type: boolean
          description: Indicate whether the client is using a brand new session
        expiry_interval:
          type: integer
          description: "Session expiration interval, with the unit of second"
        created_at:
          description: Session creation time
          oneOf:
          - type: integer
            description: epoch-millisecond
            example: 1640995200000
          - type: string
            format: date-time
            example: 2022-01-01T00:00:00Z
        subscriptions_cnt:
          type: integer
          description: Number of subscriptions established by this client
        subscriptions_max:
          type: integer
          description: Maximum number of subscriptions allowed by this client
        inflight_cnt:
          type: integer
          description: Current length of inflight
        inflight_max:
          type: integer
          description: Maximum length of inflight
        mqueue_len:
          type: integer
          description: Current length of message queue
        mqueue_max:
          type: integer
          description: Maximum length of message queue
        mqueue_dropped:
          type: integer
          description: Number of messages dropped by the message queue due to exceeding
            the length
        awaiting_rel_cnt:
          type: integer
          description: Number of awaiting acknowledge packet
        awaiting_rel_max:
          type: integer
          description: Maximum allowed number of awaiting PUBREC packet
        recv_oct:
          type: integer
          description: Number of bytes received
        recv_cnt:
          type: integer
          description: Number of socket packets received
        recv_pkt:
          type: integer
          description: Number of protocol packets received
        recv_msg:
          type: integer
          description: Number of message packets received
        send_oct:
          type: integer
          description: Number of bytes sent
        send_cnt:
          type: integer
          description: Number of socket packets sent
        send_pkt:
          type: integer
          description: Number of protocol packets sent
        send_msg:
          type: integer
          description: Number of message packets sent
        mailbox_len:
          type: integer
          description: Process mailbox size
        heap_size:
          type: integer
          description: Process heap size with the unit of byte
        reductions:
          type: integer
          description: Erlang reduction
    emqx_topic_metrics_api.metrics:
      type: object
      properties:
        message.dropped.count:
          type: integer
          description: Dropped messages count
          example: 0
        message.in.count:
          type: integer
          description: In messages count
          example: 0
        message.out.count:
          type: integer
          description: Out messages count
          example: 0
        message.qos0.in.count:
          type: integer
          description: QoS0 in messages count
          example: 0
        message.qos0.out.count:
          type: integer
          description: QoS0 out messages count
          example: 0
        message.qos1.in.count:
          type: integer
          description: QoS1 in messages count
          example: 0
        message.qos1.out.count:
          type: integer
          description: QoS1 out messages count
          example: 0
        message.qos2.in.count:
          type: integer
          description: QoS2 in messages count
          example: 0
        message.qos2.out.count:
          type: integer
          description: QoS2 out messages count
          example: 0
        message.dropped.rate:
          type: number
          description: Dropped messages rate
          example: 0
        message.in.rate:
          type: number
          description: In messages rate
          example: 0
        message.out.rate:
          type: number
          description: Out messages rate
          example: 0
        message.qos0.in.rate:
          type: number
          description: QoS0 in messages rate
          example: 0
        message.qos0.out.rate:
          type: number
          description: QoS0 out messages rate
          example: 0
        message.qos1.in.rate:
          type: number
          description: QoS1 in messages rate
          example: 0
        message.qos1.out.rate:
          type: number
          description: QoS1 out messages rate
          example: 0
        message.qos2.in.rate:
          type: number
          description: QoS2 in messages rate
          example: 0
        message.qos2.out.rate:
          type: number
          description: QoS2 out messages rate
          example: 0
      example:
        message.qos2.in.count: 0
        message.in.rate: 0
        message.out.count: 0
        message.dropped.rate: 0
        message.qos0.out.count: 0
        message.qos2.out.rate: 0
        message.qos1.out.rate: 0
        message.out.rate: 0
        message.qos2.in.rate: 0
        message.qos2.out.count: 0
        message.dropped.count: 0
        message.qos0.in.count: 0
        message.qos1.in.rate: 0
        message.qos1.out.count: 0
        message.qos0.in.rate: 0
        message.qos1.in.count: 0
        message.qos0.out.rate: 0
        message.in.count: 0
    listeners.ssl_not_required_bind:
      required:
      - id
      - type
      type: object
      properties:
        type:
          type: string
          description: Listener type
          enum:
          - ssl
        running:
          type: boolean
          description: Listener status
        id:
          type: string
          description: Listener id
        current_connections:
          minimum: 0
          type: integer
          description: Current connections
        bind:
          type: string
          description: IP address and port for the listening socket.
          example: 127.0.0.1:80
          default: "8883"
        enable:
          type: boolean
          description: Enable listener.
          default: true
        acceptors:
          minimum: 1
          type: integer
          description: The size of the listener's receiving pool.
          default: 16
        max_connections:
          description: The maximum number of concurrent connections allowed by the
            listener.
          oneOf:
          - minimum: 1
            type: integer
          - type: string
            enum:
            - infinity
          default: infinity
        mountpoint:
          type: string
          description: "When publishing or subscribing, prefix all topics with a mountpoint\
            \ string.<br/>The prefixed string will be removed from the topic name\
            \ when the message<br/>is delivered to the subscriber. The mountpoint\
            \ is a way that users can use<br/>to implement isolation of message routing\
            \ between different listeners.<br/>For example if a client A subscribes\
            \ to `t` with `listeners.tcp.\\<name>.mountpoint`<br/>set to `some_tenant`,\
            \ then the client actually subscribes to the topic<br/>`some_tenant/t`.\
            \ Similarly, if another client B (connected to the same listener<br/>as\
            \ the client A) sends a message to topic `t`, the message is routed<br/>to\
            \ all the clients subscribed `some_tenant/t`, so client A will receive\
            \ the<br/>message, with topic name `t`.<br/><br/>Set to `\"\"` to disable\
            \ the feature.<br/><br/><br/>Variables in mountpoint string:<br/>  - <code>${clientid}</code>:\
            \ clientid<br/>  - <code>${username}</code>: username"
          default: ""
        enable_authn:
          type: string
          description: "Set <code>true</code> (default) to enable client authentication\
            \ on this listener, the authentication<br/>process goes through the configured\
            \ authentication chain.<br/>When set to <code>false</code> to allow any\
            \ clients with or without authentication information such as username\
            \ or password to log in.<br/>When set to <code>quick_deny_anonymous</code>,\
            \ it behaves like when set to <code>true</code>, but clients will be<br/>denied\
            \ immediately without going through any authenticators if <code>username</code>\
            \ is not provided. This is useful to fence off<br/>anonymous clients early."
          default: "true"
          enum:
          - "true"
          - "false"
          - quick_deny_anonymous
        max_conn_rate:
          type: string
          description: "Maximum connection rate.<br/><br/>This is used to limit the\
            \ connection rate for this listener,<br/>once the limit is reached, new\
            \ connections will be deferred or refused"
          example: 1000/s
        messages_rate:
          type: string
          description: "Messages publish rate.<br/><br/>This is used to limit the\
            \ inbound message numbers for each client connected to this listener,<br/>once\
            \ the limit is reached, the restricted client will slow down and even\
            \ be hung for a while."
          example: 1000/s
        bytes_rate:
          type: string
          description: "Data publish rate.<br/><br/>This is used to limit the inbound\
            \ bytes rate for each client connected to this listener,<br/>once the\
            \ limit is reached, the restricted client will slow down and even be hung\
            \ for a while."
          example: 100MB/s
        access_rules:
          type: array
          description: "The access control rules for this listener.<br/>See: https://github.com/emqtt/esockd#allowdeny"
          items:
            type: string
          default:
          - allow all
        proxy_protocol:
          type: boolean
          description: "Enable the Proxy Protocol V1/2 if the EMQX cluster is deployed\
            \ behind HAProxy or Nginx.<br/><br/>See: https://www.haproxy.com/blog/haproxy/proxy-protocol/"
          default: false
        proxy_protocol_timeout:
          type: string
          description: Timeout for proxy protocol. EMQX will close the TCP connection
            if proxy protocol packet is not received within the timeout.
          example: 12m
          default: 3s
        tcp_options:
          $ref: '#/components/schemas/broker.tcp_opts'
        ssl_options:
          $ref: '#/components/schemas/broker.listener_ssl_opts'
    emqx_gateway_api.update_lwm2m:
      required:
      - translators
      - xml_dir
      type: object
      properties:
        xml_dir:
          type: string
          description: The Directory for LwM2M Resource definition.
          example: /etc/emqx/lwm2m_xml
        lifetime_min:
          type: string
          description: Minimum value of lifetime allowed to be set by the LwM2M client.
          example: 12m
          default: 15s
        lifetime_max:
          type: string
          description: Maximum value of lifetime allowed to be set by the LwM2M client.
          example: 12m
          default: 86400s
        qmode_time_window:
          type: string
          description: "The value of the time window during which the network link\
            \ is considered valid by the LwM2M Gateway in QMode mode.<br/>For example,\
            \ after receiving an update message from a client, any messages within\
            \ this time window are sent directly to the LwM2M client, and all messages\
            \ beyond this time window are temporarily stored in memory."
          example: 1h
          default: 22s
        auto_observe:
          type: boolean
          description: Automatically observe the object list of REGISTER packet.
          default: false
        update_msg_publish_condition:
          type: string
          description: "Policy for publishing UPDATE event message.<br/><br/>  - always:\
            \ send update events as long as the UPDATE request is received.<br/><br/>\
            \  - contains_object_list: send update events only if the UPDATE request\
            \ carries any Object List"
          default: contains_object_list
          enum:
          - always
          - contains_object_list
        translators:
          $ref: '#/components/schemas/emqx_lwm2m_schema.lwm2m_translators'
        mountpoint:
          type: string
          description: "When publishing or subscribing, prefix all topics with a mountpoint\
            \ string.<br/>The prefixed string will be removed from the topic name\
            \ when the message is delivered to the subscriber.<br/>The mountpoint\
            \ is a way that users can use to implement isolation of message routing\
            \ between different listeners.<br/>For example if a client A subscribes\
            \ to `t` with `listeners.tcp.\\<name>.mountpoint` set to `some_tenant`,<br/>then\
            \ the client actually subscribes to the topic `some_tenant/t`.<br/>Similarly,\
            \ if another client B (connected to the same listener as the client A)\
            \ sends a message to topic `t`,<br/>the message is routed to all the clients\
            \ subscribed `some_tenant/t`,<br/>so client A will receive the message,\
            \ with topic name `t`. Set to `\"\"` to disable the feature.<br/>Variables\
            \ in mountpoint string:<br/><br/>  - <code>${clientid}</code>: clientid<br/><br/>\
            \  - <code>${username}</code>: username"
          default: "lwm2m/${endpoint_name}/"
        enable:
          type: boolean
          description: Whether to enable this gateway
          default: true
        enable_stats:
          type: boolean
          description: Whether to enable client process statistic
          default: true
        idle_timeout:
          type: string
          description: The idle time of the client connection process. It has two
            purposes:<br/>  1. A newly created client process that does not receive
            any client requests after that time will be closed directly.<br/>  2.
            A running client process that does not receive any client requests after
            this time will go into hibernation to save resources.
          example: 12m
          default: 30s
        clientinfo_override:
          $ref: '#/components/schemas/gateway.clientinfo_override'
    emqx_rule_api_schema.ctx_bridge_mqtt:
      required:
      - event_type
      type: object
      properties:
        event_type:
          type: string
          description: Event Type
          enum:
          - $bridges/mqtt:*
        id:
          type: string
          description: Message ID
        payload:
          type: string
          description: The Message Payload
        topic:
          type: string
          description: Message Topic
        server:
          type: string
          description: "The IP address (or hostname) and port of the MQTT broker,\
            \ in IP:Port format"
        dup:
          type: string
          description: The DUP flag of the MQTT message
        retain:
          type: string
          description: If is a retain message
        message_received_at:
          type: integer
          description: The Time that this Message is Received
        qos:
          maximum: 2
          minimum: 0
          type: integer
          description: The Message QoS
          example: 0
    emqx_rule_api_schema.ctx_delivered:
      required:
      - event_type
      type: object
      properties:
        event_type:
          type: string
          description: Event Type
          enum:
          - message_delivered
        id:
          type: string
          description: Message ID
        from_clientid:
          type: string
          description: The Client ID
        from_username:
          type: string
          description: The User Name
        clientid:
          type: string
          description: The Client ID
        username:
          type: string
          description: Username
        payload:
          type: string
          description: The Message Payload
        peerhost:
          type: string
          description: The IP Address of the Peer Client
        topic:
          type: string
          description: Message Topic
        publish_received_at:
          type: integer
          description: The Time that this Message is Received
        qos:
          maximum: 2
          minimum: 0
          type: integer
          description: The Message QoS
          example: 0
    modules.delayed:
      type: object
      properties:
        enable:
          type: boolean
          description: Enable this feature
          default: true
        max_delayed_messages:
          type: integer
          description: Maximum number of delayed messages (0 is no limit).
          default: 0
      example:
        max_delayed_messages: 0
        enable: true
    plugins.builder:
      type: object
      properties:
        contact:
          type: string
          example: emqx-support@emqx.io
        name:
          type: string
          example: EMQX Team
        website:
          type: string
          example: www.emqx.com
      example:
        website: www.emqx.com
        contact: emqx-support@emqx.io
        name: EMQX Team
    exhook.hook_info:
      type: object
      properties:
        name:
          type: string
          description: The hook's name
        params:
          $ref: '#/components/schemas/exhook.hook_info_params'
      example:
        name: name
        params:
          $name: $name
    emqx_conf_schema.log_file_handler:
      type: object
      properties:
        path:
          type: string
          description: Name the log file.
          example: /path/to/file
          default: "${EMQX_LOG_DIR}/emqx.log"
        rotation_count:
          maximum: 128
          minimum: 1
          type: integer
          description: Maximum number of log files.
          default: 10
        rotation_size:
          description: "This parameter controls log file rotation. The value `infinity`\
            \ means the log file will grow indefinitely, otherwise the log file will\
            \ be rotated once it reaches `rotation_size` in bytes."
          oneOf:
          - type: string
            example: 32MB
          - type: string
            enum:
            - infinity
          default: 50MB
        level:
          type: string
          description: The log level for the current log handler.<br/>Defaults to
            warning.
          default: warning
          enum:
          - debug
          - info
          - notice
          - warning
          - error
          - critical
          - alert
          - emergency
          - all
        enable:
          type: boolean
          description: Enable this log handler.
          default: false
        formatter:
          type: string
          description: "Choose log formatter. <code>text</code> for free text, and\
            \ <code>json</code> for structured logging."
          default: text
          enum:
          - text
          - json
        time_offset:
          type: string
          description: "The time offset to be used when formatting the timestamp.<br/>Can\
            \ be one of:<br/>  - <code>system</code>: the time offset used by the\
            \ local system<br/>  - <code>utc</code>: the UTC time offset<br/>  - <code>+-[hh]:[mm]</code>:\
            \ user specified time offset, such as \"-02:00\" or \"+00:00\"<br/>Defaults\
            \ to: <code>system</code>."
          default: system
    retainer.retainer:
      type: object
      properties:
        enable:
          type: boolean
          description: Enable retainer feature
          default: true
        msg_expiry_interval:
          type: string
          description: Message retention time. This config is only applicable for
            messages without the Message Expiry Interval message property.<br/>0 means
            message will never expire.
          example: 32s
          default: 0s
        msg_clear_interval:
          type: string
          description: Interval for EMQX to scan expired messages and delete them.
            Never scan if the value is 0.
          example: 32s
          default: 0s
        max_payload_size:
          type: string
          description: Maximum retained message size.
          example: 32MB
          default: 1MB
        stop_publish_clear_msg:
          type: boolean
          description: "When the retained flag of the `PUBLISH` message is set and\
            \ Payload is empty,<br/>whether to continue to publish the message.<br/>See:<br/>http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718038"
          default: false
        delivery_rate:
          type: string
          description: The maximum rate of delivering retained messages
          example: 1000/s
        backend:
          $ref: '#/components/schemas/retainer.mnesia_config'
      example:
        stop_publish_clear_msg: false
        max_payload_size: 32MB
        enable: true
        delivery_rate: 1000/s
        backend:
          storage_type: ram
          index_specs:
          - - 2
            - 4
          - - 1
            - 3
          type: built_in_database
          max_retained_messages: 0
        msg_expiry_interval: 32s
        msg_clear_interval: 32s
    emqx_authz_api_schema.position:
      required:
      - position
      type: object
      properties:
        position:
          type: string
          description: Where to place the source.
    emqx_rule_api_schema.node_metrics:
      type: object
      properties:
        node:
          type: string
          description: The node name
          example: emqx@127.0.0.1
        matched:
          minimum: 0
          type: integer
          description: How many times the FROM clause of the SQL is matched.
        matched.rate:
          type: number
          description: "The rate of matched, times/second"
        matched.rate.max:
          type: number
          description: "The max rate of matched, times/second"
        matched.rate.last5m:
          type: number
          description: "The average rate of matched in last 5 minutes, times/second"
        passed:
          minimum: 0
          type: integer
          description: How many times the SQL is passed
        failed:
          minimum: 0
          type: integer
          description: How many times the SQL statement has failed
        failed.exception:
          minimum: 0
          type: integer
          description: "How many times the SQL is failed due to exceptions. This may\
            \ because of a crash when calling a SQL function, or trying to do arithmetic\
            \ operation on undefined variables"
        failed.unknown:
          minimum: 0
          type: integer
          description: How many times the SQL is failed due to an unknown error.
        actions.total:
          minimum: 0
          type: integer
          description: "How many times the actions are called by the rule. This value\
            \ may several times of 'matched', depending on the number of the actions\
            \ of the rule."
        actions.success:
          minimum: 0
          type: integer
          description: How many times the rule successided to call the actions.
        actions.failed:
          minimum: 0
          type: integer
          description: How many times the rule failed to call the actions.
        actions.failed.out_of_service:
          minimum: 0
          type: integer
          description: "How many times the rule has failed to call actions due to\
            \ the action is out of service. For example, a bridge is disabled or stopped."
        actions.failed.unknown:
          minimum: 0
          type: integer
          description: "The number of action failures that have occurred due to unanticipated\
            \ reasons. For more information on these errors, please refer to the EMQX\
            \ log file."
      example:
        actions.failed.unknown: 0
        actions.failed.out_of_service: 0
        matched.rate.max: 6.8468526983526398765889098285697400569915771484375
        failed: 0
        failed.exception: 0
        node: emqx@127.0.0.1
        matched.rate: 1.489415909854170383397331534069962799549102783203125
        actions.failed: 0
        failed.unknown: 0
        actions.success: 0
        matched: 0
        passed: 0
        actions.total: 0
        matched.rate.last5m: 7.4577447736837658709418974467553198337554931640625
    authn.postgresql:
      required:
      - backend
      - database
      - mechanism
      - query
      - server
      - username
      type: object
      properties:
        mechanism:
          type: string
          description: Authentication mechanism.
          enum:
          - password_based
        backend:
          type: string
          description: Backend type.
          enum:
          - postgresql
        password_hash_algorithm:
          description: Options for password hash verification.
          oneOf:
          - $ref: '#/components/schemas/authn-hash.simple'
          - $ref: '#/components/schemas/authn-hash.pbkdf2'
          - $ref: '#/components/schemas/authn-hash.bcrypt'
          default:
            name: sha256
            salt_position: prefix
        query:
          type: string
          description: "SQL used to query data for authentication, such as password\
            \ hash."
        enable:
          type: boolean
          description: Set to <code>true</code> or <code>false</code> to disable this
            auth provider.
          default: true
        server:
          type: string
          description: "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A\
            \ host entry has the following form: `Host[:Port]`.<br/><br/>The PostgreSQL\
            \ default port 5432 is used if `[:Port]` is not specified."
        database:
          type: string
          description: Database name.
        pool_size:
          minimum: 1
          type: integer
          description: Size of the connection pool towards the bridge target service.
          default: 8
        username:
          type: string
          description: The username associated with the bridge in the external database
            used for authentication or identification purposes.
        password:
          type: string
          description: "The password associated with the bridge, used for authentication\
            \ with the external database."
          format: password
        auto_reconnect:
          type: boolean
          description: Deprecated. Enable automatic reconnect to the database.
          deprecated: true
          default: true
        ssl:
          $ref: '#/components/schemas/broker.ssl_client_opts'
    broker.listener_quic_ssl_opts:
      type: object
      properties:
        cacertfile:
          type: string
          description: "Trusted PEM format CA certificates bundle file.<br/><br/>The\
            \ certificates in this file are used to verify the TLS peer's certificates.<br/>Append\
            \ new certificates to the file if new CAs are to be trusted.<br/>There\
            \ is no need to restart EMQX to have the updated file loaded, because<br/>the\
            \ system regularly checks if file has been updated (and reload).<br/><br/>NOTE:\
            \ invalidating (deleting) a certificate from the file will not affect<br/>already\
            \ established connections."
          default: "${EMQX_ETC_DIR}/certs/cacert.pem"
        certfile:
          type: string
          description: "PEM format certificates chain file.<br/><br/>The certificates\
            \ in this file should be in reversed order of the certificate<br/>issue\
            \ chain. That is, the host's certificate should be placed in the beginning<br/>of\
            \ the file, followed by the immediate issuer certificate and so on.<br/>Although\
            \ the root CA certificate is optional, it should be placed at the end\
            \ of<br/>the file if it is to be added."
          default: "${EMQX_ETC_DIR}/certs/cert.pem"
        keyfile:
          type: string
          description: PEM format private key file.
          default: "${EMQX_ETC_DIR}/certs/key.pem"
        verify:
          type: string
          description: Enable or disable peer verification.
          default: verify_none
          enum:
          - verify_peer
          - verify_none
        password:
          type: string
          description: String containing the user's password. Only used if the private
            key file is password-protected.
          format: password
          example: ""
    exhook.node_metrics:
      type: object
      properties:
        node:
          type: string
          description: Node name
        metrics:
          $ref: '#/components/schemas/exhook.metrics'
      example:
        node: node
        metrics: null
    exhook.move_req:
      required:
      - position
      type: object
      properties:
        position:
          type: string
          description: The target position to be moved
          example: front
    exhook.node_status:
      type: object
      properties:
        node:
          type: string
          description: Node name
        status:
          type: string
          description: "The status of Exhook server.<br/><br/>connected: connection\
            \ succeeded<br/><br/>connecting: connection failed, reconnecting<br/><br/>disconnected:\
            \ failed to connect and didn't reconnect<br/><br/>disabled: this server\
            \ is disabled<br/><br/>error: failed to view the status of this server"
          enum:
          - connected
          - connecting
          - disconnected
          - disabled
          - error
      example:
        node: node
        status: connected
    emqx_rule_api_schema.rule_creation:
      required:
      - sql
      type: object
      properties:
        name:
          type: string
          description: The name of the rule
          example: foo
          default: ""
        sql:
          type: string
          description: "SQL query to transform the messages.<br/>Example: <code>SELECT\
            \ * FROM \"test/topic\" WHERE payload.x = 1</code>"
          example: SELECT * FROM "test/topic" WHERE payload.x = 1
        actions:
          type: array
          description: "A list of actions of the rule.<br/>An action can be a string\
            \ that refers to the channel ID of an EMQX bridge, or an object<br/>that\
            \ refers to a function.<br/>There a some built-in functions like \"republish\"\
            \ and \"console\", and we also support user<br/>provided functions in\
            \ the format: \"{module}:{function}\".<br/>The actions in the list are\
            \ executed sequentially.<br/>This means that if one of the action is executing\
            \ slowly, all the following actions will not<br/>be executed until it\
            \ returns.<br/>If one of the action crashed, all other actions come after\
            \ it will still be executed, in the<br/>original order.<br/>If there's\
            \ any error when running an action, there will be an error message, and\
            \ the 'failure'<br/>counter of the function action or the bridge channel\
            \ will increase."
          example:
          - webhook:my_webhook
          - args:
              payload: "${payload}"
              topic: t/1
            function: republish
          - function: console
          items:
            oneOf:
            - $ref: '#/components/schemas/rule_engine.user_provided_function'
            - $ref: '#/components/schemas/rule_engine.builtin_action_console'
            - $ref: '#/components/schemas/rule_engine.builtin_action_republish'
            - type: string
          default: []
        enable:
          type: boolean
          description: Enable or disable the rule
          default: true
        description:
          type: string
          description: The description of the rule
          example: Some description
          default: ""
        metadata:
          type: object
          description: "Rule metadata, do not change manually"
          example: {}
    listeners.ws_required_bind:
      required:
      - bind
      - id
      - type
      type: object
      properties:
        type:
          type: string
          description: Listener type
          enum:
          - ws
        running:
          type: boolean
          description: Listener status
        id:
          type: string
          description: Listener id
        current_connections:
          minimum: 0
          type: integer
          description: Current connections
        enable:
          type: boolean
          description: Enable listener.
          default: true
        bind:
          type: string
          description: IP address and port for the listening socket.
          example: 127.0.0.1:80
          default: "8083"
        acceptors:
          minimum: 1
          type: integer
          description: The size of the listener's receiving pool.
          default: 16
        max_connections:
          description: The maximum number of concurrent connections allowed by the
            listener.
          oneOf:
          - minimum: 1
            type: integer
          - type: string
            enum:
            - infinity
          default: infinity
        mountpoint:
          type: string
          description: "When publishing or subscribing, prefix all topics with a mountpoint\
            \ string.<br/>The prefixed string will be removed from the topic name\
            \ when the message<br/>is delivered to the subscriber. The mountpoint\
            \ is a way that users can use<br/>to implement isolation of message routing\
            \ between different listeners.<br/>For example if a client A subscribes\
            \ to `t` with `listeners.tcp.\\<name>.mountpoint`<br/>set to `some_tenant`,\
            \ then the client actually subscribes to the topic<br/>`some_tenant/t`.\
            \ Similarly, if another client B (connected to the same listener<br/>as\
            \ the client A) sends a message to topic `t`, the message is routed<br/>to\
            \ all the clients subscribed `some_tenant/t`, so client A will receive\
            \ the<br/>message, with topic name `t`.<br/><br/>Set to `\"\"` to disable\
            \ the feature.<br/><br/><br/>Variables in mountpoint string:<br/>  - <code>${clientid}</code>:\
            \ clientid<br/>  - <code>${username}</code>: username"
          default: ""
        enable_authn:
          type: string
          description: "Set <code>true</code> (default) to enable client authentication\
            \ on this listener, the authentication<br/>process goes through the configured\
            \ authentication chain.<br/>When set to <code>false</code> to allow any\
            \ clients with or without authentication information such as username\
            \ or password to log in.<br/>When set to <code>quick_deny_anonymous</code>,\
            \ it behaves like when set to <code>true</code>, but clients will be<br/>denied\
            \ immediately without going through any authenticators if <code>username</code>\
            \ is not provided. This is useful to fence off<br/>anonymous clients early."
          default: "true"
          enum:
          - "true"
          - "false"
          - quick_deny_anonymous
        max_conn_rate:
          type: string
          description: "Maximum connection rate.<br/><br/>This is used to limit the\
            \ connection rate for this listener,<br/>once the limit is reached, new\
            \ connections will be deferred or refused"
          example: 1000/s
        messages_rate:
          type: string
          description: "Messages publish rate.<br/><br/>This is used to limit the\
            \ inbound message numbers for each client connected to this listener,<br/>once\
            \ the limit is reached, the restricted client will slow down and even\
            \ be hung for a while."
          example: 1000/s
        bytes_rate:
          type: string
          description: "Data publish rate.<br/><br/>This is used to limit the inbound\
            \ bytes rate for each client connected to this listener,<br/>once the\
            \ limit is reached, the restricted client will slow down and even be hung\
            \ for a while."
          example: 100MB/s
        access_rules:
          type: array
          description: "The access control rules for this listener.<br/>See: https://github.com/emqtt/esockd#allowdeny"
          items:
            type: string
          default:
          - allow all
        proxy_protocol:
          type: boolean
          description: "Enable the Proxy Protocol V1/2 if the EMQX cluster is deployed\
            \ behind HAProxy or Nginx.<br/><br/>See: https://www.haproxy.com/blog/haproxy/proxy-protocol/"
          default: false
        proxy_protocol_timeout:
          type: string
          description: Timeout for proxy protocol. EMQX will close the TCP connection
            if proxy protocol packet is not received within the timeout.
          example: 12m
          default: 3s
        tcp_options:
          $ref: '#/components/schemas/broker.tcp_opts'
        websocket:
          $ref: '#/components/schemas/broker.ws_opts'
    authn.redis_single:
      required:
      - backend
      - cmd
      - mechanism
      - server
      type: object
      properties:
        mechanism:
          type: string
          description: Authentication mechanism.
          enum:
          - password_based
        backend:
          type: string
          description: Backend type.
          enum:
          - redis
        cmd:
          type: string
          description: "The Redis Command used to query data for authentication such\
            \ as password hash, currently only supports <code>HGET</code> and <code>HMGET</code>."
        password_hash_algorithm:
          description: Options for password hash verification.
          oneOf:
          - $ref: '#/components/schemas/authn-hash.simple'
          - $ref: '#/components/schemas/authn-hash.pbkdf2'
          - $ref: '#/components/schemas/authn-hash.bcrypt'
          default:
            name: sha256
            salt_position: prefix
        enable:
          type: boolean
          description: Set to <code>true</code> or <code>false</code> to disable this
            auth provider.
          default: true
        server:
          type: string
          description: "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A\
            \ host entry has the following form: `Host[:Port]`.<br/><br/>The Redis\
            \ default port 6379 is used if `[:Port]` is not specified."
        redis_type:
          type: string
          description: Single mode. Must be set to 'single' when Redis server is running
            in single mode.
          default: single
          enum:
          - single
        pool_size:
          minimum: 1
          type: integer
          description: Size of the connection pool towards the bridge target service.
          default: 8
        password:
          type: string
          description: "The password associated with the bridge, used for authentication\
            \ with the external database."
          format: password
        database:
          minimum: 0
          type: integer
          description: Redis database ID.
          default: 0
        auto_reconnect:
          type: boolean
          description: Deprecated. Enable automatic reconnect to the database.
          deprecated: true
          default: true
        ssl:
          $ref: '#/components/schemas/broker.ssl_client_opts'
    listeners.listener_type_status:
      required:
      - enable
      - ids
      - type
      type: object
      properties:
        type:
          type: string
          description: Listener type
          enum:
          - tcp
          - ssl
          - ws
          - wss
          - quic
        enable:
          type: boolean
          description: Listener enable
        ids:
          type: array
          description: Listener Ids
          items:
            type: string
        status:
          $ref: '#/components/schemas/listeners.status'
        node_status:
          type: array
          items:
            $ref: '#/components/schemas/listeners.node_status'
      example:
        node_status:
        - node: emqx@127.0.0.1
          status: null
        - node: emqx@127.0.0.1
          status: null
        enable: true
        ids:
        - ids
        - ids
        type: tcp
        status:
          running: ""
          current_connections: 0
          max_connections: ""
    emqx_authz_api_schema.redis_sentinel:
      required:
      - cmd
      - sentinel
      - servers
      - type
      type: object
      properties:
        enable:
          type: boolean
          description: Set to <code>true</code> or <code>false</code> to disable this
            ACL provider.
          default: true
        type:
          type: string
          description: Backend type.
          default: redis
          enum:
          - redis
        cmd:
          type: string
          description: Database query used to retrieve authorization data.
          example: HGETALL mqtt_authz
        servers:
          type: string
          description: "A Node list for Cluster to connect to. The nodes should be\
            \ separated with commas, such as: `Node[,Node].`<br/>For each Node should\
            \ be: The IPv4 or IPv6 address or the hostname to connect to.<br/>A host\
            \ entry has the following form: `Host[:Port]`.<br/>The Redis default port\
            \ 6379 is used if `[:Port]` is not specified."
        redis_type:
          type: string
          description: Sentinel mode. Must be set to 'sentinel' when Redis server
            is running in sentinel mode.
          default: sentinel
          enum:
          - sentinel
        sentinel:
          type: string
          description: The cluster name in Redis sentinel mode.
        pool_size:
          minimum: 1
          type: integer
          description: Size of the connection pool towards the bridge target service.
          default: 8
        password:
          type: string
          description: "The password associated with the bridge, used for authentication\
            \ with the external database."
          format: password
        database:
          minimum: 0
          type: integer
          description: Redis database ID.
          default: 0
        auto_reconnect:
          type: boolean
          description: Deprecated. Enable automatic reconnect to the database.
          deprecated: true
          default: true
        ssl:
          $ref: '#/components/schemas/broker.ssl_client_opts'
    emqx_authz_api_schema.mysql:
      required:
      - database
      - query
      - server
      - type
      type: object
      properties:
        enable:
          type: boolean
          description: Set to <code>true</code> or <code>false</code> to disable this
            ACL provider.
          default: true
        type:
          type: string
          description: Backend type.
          default: mysql
          enum:
          - mysql
        query:
          type: string
          description: Database query used to retrieve authorization data.
        server:
          type: string
          description: "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A\
            \ host entry has the following form: `Host[:Port]`.<br/><br/>The MySQL\
            \ default port 3306 is used if `[:Port]` is not specified."
        database:
          type: string
          description: Database name.
        pool_size:
          minimum: 1
          type: integer
          description: Size of the connection pool towards the bridge target service.
          default: 8
        username:
          type: string
          description: The username associated with the bridge in the external database
            used for authentication or identification purposes.
          default: root
        password:
          type: string
          description: "The password associated with the bridge, used for authentication\
            \ with the external database."
          format: password
        auto_reconnect:
          type: boolean
          description: Deprecated. Enable automatic reconnect to the database.
          deprecated: true
          default: true
        ssl:
          $ref: '#/components/schemas/broker.ssl_client_opts'
    emqx_mgmt_api_stats.aggergate_data:
      type: object
      properties:
        node:
          type: string
          description: Node name
          example: emqx@127.0.0.1
        channels.count:
          minimum: 0
          type: integer
          description: sessions.count
          example: 0
        channels.max:
          minimum: 0
          type: integer
          description: session.max
          example: 0
        connections.count:
          minimum: 0
          type: integer
          description: Number of current connections
          example: 0
        connections.max:
          minimum: 0
          type: integer
          description: Historical maximum number of connections
          example: 0
        delayed.count:
          minimum: 0
          type: integer
          description: Number of delayed messages
          example: 0
        delayed.max:
          minimum: 0
          type: integer
          description: Historical maximum number of delayed messages
          example: 0
        live_connections.count:
          minimum: 0
          type: integer
          description: Number of current live connections
          example: 0
        live_connections.max:
          minimum: 0
          type: integer
          description: Historical maximum number of live connections
          example: 0
        retained.count:
          minimum: 0
          type: integer
          description: Number of currently retained messages
          example: 0
        retained.max:
          minimum: 0
          type: integer
          description: Historical maximum number of retained messages
          example: 0
        sessions.count:
          minimum: 0
          type: integer
          description: Number of current sessions
          example: 0
        sessions.max:
          minimum: 0
          type: integer
          description: Historical maximum number of sessions
          example: 0
        suboptions.count:
          minimum: 0
          type: integer
          description: subscriptions.count
          example: 0
        suboptions.max:
          minimum: 0
          type: integer
          description: subscriptions.max
          example: 0
        subscribers.count:
          minimum: 0
          type: integer
          description: Number of current subscribers
          example: 0
        subscribers.max:
          minimum: 0
          type: integer
          description: Historical maximum number of subscribers
          example: 0
        subscriptions.count:
          minimum: 0
          type: integer
          description: "Number of current subscriptions, including shared subscriptions"
          example: 0
        subscriptions.max:
          minimum: 0
          type: integer
          description: Historical maximum number of subscriptions
          example: 0
        subscriptions.shared.count:
          minimum: 0
          type: integer
          description: Number of current shared subscriptions
          example: 0
        subscriptions.shared.max:
          minimum: 0
          type: integer
          description: Historical maximum number of shared subscriptions
          example: 0
        topics.count:
          minimum: 0
          type: integer
          description: Number of current topics
          example: 0
        topics.max:
          minimum: 0
          type: integer
          description: Historical maximum number of topics
          example: 0
    listeners.ws_required_bind-with_name:
      required:
      - bind
      - name
      - type
      type: object
      properties:
        type:
          type: string
          description: Listener type
          enum:
          - ws
        running:
          type: boolean
          description: Listener status
        name:
          type: string
          description: Listener name
        current_connections:
          minimum: 0
          type: integer
          description: Current connections
        enable:
          type: boolean
          description: Enable listener.
          default: true
        bind:
          type: string
          description: IP address and port for the listening socket.
          example: 127.0.0.1:80
          default: "8083"
        acceptors:
          minimum: 1
          type: integer
          description: The size of the listener's receiving pool.
          default: 16
        max_connections:
          description: The maximum number of concurrent connections allowed by the
            listener.
          oneOf:
          - minimum: 1
            type: integer
          - type: string
            enum:
            - infinity
          default: infinity
        mountpoint:
          type: string
          description: "When publishing or subscribing, prefix all topics with a mountpoint\
            \ string.<br/>The prefixed string will be removed from the topic name\
            \ when the message<br/>is delivered to the subscriber. The mountpoint\
            \ is a way that users can use<br/>to implement isolation of message routing\
            \ between different listeners.<br/>For example if a client A subscribes\
            \ to `t` with `listeners.tcp.\\<name>.mountpoint`<br/>set to `some_tenant`,\
            \ then the client actually subscribes to the topic<br/>`some_tenant/t`.\
            \ Similarly, if another client B (connected to the same listener<br/>as\
            \ the client A) sends a message to topic `t`, the message is routed<br/>to\
            \ all the clients subscribed `some_tenant/t`, so client A will receive\
            \ the<br/>message, with topic name `t`.<br/><br/>Set to `\"\"` to disable\
            \ the feature.<br/><br/><br/>Variables in mountpoint string:<br/>  - <code>${clientid}</code>:\
            \ clientid<br/>  - <code>${username}</code>: username"
          default: ""
        enable_authn:
          type: string
          description: "Set <code>true</code> (default) to enable client authentication\
            \ on this listener, the authentication<br/>process goes through the configured\
            \ authentication chain.<br/>When set to <code>false</code> to allow any\
            \ clients with or without authentication information such as username\
            \ or password to log in.<br/>When set to <code>quick_deny_anonymous</code>,\
            \ it behaves like when set to <code>true</code>, but clients will be<br/>denied\
            \ immediately without going through any authenticators if <code>username</code>\
            \ is not provided. This is useful to fence off<br/>anonymous clients early."
          default: "true"
          enum:
          - "true"
          - "false"
          - quick_deny_anonymous
        max_conn_rate:
          type: string
          description: "Maximum connection rate.<br/><br/>This is used to limit the\
            \ connection rate for this listener,<br/>once the limit is reached, new\
            \ connections will be deferred or refused"
          example: 1000/s
        messages_rate:
          type: string
          description: "Messages publish rate.<br/><br/>This is used to limit the\
            \ inbound message numbers for each client connected to this listener,<br/>once\
            \ the limit is reached, the restricted client will slow down and even\
            \ be hung for a while."
          example: 1000/s
        bytes_rate:
          type: string
          description: "Data publish rate.<br/><br/>This is used to limit the inbound\
            \ bytes rate for each client connected to this listener,<br/>once the\
            \ limit is reached, the restricted client will slow down and even be hung\
            \ for a while."
          example: 100MB/s
        access_rules:
          type: array
          description: "The access control rules for this listener.<br/>See: https://github.com/emqtt/esockd#allowdeny"
          items:
            type: string
          default:
          - allow all
        proxy_protocol:
          type: boolean
          description: "Enable the Proxy Protocol V1/2 if the EMQX cluster is deployed\
            \ behind HAProxy or Nginx.<br/><br/>See: https://www.haproxy.com/blog/haproxy/proxy-protocol/"
          default: false
        proxy_protocol_timeout:
          type: string
          description: Timeout for proxy protocol. EMQX will close the TCP connection
            if proxy protocol packet is not received within the timeout.
          example: 12m
          default: 3s
        tcp_options:
          $ref: '#/components/schemas/broker.tcp_opts'
        websocket:
          $ref: '#/components/schemas/broker.ws_opts'
    emqx_rule_api_schema.ctx_delivery_dropped:
      required:
      - event_type
      type: object
      properties:
        event_type:
          type: string
          description: Event Type
          enum:
          - delivery_dropped
        id:
          type: string
          description: Message ID
        reason:
          type: string
          description: The Reason for Dropping
        from_clientid:
          type: string
          description: The Client ID
        from_username:
          type: string
          description: The User Name
        clientid:
          type: string
          description: The Client ID
        username:
          type: string
          description: Username
        payload:
          type: string
          description: The Message Payload
        peerhost:
          type: string
          description: The IP Address of the Peer Client
        topic:
          type: string
          description: Message Topic
        publish_received_at:
          type: integer
          description: The Time that this Message is Received
        qos:
          maximum: 2
          minimum: 0
          type: integer
          description: The Message QoS
          example: 0
    connector-mqtt.ingress_remote:
      required:
      - topic
      type: object
      properties:
        topic:
          type: string
          description: Receive messages from which topic of the remote broker
        qos:
          maximum: 2
          minimum: 0
          type: integer
          description: The QoS level to be used when subscribing to the remote broker
          example: 0
          default: 1
    emqx_authz_api_sources.sources:
      type: object
      properties:
        sources:
          type: array
          description: Authorization sources
          items:
            oneOf:
            - $ref: '#/components/schemas/emqx_authz_api_schema.file'
            - $ref: '#/components/schemas/emqx_authz_api_schema.postgresql'
            - $ref: '#/components/schemas/emqx_authz_api_schema.mysql'
            - $ref: '#/components/schemas/emqx_authz_api_schema.built_in_database'
            - $ref: '#/components/schemas/emqx_authz_api_schema.redis_cluster'
            - $ref: '#/components/schemas/emqx_authz_api_schema.redis_sentinel'
            - $ref: '#/components/schemas/emqx_authz_api_schema.redis_single'
            - $ref: '#/components/schemas/emqx_authz_api_schema.mongo_sharded'
            - $ref: '#/components/schemas/emqx_authz_api_schema.mongo_rs'
            - $ref: '#/components/schemas/emqx_authz_api_schema.mongo_single'
            - $ref: '#/components/schemas/emqx_authz_api_schema.http_post'
            - $ref: '#/components/schemas/emqx_authz_api_schema.http_get'
      example:
        sources:
        - ""
        - ""
    emqx_mgmt_api_alarms.alarm:
      type: object
      properties:
        node:
          type: string
          description: The name of the node that triggered this alarm.
          example: emqx@172.20.0.2
        name:
          type: string
          description: The name of the node that triggered this alarm.
          example: high_system_memory_usage
        message:
          type: string
          description: "Alarm message, which describes the alarm content in a human-readable\
            \ format."
          example: System memory usage is higher than 70%
        details:
          type: object
          description: "Alarm details, provides more alarm information, mainly for\
            \ program processing."
          example:
            high_watermark: 70
        duration:
          type: integer
          description: Indicates how long the alarm has been active in milliseconds.
          example: 297056
        activate_at:
          type: string
          description: "Alarm start time, using rfc3339 standard time format."
          example: 2021-10-25T11:52:52.548+08:00
        deactivate_at:
          type: string
          description: "Alarm end time, using rfc3339 standard time format."
          example: 2021-10-31T10:52:52.548+08:00
      example:
        duration: 297056
        node: emqx@172.20.0.2
        deactivate_at: 2021-10-31T10:52:52.548+08:00
        name: high_system_memory_usage
        details:
          high_watermark: 70
        message: System memory usage is higher than 70%
        activate_at: 2021-10-25T11:52:52.548+08:00
    broker.ssl_client_opts:
      type: object
      properties:
        cacertfile:
          type: string
          description: "Trusted PEM format CA certificates bundle file.<br/><br/>The\
            \ certificates in this file are used to verify the TLS peer's certificates.<br/>Append\
            \ new certificates to the file if new CAs are to be trusted.<br/>There\
            \ is no need to restart EMQX to have the updated file loaded, because<br/>the\
            \ system regularly checks if file has been updated (and reload).<br/><br/>NOTE:\
            \ invalidating (deleting) a certificate from the file will not affect<br/>already\
            \ established connections."
        cacerts:
          type: boolean
          description: "When enabled, uses the system trusted CA certificates for\
            \ establishing to TLS connections."
          default: false
        certfile:
          type: string
          description: "PEM format certificates chain file.<br/><br/>The certificates\
            \ in this file should be in reversed order of the certificate<br/>issue\
            \ chain. That is, the host's certificate should be placed in the beginning<br/>of\
            \ the file, followed by the immediate issuer certificate and so on.<br/>Although\
            \ the root CA certificate is optional, it should be placed at the end\
            \ of<br/>the file if it is to be added."
        keyfile:
          type: string
          description: PEM format private key file.
        verify:
          type: string
          description: Enable or disable peer verification.
          default: verify_none
          enum:
          - verify_peer
          - verify_none
        reuse_sessions:
          type: boolean
          description: Enable TLS session reuse.</br><br/>Has no effect when TLS version
            is configured (or negotiated) to 1.3
          default: true
        depth:
          minimum: 0
          type: integer
          description: "Maximum number of non-self-issued intermediate certificates\
            \ that can follow the peer certificate in a valid certification path.<br/>So,\
            \ if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/><br/>if\
            \ 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/><br/>if 2 the\
            \ path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA."
          default: 10
        password:
          type: string
          description: String containing the user's password. Only used if the private
            key file is password-protected.
          format: password
          example: ""
        versions:
          type: array
          description: "All TLS/DTLS versions to be supported.<br/><br/>NOTE: PSK\
            \ ciphers are suppressed by 'tlsv1.3' version config.<br/><br/>In case\
            \ PSK cipher suites are intended, make sure to configure<br/><code>['tlsv1.2',\
            \ 'tlsv1.1']</code> here."
          items:
            type: string
          default:
          - tlsv1.3
          - tlsv1.2
        ciphers:
          type: array
          description: "This config holds TLS cipher suite names separated by comma,<br/>or\
            \ as an array of strings. e.g.<br/><code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"\
            </code> or<br/><code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"\
            ]</code>.<br/><br/><br/>Ciphers (and their ordering) define the way in\
            \ which the<br/>client and server encrypts information over the network\
            \ connection.<br/>Selecting a good cipher suite is critical for the<br/>application's\
            \ data security, confidentiality and performance.<br/><br/>The names should\
            \ be in OpenSSL string format (not RFC format).<br/>All default values\
            \ and examples provided by EMQX config<br/>documentation are all in OpenSSL\
            \ format.<br/><br/><br/>NOTE: Certain cipher suites are only compatible\
            \ with<br/>specific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or\
            \ 'tlsv1.3')<br/>incompatible cipher suites will be silently dropped.<br/>For\
            \ instance, if only 'tlsv1.3' is given in the <code>versions</code>,<br/>configuring\
            \ cipher suites for other versions will have no effect.<br/><br/><br/><br/>NOTE:\
            \ PSK ciphers are suppressed by 'tlsv1.3' version config<br/><br/>If PSK\
            \ cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/><br/>PSK\
            \ cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,<br/>RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,<br/>RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,<br/>RSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"\
            </code>"
          items:
            type: string
          default: []
        secure_renegotiate:
          type: boolean
          description: "SSL parameter renegotiation is a feature that allows a client\
            \ and a server<br/>to renegotiate the parameters of the SSL connection\
            \ on the fly.<br/>RFC 5746 defines a more secure way of doing this. By\
            \ enabling secure renegotiation,<br/>you drop support for the insecure\
            \ renegotiation, prone to MitM attacks.</br><br/>Has no effect when TLS\
            \ version is configured (or negotiated) to 1.3"
          default: true
        log_level:
          type: string
          description: Log level for SSL communication. Default is 'notice'. Set to
            'debug' to inspect TLS handshake messages.
          default: notice
          enum:
          - emergency
          - alert
          - critical
          - error
          - warning
          - notice
          - info
          - debug
          - none
          - all
        hibernate_after:
          type: string
          description: Hibernate the SSL process after idling for amount of time reducing
            its memory footprint.
          example: 12m
          default: 5s
        enable:
          type: boolean
          description: Enable TLS.
          default: false
        server_name_indication:
          description: "Specify the host name to be used in TLS Server Name Indication\
            \ extension.<br/><br/>For instance, when connecting to \"server.example.net\"\
            , the genuine server<br/>which accepts the connection and performs TLS\
            \ handshake may differ from the<br/>host the TLS client initially connects\
            \ to, e.g. when connecting to an IP address<br/>or when the host has multiple\
            \ resolvable DNS records <br/><br/>If not specified, it will default to\
            \ the host name string which is used<br/>to establish the connection,\
            \ unless it is IP addressed used.<br/><br/>The host name is then also\
            \ used in the host name verification of the peer<br/>certificate.<br/>\
            \ The special value 'disable' prevents the Server Name<br/>Indication\
            \ extension from being sent and disables the hostname<br/>verification\
            \ check."
          example: disable
          oneOf:
          - type: string
          - type: string
            enum:
            - disable
    emqx_stomp_schema.stomp_frame:
      type: object
      properties:
        max_headers:
          minimum: 0
          type: integer
          description: The maximum number of Header
          default: 10
        max_headers_length:
          minimum: 0
          type: integer
          description: The maximum string length of the Header Value
          default: 1024
        max_body_length:
          type: integer
          description: Maximum number of bytes of Body allowed per Stomp packet
          default: 65536
    emqx_exproto_schema.exproto_grpc_handler:
      required:
      - address
      - service_name
      type: object
      properties:
        address:
          type: string
          description: gRPC server address.
        service_name:
          description: "The service name to handle the connection events.<br/>In the\
            \ initial version, we expected to use streams to improve the efficiency<br/>of\
            \ requests in `ConnectionHandler`. But unfortunately, events between different<br/>streams\
            \ are out of order. It causes the `OnSocketCreated` event to may arrive<br/>later\
            \ than `OnReceivedBytes`.<br/>So we added the `ConnectionUnaryHandler`\
            \ service since v5.0.25 and forced<br/>the use of Unary in it to avoid\
            \ ordering problems."
          oneOf:
          - type: string
            enum:
            - ConnectionUnaryHandler
          - type: string
            enum:
            - ConnectionHandler
          default: ConnectionUnaryHandler
        ssl_options:
          $ref: '#/components/schemas/broker.ssl_client_opts'
    authn.mongo_single:
      required:
      - backend
      - collection
      - database
      - mechanism
      - server
      type: object
      properties:
        mechanism:
          type: string
          description: Authentication mechanism.
          enum:
          - password_based
        backend:
          type: string
          description: Backend type.
          enum:
          - mongodb
        collection:
          type: string
          description: Collection used to store authentication data.
        filter:
          type: object
          description: "Conditional expression that defines the filter condition in\
            \ the query.<br/>Filter supports the following placeholders:<br/>- <code>${username}</code>:\
            \ Will be replaced at runtime with <code>Username</code> used by the client\
            \ when connecting<br/>- <code>${clientid}</code>: Will be replaced at\
            \ runtime with <code>Client ID</code> used by the client when connecting"
          example: {}
          default: {}
        password_hash_field:
          type: string
          description: Document field that contains password hash.
          default: password_hash
        salt_field:
          type: string
          description: Document field that contains the password salt.
          default: salt
        is_superuser_field:
          type: string
          description: Document field that defines if the user has superuser privileges.
          default: is_superuser
        password_hash_algorithm:
          description: Options for password hash verification.
          oneOf:
          - $ref: '#/components/schemas/authn-hash.simple'
          - $ref: '#/components/schemas/authn-hash.pbkdf2'
          - $ref: '#/components/schemas/authn-hash.bcrypt'
          default:
            name: sha256
            salt_position: prefix
        enable:
          type: boolean
          description: Set to <code>true</code> or <code>false</code> to disable this
            auth provider.
          default: true
        mongo_type:
          type: string
          description: Standalone instance. Must be set to 'single' when MongoDB server
            is running in standalone mode.
          default: single
          enum:
          - single
        server:
          type: string
          description: "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A\
            \ host entry has the following form: `Host[:Port]`.<br/><br/>The MongoDB\
            \ default port 27017 is used if `[:Port]` is not specified."
        w_mode:
          type: string
          description: Write mode.
          default: unsafe
          enum:
          - unsafe
          - safe
        srv_record:
          type: boolean
          description: Use DNS SRV record.
          default: false
        pool_size:
          minimum: 1
          type: integer
          description: Size of the connection pool towards the bridge target service.
          default: 8
        username:
          type: string
          description: The username associated with the bridge in the external database
            used for authentication or identification purposes.
        password:
          type: string
          description: "The password associated with the bridge, used for authentication\
            \ with the external database."
          format: password
        auth_source:
          type: string
          description: Database name associated with the user's credentials.
        database:
          type: string
          description: Database name.
        topology:
          $ref: '#/components/schemas/emqx_mongodb.topology'
        ssl:
          $ref: '#/components/schemas/broker.ssl_client_opts'
    emqx_authz_api_schema.file:
      required:
      - rules
      - type
      type: object
      properties:
        enable:
          type: boolean
          description: Set to <code>true</code> or <code>false</code> to disable this
            ACL provider.
          default: true
        type:
          type: string
          description: Backend type.
          default: file
          enum:
          - file
        rules:
          type: string
          description: Authorization static file rules.
          example: |-
            {allow,{username,{re,"^dashboard$"}},subscribe,["$SYS/#"]}.
            {allow,{ipaddr,"127.0.0.1"},all,["$SYS/#","#"]}.
    exhook.detail_server_info:
      required:
      - name
      - url
      type: object
      properties:
        metrics:
          $ref: '#/components/schemas/exhook.metrics'
        node_metrics:
          type: array
          description: Metrics information of this server in all nodes
          items:
            $ref: '#/components/schemas/exhook.node_metrics'
        node_status:
          type: array
          description: status of this server in all nodes
          items:
            $ref: '#/components/schemas/exhook.node_status'
        hooks:
          type: array
          items:
            $ref: '#/components/schemas/exhook.hook_info'
        name:
          type: string
          description: Name of the exhook server
          example: default
        enable:
          type: boolean
          description: Enable this Exhook server
          default: true
        url:
          type: string
          description: URL of the gRPC server
          example: http://127.0.0.1:9000
        request_timeout:
          type: string
          description: The timeout of request gRPC server
          example: 12m
          default: 5s
        failed_action:
          type: string
          description: The value that is returned when the request to the gRPC server
            fails for any reason
          default: deny
          enum:
          - deny
          - ignore
        ssl:
          $ref: '#/components/schemas/exhook.ssl_conf'
        socket_options:
          $ref: '#/components/schemas/exhook.socket_options'
        auto_reconnect:
          description: "Whether to automatically reconnect (initialize) the gRPC server.<br/>When\
            \ gRPC is not available, Exhook tries to request the gRPC service at that\
            \ interval and reinitialize the list of mounted hooks."
          oneOf:
          - type: string
            example: 12m
          - type: string
            enum:
            - "false"
          default: 60s
        pool_size:
          minimum: 1
          type: integer
          description: The process pool size for gRPC client
          default: 8
      example:
        node_status:
        - node: node
          status: connected
        - node: node
          status: connected
        request_timeout: 12m
        pool_size: 1
        ssl:
          cacerts: false
          hibernate_after: 12m
          certfile: certfile
          server_name_indication: disable
          cacertfile: cacertfile
          reuse_sessions: true
          log_level: notice
          secure_renegotiate: true
          password: ""
          depth: 0
          versions:
          - versions
          - versions
          keyfile: keyfile
          enable: false
          ciphers:
          - ciphers
          - ciphers
          verify: verify_none
        url: http://127.0.0.1:9000
        node_metrics:
        - node: node
          metrics: null
        - node: node
          metrics: null
        enable: true
        name: default
        failed_action: deny
        metrics:
          rate: 1
          succeed: 0
          max_rate: 5
          failed: 6
        hooks:
        - name: name
          params:
            $name: $name
        - name: name
          params:
            $name: $name
        auto_reconnect: ""
        socket_options:
          sndbuf: 16KB
          recbuf: 64KB
          keepalive: true
          nodelay: true
    emqx_dashboard_monitor_api.sampler:
      type: object
      properties:
        time_stamp:
          minimum: 0
          type: integer
          description: Timestamp
        subscriptions:
          type: integer
          description: Subscriptions at the time of sampling. Can only represent the
            approximate state
        topics:
          type: integer
          description: Count topics at the time of sampling. Can only represent the
            approximate state
        connections:
          type: integer
          description: Sessions at the time of sampling. Can only represent the approximate
            state
        live_connections:
          type: integer
          description: Connections at the time of sampling. Can only represent the
            approximate state
        received:
          type: integer
          description: Received messages last 10 seconds
        sent:
          type: integer
          description: Sent messages last 10 seconds
        dropped:
          type: integer
          description: Dropped messages last 10 seconds
      example:
        subscriptions: 6
        time_stamp: 0
        topics: 1
        dropped: 9
        received: 2
        sent: 7
        connections: 5
        live_connections: 5
    emqx_rule_api_schema.ctx_check_authz_complete:
      required:
      - event_type
      type: object
      properties:
        event_type:
          type: string
          description: Event Type
          enum:
          - client_check_authz_complete
        clientid:
          type: string
          description: The Client ID
        username:
          type: string
          description: Username
        peerhost:
          type: string
          description: The IP Address of the Peer Client
        topic:
          type: string
          description: Message Topic
        action:
          type: string
          description: Publish or Subscribe
        authz_source:
          type: string
          description: "Cache, Plugs or Default"
        result:
          type: string
          description: Allow or Deny
    broker.ocsp:
      type: object
      properties:
        enable_ocsp_stapling:
          type: boolean
          description: "Whether to enable Online Certificate Status Protocol (OCSP)\
            \ stapling for the listener.  If set to true, requires defining the OCSP\
            \ responder URL and issuer PEM path."
          default: false
        responder_url:
          type: string
          description: URL for the OCSP responder to check the server certificate
            against.
          example: http://127.0.0.1
        issuer_pem:
          type: string
          description: PEM-encoded certificate of the OCSP issuer for the server certificate.
        refresh_interval:
          type: string
          description: The period to refresh the OCSP response for the server.
          example: 12m
          default: 5m
        refresh_http_timeout:
          type: string
          description: The timeout for the HTTP request when checking OCSP responses.
          example: 12m
          default: 15s
    bridge_webhook.creation_opts:
      type: object
      properties:
        worker_pool_size:
          maximum: 1024
          minimum: 1
          type: integer
          description: "The number of buffer workers. Only applicable for egress type\
            \ bridges.<br/>For bridges only have ingress direction data flow, it can\
            \ be set to 0 otherwise must be greater than 0."
          default: 16
        health_check_interval:
          type: string
          description: Health check interval.
          example: 32s
          default: 15s
        start_after_created:
          type: boolean
          description: Whether start the resource right after created.
          default: true
        start_timeout:
          type: string
          description: Time interval to wait for an auto-started resource to become
            healthy before responding resource creation requests.
          example: 32s
          default: 5s
        auto_restart_interval:
          deprecated: true
          oneOf:
          - type: string
            example: 32s
          - type: string
            enum:
            - infinity
          default: 15s
        query_mode:
          type: string
          description: "Query mode. Optional 'sync/async', default 'async'."
          default: async
          enum:
          - sync
          - async
        request_ttl:
          description: "Starting from the moment when the request enters the buffer,\
            \ if the request remains in the buffer for the specified time or is sent\
            \ but does not receive a response or acknowledgement in time, the request\
            \ is considered expired."
          oneOf:
          - type: string
            enum:
            - infinity
          - type: string
            example: 32s
          default: 45s
        inflight_window:
          minimum: 1
          type: integer
          description: "Query inflight window. When query_mode is set to async, this\
            \ config has to be set to 1 if messages from the same MQTT client have\
            \ to be strictly ordered."
          default: 100
        enable_queue:
          type: boolean
          description: "Enable disk buffer queue (only applicable for egress bridges).<br/>When\
            \ Enabled, messages will be buffered on disk when the bridge connection\
            \ is down.<br/>When disabled the messages are buffered in RAM only."
          deprecated: true
          default: false
        max_buffer_bytes:
          type: string
          description: Maximum number of bytes to buffer for each buffer worker.
          example: 32MB
          default: 256MB
    authn.jwt_public_key:
      required:
      - algorithm
      - mechanism
      type: object
      properties:
        algorithm:
          type: string
          description: "JWT signing algorithm, Supports HMAC (configured as <code>hmac-based</code>)\
            \ and RSA, ECDSA (configured as <code>public-key</code>)."
          enum:
          - public-key
        public_key:
          type: string
          description: The public key used to verify the JWT.
        mechanism:
          type: string
          description: Authentication mechanism.
          enum:
          - jwt
        acl_claim_name:
          type: string
          description: JWT claim name to use for getting ACL rules.
          default: acl
        verify_claims:
          type: array
          description: "A list of custom claims to validate, which is a list of name/value\
            \ pairs.<br/>Values can use the following placeholders:<br/>- <code>${username}</code>:\
            \ Will be replaced at runtime with <code>Username</code> used by the client\
            \ when connecting<br/>- <code>${clientid}</code>: Will be replaced at\
            \ runtime with <code>Client ID</code> used by the client when connecting<br/>Authentication\
            \ will verify that the value of claims in the JWT (taken from the Password\
            \ field) matches what is required in <code>verify_claims</code>."
          items:
            type: string
            example: any
          default: []
        from:
          type: string
          description: Field to take JWT from.
          default: password
          enum:
          - username
          - password
        enable:
          type: boolean
          description: Set to <code>true</code> or <code>false</code> to disable this
            auth provider.
          default: true
    authz.metrics_status_fields:
      type: object
      properties:
        resource_metrics:
          $ref: '#/components/schemas/authz.resource_metrics'
        node_resource_metrics:
          type: array
          description: The metrics of the resource for each node.
          items:
            $ref: '#/components/schemas/authz.node_resource_metrics'
        metrics:
          $ref: '#/components/schemas/authz.metrics'
        node_metrics:
          type: array
          description: The metrics of the resource for each node.
          items:
            $ref: '#/components/schemas/authz.node_metrics'
        status:
          type: string
          description: The status of the resource.
          enum:
          - connected
          - disconnected
          - connecting
          - inconsistent
        node_status:
          type: array
          description: The status of the resource for each node.
          items:
            $ref: '#/components/schemas/authz.node_status'
        node_error:
          type: array
          description: The error of node.
          items:
            $ref: '#/components/schemas/authz.node_error'
      example:
        node_metrics:
        - node: emqx@127.0.0.1
          metrics: null
        - node: emqx@127.0.0.1
          metrics: null
        node_status:
        - node: emqx@127.0.0.1
          status: connected
        - node: emqx@127.0.0.1
          status: connected
        node_resource_metrics:
        - node: emqx@127.0.0.1
          metrics: null
        - node: emqx@127.0.0.1
          metrics: null
        metrics:
          allow: 9
          nomatch: 2.027123023002321833274663731572218239307403564453125
          rate_last5m: 1.231513536777255612975068288506008684635162353515625
          total: 7
          deny: 3
          rate: 4.1456080298839363962315474054776132106781005859375
          rate_max: 7.3862819483858839220147274318151175975799560546875
        resource_metrics:
          rate_last5m: 2.3021358869347654518833223846741020679473876953125
          rate: 5.962133916683182377482808078639209270477294921875
          rate_max: 5.63737665663332876420099637471139430999755859375
          success: 6
          matched: 0
          failed: 1
        node_error:
        - node: emqx@127.0.0.1
          error: error
        - node: emqx@127.0.0.1
          error: error
        status: connected
    emqx_authn_api.response_user:
      required:
      - user_id
      type: object
      properties:
        user_id:
          type: string
        is_superuser:
          type: boolean
          default: false
      example:
        is_superuser: false
        user_id: user_id
    broker.sysmon_vm:
      type: object
      properties:
        process_check_interval:
          type: string
          description: The time interval for the periodic process limit check.
          example: 12m
          default: 30s
        process_high_watermark:
          type: number
          description: "The threshold, as percentage of processes, for how many<br/>\
            \ processes can simultaneously exist at the local node before the corresponding<br/>\
            \ alarm is raised."
        process_low_watermark:
          type: number
          description: "The threshold, as percentage of processes, for how many<br/>\
            \ processes can simultaneously exist at the local node before the corresponding<br/>\
            \ alarm is cleared."
        long_gc:
          description: "When an Erlang process spends long time to perform garbage\
            \ collection, a warning level <code>long_gc</code> log is emitted,<br/>and\
            \ an MQTT message is published to the system topic <code>$SYS/sysmon/long_gc</code>."
          oneOf:
          - type: string
            example: 12m
          - type: string
            enum:
            - disabled
          default: disabled
        long_schedule:
          description: "When the Erlang VM detect a task scheduled for too long, a\
            \ warning level 'long_schedule' log is emitted,<br/>and an MQTT message\
            \ is published to the system topic <code>$SYS/sysmon/long_schedule</code>."
          oneOf:
          - type: string
            example: 12m
          - type: string
            enum:
            - disabled
          default: 240ms
        large_heap:
          description: "When an Erlang process consumed a large amount of memory for\
            \ its heap space,<br/>the system will write a warning level <code>large_heap</code>\
            \ log, and an MQTT message is published to<br/>the system topic <code>$SYS/sysmon/large_heap</code>."
          oneOf:
          - type: string
            example: 32MB
          - type: string
            enum:
            - disabled
          default: 32MB
        busy_dist_port:
          type: boolean
          description: "When the RPC connection used to communicate with other nodes\
            \ in the cluster is overloaded,<br/>there will be a <code>busy_dist_port</code>\
            \ warning log,<br/>and an MQTT message is published to system topic <code>$SYS/sysmon/busy_dist_port</code>."
          default: true
        busy_port:
          type: boolean
          description: "When a port (e.g. TCP socket) is overloaded, there will be\
            \ a <code>busy_port</code> warning log,<br/>and an MQTT message is published\
            \ to the system topic <code>$SYS/sysmon/busy_port</code>."
          default: true
      example:
        long_schedule: ""
        busy_dist_port: true
        process_check_interval: 12m
        busy_port: true
        long_gc: ""
        large_heap: ""
        process_high_watermark: 0.80082819046101150206595775671303272247314453125
        process_low_watermark: 6.02745618307040320615897144307382404804229736328125
    exhook.metrics:
      type: object
      properties:
        succeed:
          type: integer
          description: The number of times the hooks execution successful
        failed:
          type: integer
          description: The number of times the hook execution failed
        rate:
          type: integer
          description: The call rate of hooks
        max_rate:
          type: integer
          description: Maximum call rate of hooks
      example:
        rate: 1
        succeed: 0
        max_rate: 5
        failed: 6
    emqx_rule_api_schema.ctx_disconnected:
      required:
      - event_type
      type: object
      properties:
        event_type:
          type: string
          description: Event Type
          enum:
          - client_disconnected
        clientid:
          type: string
          description: The Client ID
        username:
          type: string
          description: Username
        reason:
          type: string
          description: The Reason for Disconnect
        peername:
          type: string
          description: The IP Address and Port of the Peer Client
        sockname:
          type: string
          description: The IP Address and Port of the Local Listener
        disconnected_at:
          type: integer
          description: The Time that this Client is Disconnected
    dashboard.listeners:
      type: object
      properties:
        http:
          $ref: '#/components/schemas/dashboard.http'
        https:
          $ref: '#/components/schemas/dashboard.https'
      example:
        http:
          proxy_header: false
          max_connections: 6
          bind: 0.0.0.0:18083
          backlog: 1
          ipv6_v6only: false
          inet6: false
          send_timeout: 12m
          num_acceptors: 0
        https:
          proxy_header: false
          max_connections: 2
          bind: 0.0.0.0:18084
          backlog: 7
          ssl_options:
            cacerts: false
            hibernate_after: 12m
            certfile: "${EMQX_ETC_DIR}/certs/cert.pem"
            client_renegotiation: true
            cacertfile: "${EMQX_ETC_DIR}/certs/cacert.pem"
            reuse_sessions: true
            log_level: notice
            handshake_timeout: 12m
            secure_renegotiate: true
            dhfile: dhfile
            password: ""
            depth: 0
            versions:
            - versions
            - versions
            keyfile: "${EMQX_ETC_DIR}/certs/key.pem"
            honor_cipher_order: true
            ciphers:
            - ciphers
            - ciphers
            verify: verify_none
          ipv6_v6only: false
          inet6: false
          send_timeout: 12m
          num_acceptors: 5
    listeners.tcp_required_bind:
      required:
      - bind
      - id
      - type
      type: object
      properties:
        type:
          type: string
          description: Listener type
          enum:
          - tcp
        running:
          type: boolean
          description: Listener status
        id:
          type: string
          description: Listener id
        current_connections:
          minimum: 0
          type: integer
          description: Current connections
        enable:
          type: boolean
          description: Enable listener.
          default: true
        bind:
          type: string
          description: IP address and port for the listening socket.
          example: 127.0.0.1:80
          default: "1883"
        acceptors:
          minimum: 1
          type: integer
          description: The size of the listener's receiving pool.
          default: 16
        max_connections:
          description: The maximum number of concurrent connections allowed by the
            listener.
          oneOf:
          - minimum: 1
            type: integer
          - type: string
            enum:
            - infinity
          default: infinity
        mountpoint:
          type: string
          description: "When publishing or subscribing, prefix all topics with a mountpoint\
            \ string.<br/>The prefixed string will be removed from the topic name\
            \ when the message<br/>is delivered to the subscriber. The mountpoint\
            \ is a way that users can use<br/>to implement isolation of message routing\
            \ between different listeners.<br/>For example if a client A subscribes\
            \ to `t` with `listeners.tcp.\\<name>.mountpoint`<br/>set to `some_tenant`,\
            \ then the client actually subscribes to the topic<br/>`some_tenant/t`.\
            \ Similarly, if another client B (connected to the same listener<br/>as\
            \ the client A) sends a message to topic `t`, the message is routed<br/>to\
            \ all the clients subscribed `some_tenant/t`, so client A will receive\
            \ the<br/>message, with topic name `t`.<br/><br/>Set to `\"\"` to disable\
            \ the feature.<br/><br/><br/>Variables in mountpoint string:<br/>  - <code>${clientid}</code>:\
            \ clientid<br/>  - <code>${username}</code>: username"
          default: ""
        enable_authn:
          type: string
          description: "Set <code>true</code> (default) to enable client authentication\
            \ on this listener, the authentication<br/>process goes through the configured\
            \ authentication chain.<br/>When set to <code>false</code> to allow any\
            \ clients with or without authentication information such as username\
            \ or password to log in.<br/>When set to <code>quick_deny_anonymous</code>,\
            \ it behaves like when set to <code>true</code>, but clients will be<br/>denied\
            \ immediately without going through any authenticators if <code>username</code>\
            \ is not provided. This is useful to fence off<br/>anonymous clients early."
          default: "true"
          enum:
          - "true"
          - "false"
          - quick_deny_anonymous
        max_conn_rate:
          type: string
          description: "Maximum connection rate.<br/><br/>This is used to limit the\
            \ connection rate for this listener,<br/>once the limit is reached, new\
            \ connections will be deferred or refused"
          example: 1000/s
        messages_rate:
          type: string
          description: "Messages publish rate.<br/><br/>This is used to limit the\
            \ inbound message numbers for each client connected to this listener,<br/>once\
            \ the limit is reached, the restricted client will slow down and even\
            \ be hung for a while."
          example: 1000/s
        bytes_rate:
          type: string
          description: "Data publish rate.<br/><br/>This is used to limit the inbound\
            \ bytes rate for each client connected to this listener,<br/>once the\
            \ limit is reached, the restricted client will slow down and even be hung\
            \ for a while."
          example: 100MB/s
        access_rules:
          type: array
          description: "The access control rules for this listener.<br/>See: https://github.com/emqtt/esockd#allowdeny"
          items:
            type: string
          default:
          - allow all
        proxy_protocol:
          type: boolean
          description: "Enable the Proxy Protocol V1/2 if the EMQX cluster is deployed\
            \ behind HAProxy or Nginx.<br/><br/>See: https://www.haproxy.com/blog/haproxy/proxy-protocol/"
          default: false
        proxy_protocol_timeout:
          type: string
          description: Timeout for proxy protocol. EMQX will close the TCP connection
            if proxy protocol packet is not received within the timeout.
          example: 12m
          default: 3s
        tcp_options:
          $ref: '#/components/schemas/broker.tcp_opts'
    broker.flapping_detect:
      type: object
      properties:
        enable:
          type: boolean
          description: Enable flapping connection detection feature.
          default: false
        window_time:
          type: string
          description: The time window for flapping detection.
          example: 12m
          default: 1m
        max_count:
          minimum: 0
          type: integer
          description: The maximum number of disconnects allowed for a MQTT Client
            in `window_time`
          default: 15
        ban_time:
          type: string
          description: How long the flapping clientid will be banned.
          example: 12m
          default: 5m
      example:
        max_count: 0
        enable: false
        ban_time: 12m
        window_time: 12m
    broker.alarm:
      type: object
      properties:
        actions:
          type: array
          description: "The actions triggered when the alarm is activated.<br/>Currently,\
            \ the following actions are supported: <code>log</code> and <code>publish</code>.<br/><code>log</code>\
            \ is to write the alarm to log (console or file).<br/><code>publish</code>\
            \ is to publish the alarm as an MQTT message to the system topics:<br/><code>$SYS/brokers/emqx@xx.xx.xx.x/alarms/activate</code>\
            \ and<br/><code>$SYS/brokers/emqx@xx.xx.xx.x/alarms/deactivate</code>"
          example:
          - log
          - publish
          items:
            type: string
          default:
          - log
          - publish
        size_limit:
          maximum: 3000
          minimum: 1
          type: integer
          description: "The maximum total number of deactivated alarms to keep as\
            \ history.<br/>When this limit is exceeded, the oldest deactivated alarms\
            \ are deleted to cap the total number."
          example: 1000
          default: 1000
        validity_period:
          type: string
          description: "Retention time of deactivated alarms. Alarms are not deleted\
            \ immediately<br/>when deactivated, but after the retention time."
          example: 24h
          default: 24h
      example:
        validity_period: 24h
        actions:
        - log
        - publish
        size_limit: 1000
    emqx_authz_api_schema.mongo_rs:
      required:
      - collection
      - database
      - replica_set_name
      - servers
      - type
      type: object
      properties:
        enable:
          type: boolean
          description: Set to <code>true</code> or <code>false</code> to disable this
            ACL provider.
          default: true
        type:
          type: string
          description: Backend type.
          default: mongodb
          enum:
          - mongodb
        collection:
          type: string
          description: '`MongoDB` collection containing the authorization data.'
        filter:
          type: object
          description: "Conditional expression that defines the filter condition in\
            \ the query.<br/>Filter supports the following placeholders:<br/> - <code>${username}</code>:\
            \ Will be replaced at runtime with <code>Username</code> used by the client\
            \ when connecting;<br/> - <code>${clientid}</code>: Will be replaced at\
            \ runtime with <code>Client ID</code> used by the client when connecting."
          example: {}
          default: {}
        mongo_type:
          type: string
          description: Replica set. Must be set to 'rs' when MongoDB server is running
            in 'replica set' mode.
          default: rs
          enum:
          - rs
        servers:
          type: string
          description: "A Node list for Cluster to connect to. The nodes should be\
            \ separated with commas, such as: `Node[,Node].`<br/>For each Node should\
            \ be: The IPv4 or IPv6 address or the hostname to connect to.<br/>A host\
            \ entry has the following form: `Host[:Port]`.<br/>The MongoDB default\
            \ port 27017 is used if `[:Port]` is not specified."
        w_mode:
          type: string
          description: Write mode.
          default: unsafe
          enum:
          - unsafe
          - safe
        r_mode:
          type: string
          description: Read mode.
          default: master
          enum:
          - master
          - slave_ok
        replica_set_name:
          type: string
          description: Name of the replica set.
        srv_record:
          type: boolean
          description: Use DNS SRV record.
          default: false
        pool_size:
          minimum: 1
          type: integer
          description: Size of the connection pool towards the bridge target service.
          default: 8
        username:
          type: string
          description: The username associated with the bridge in the external database
            used for authentication or identification purposes.
        password:
          type: string
          description: "The password associated with the bridge, used for authentication\
            \ with the external database."
          format: password
        auth_source:
          type: string
          description: Database name associated with the user's credentials.
        database:
          type: string
          description: Database name.
        topology:
          $ref: '#/components/schemas/emqx_mongodb.topology'
        ssl:
          $ref: '#/components/schemas/broker.ssl_client_opts'
    emqx_mgmt_api_publish.bad_request:
      type: object
      properties:
        code:
          type: string
          description: BAD_REQUEST
        message:
          type: string
          description: Describes the failure reason in detail.
    emqx_authn_schema.resource_metrics:
      type: object
      properties:
        matched:
          type: integer
          description: Count of this resource is queried.
        success:
          type: integer
          description: Count of query success.
        failed:
          type: integer
          description: Count of query failed.
        rate:
          type: number
          description: "The rate of matched, times/second."
        rate_max:
          type: number
          description: "The max rate of matched, times/second."
        rate_last5m:
          type: number
          description: "The average rate of matched in the last 5 minutes, times/second."
      example:
        rate_last5m: 2.3021358869347654518833223846741020679473876953125
        rate: 5.962133916683182377482808078639209270477294921875
        rate_max: 5.63737665663332876420099637471139430999755859375
        success: 6
        matched: 0
        failed: 1
    exhook.list_hook_info:
      type: object
      properties:
        name:
          type: string
          description: The hook's name
        params:
          $ref: exhook.hook_info_params
        metrics:
          $ref: '#/components/schemas/exhook.metrics'
        node_metrics:
          type: array
          description: Metrics information of this hook in all nodes
          items:
            $ref: '#/components/schemas/exhook.node_metrics'
      example:
        node_metrics:
        - node: node
          metrics: null
        - node: node
          metrics: null
        name: name
        metrics:
          rate: 1
          succeed: 0
          max_rate: 5
          failed: 6
        params:
          $name: $name
    emqx_rule_api_schema.rule_engine:
      type: object
      properties:
        ignore_sys_message:
          type: boolean
          description: "When set to 'true' (default), rule-engine will ignore messages\
            \ published to $SYS topics."
          default: true
        jq_function_default_timeout:
          type: string
          description: Default timeout for the `jq` rule engine function
          example: 32s
          default: 10s
      example:
        jq_function_default_timeout: 32s
        ignore_sys_message: true
    emqx_gateway_api_listeners.udp_listener:
      type: object
      properties:
        id:
          type: string
          description: Listener ID
        type:
          type: string
          description: Listener Type
          enum:
          - udp
        name:
          type: string
          description: Listener Name
        running:
          type: boolean
          description: Listener Running status
        udp_options:
          $ref: '#/components/schemas/gateway.udp_opts'
        enable:
          type: boolean
          description: Enable the listener.
          default: true
        bind:
          type: string
          description: The IP address and port that the listener will bind.
          example: 127.0.0.1:80
        max_connections:
          description: Maximum number of concurrent connections.
          oneOf:
          - type: string
            enum:
            - infinity
          - minimum: 1
            type: integer
          default: 1024
        max_conn_rate:
          type: integer
          description: Maximum connections per second.
          default: 1000
        enable_authn:
          type: boolean
          description: Set <code>true</code> (default) to enable client authentication
            on this listener. <br/>When set to <code>false</code> clients will be
            allowed to connect without authentication.
          default: true
        mountpoint:
          type: string
          description: "When publishing or subscribing, prefix all topics with a mountpoint\
            \ string.<br/>The prefixed string will be removed from the topic name\
            \ when the message is delivered to the subscriber.<br/>The mountpoint\
            \ is a way that users can use to implement isolation of message routing\
            \ between different listeners.<br/>For example if a client A subscribes\
            \ to `t` with `listeners.tcp.\\<name>.mountpoint` set to `some_tenant`,<br/>then\
            \ the client actually subscribes to the topic `some_tenant/t`.<br/>Similarly,\
            \ if another client B (connected to the same listener as the client A)\
            \ sends a message to topic `t`,<br/>the message is routed to all the clients\
            \ subscribed `some_tenant/t`,<br/>so client A will receive the message,\
            \ with topic name `t`. Set to `\"\"` to disable the feature.<br/>Variables\
            \ in mountpoint string:<br/><br/>  - <code>${clientid}</code>: clientid<br/><br/>\
            \  - <code>${username}</code>: username"
        access_rules:
          type: array
          description: "The access control rules for this listener.<br/>See: https://github.com/emqtt/esockd#allowdeny"
          items:
            type: string
          default: []
        status:
          $ref: '#/components/schemas/listeners.status'
        node_status:
          type: array
          description: listener status of each node in the cluster
          items:
            $ref: '#/components/schemas/listeners.node_status'
    emqx_authz_api_mnesia.rule_item:
      required:
      - action
      - permission
      - topic
      type: object
      properties:
        topic:
          type: string
          description: Rule on specific topic
          example: test/topic/1
        permission:
          type: string
          description: Permission
          example: allow
          enum:
          - allow
          - deny
        action:
          type: string
          description: Authorized action (publish/subscribe/all)
          example: publish
          enum:
          - publish
          - subscribe
          - all
        qos:
          type: array
          description: QoS of authorized action
          items:
            maximum: 2
            minimum: 0
            type: integer
            example: 0
          default:
          - 0
          - 1
          - 2
        retain:
          description: Retain flag of authorized action
          oneOf:
          - type: boolean
          - type: string
            enum:
            - all
          default: all
      example:
        qos:
        - 0
        - 0
        retain: ""
        topic: test/topic/1
        action: publish
        permission: allow
    trace.trace:
      required:
      - name
      - type
      type: object
      properties:
        name:
          type: string
          description: "Unique name of the trace. Only ascii letters in a-z, A-Z,\
            \ 0-9 and underscore '_' are allowed."
          example: EMQX-TRACE-1
        type:
          type: string
          description: Filter type
          example: clientid
          enum:
          - clientid
          - topic
          - ip_address
        topic:
          type: string
          description: Specify the topic or topic filter if the trace 'type' is 'topic'.
          example: /dev/#
        clientid:
          type: string
          description: Specify the MQTT clientid if the trace 'type' is 'clientid'.
          example: dev-001
        ip_address:
          type: string
          description: Specify the client's IP address if the trace type is 'ip_address'.
          example: 127.0.0.1
        status:
          type: string
          description: trace status
          example: running
          enum:
          - running
          - stopped
          - waiting
        payload_encode:
          type: string
          description: "Determine the format of the payload format in the trace file.<br/><br/>`text`:\
            \ Text-based protocol or plain text protocol.<br/> It is recommended when\
            \ payload is JSON encoded.<br/><br/>`hex`: Binary hexadecimal encode.It\
            \ is recommended when payload is a custom binary protocol.<br/><br/>`hidden`:\
            \ payload is obfuscated as `******`"
          default: text
          enum:
          - hex
          - text
          - hidden
        start_at:
          description: rfc3339 timestamp or epoch second
          example: 2021-11-04T18:17:38+08:00
          oneOf:
          - type: integer
            description: epoch-second
            example: 1640995200
          - type: string
            format: date-time
            example: 2022-01-01T00:00:00Z
        end_at:
          description: rfc3339 timestamp or epoch second
          example: 2021-11-05T18:17:38+08:00
          oneOf:
          - type: integer
            description: epoch-second
            example: 1640995200
          - type: string
            format: date-time
            example: 2022-01-01T00:00:00Z
        log_size:
          type: array
          description: trace log size
          example:
          - node: emqx@127.0.0.1
            size: 1024
          items:
            type: object
            example: {}
      example:
        end_at: 2021-11-05T18:17:38+08:00
        clientid: dev-001
        payload_encode: text
        name: EMQX-TRACE-1
        topic: /dev/#
        log_size:
        - node: emqx@127.0.0.1
          size: 1024
        ip_address: 127.0.0.1
        type: clientid
        start_at: 2021-11-04T18:17:38+08:00
        status: running
    gateway.udp_opts:
      type: object
      properties:
        active_n:
          type: integer
          description: "Specify the {active, N} option for the socket.<br/>See: https://erlang.org/doc/man/inet.html#setopts-2"
          default: 100
        recbuf:
          type: string
          description: Size of the kernel-space receive buffer for the socket.
          example: 32MB
        sndbuf:
          type: string
          description: Size of the kernel-space send buffer for the socket.
          example: 32MB
        buffer:
          type: string
          description: Size of the user-space buffer for the socket.
          example: 32MB
        reuseaddr:
          type: boolean
          description: Allow local reuse of port numbers.
          default: true
    emqx_gateway_api.coap:
      type: object
      properties:
        name:
          type: string
          description: Gateway Name
          enum:
          - coap
        heartbeat:
          type: string
          description: "The gateway server required minimum heartbeat interval.<br/>When\
            \ connection mode is enabled, this parameter is used to set the minimum\
            \ heartbeat interval for the connection to be alive"
          example: 12m
          default: 30s
        connection_required:
          type: boolean
          description: "Enable or disable connection mode.<br/>Connection mode is\
            \ a feature of non-standard protocols. When connection mode is enabled,\
            \ it is necessary to maintain the creation, authentication and alive of\
            \ connection resources"
          default: false
        notify_type:
          type: string
          description: "The Notification Message will be delivered to the CoAP client\
            \ if a new message received on an observed topic.<br/>The type of delivered\
            \ coap message can be set to:<br/><br/>  - non: Non-confirmable;<br/><br/>\
            \  - con: Confirmable;<br/><br/>  - qos: Mapping from QoS type of received\
            \ message, QoS0 -> non, QoS1,2 -> con"
          default: qos
          enum:
          - non
          - con
          - qos
        subscribe_qos:
          type: string
          description: "The Default QoS Level indicator for subscribe request.<br/>This\
            \ option specifies the QoS level for the CoAP Client when establishing\
            \ a subscription membership, if the subscribe request is not carried `qos`\
            \ option. The indicator can be set to:<br/><br/>  - qos0, qos1, qos2:\
            \ Fixed default QoS level<br/><br/>  - coap: Dynamic QoS level by the\
            \ message type of subscribe request<br/><br/>    * qos0: If the subscribe\
            \ request is non-confirmable<br/><br/>    * qos1: If the subscribe request\
            \ is confirmable"
          default: coap
          enum:
          - qos0
          - qos1
          - qos2
          - coap
        publish_qos:
          type: string
          description: "The Default QoS Level indicator for publish request.<br/>This\
            \ option specifies the QoS level for the CoAP Client when publishing a\
            \ message to EMQX PUB/SUB system, if the publish request is not carried\
            \ `qos` option. The indicator can be set to:<br/><br/>  - qos0, qos1,\
            \ qos2: Fixed default QoS level<br/><br/>  - coap: Dynamic QoS level by\
            \ the message type of publish request<br/><br/>    * qos0: If the publish\
            \ request is non-confirmable<br/><br/>    * qos1: If the publish request\
            \ is confirmable"
          default: coap
          enum:
          - qos0
          - qos1
          - qos2
          - coap
        mountpoint:
          type: string
          description: "When publishing or subscribing, prefix all topics with a mountpoint\
            \ string.<br/>The prefixed string will be removed from the topic name\
            \ when the message is delivered to the subscriber.<br/>The mountpoint\
            \ is a way that users can use to implement isolation of message routing\
            \ between different listeners.<br/>For example if a client A subscribes\
            \ to `t` with `listeners.tcp.\\<name>.mountpoint` set to `some_tenant`,<br/>then\
            \ the client actually subscribes to the topic `some_tenant/t`.<br/>Similarly,\
            \ if another client B (connected to the same listener as the client A)\
            \ sends a message to topic `t`,<br/>the message is routed to all the clients\
            \ subscribed `some_tenant/t`,<br/>so client A will receive the message,\
            \ with topic name `t`. Set to `\"\"` to disable the feature.<br/>Variables\
            \ in mountpoint string:<br/><br/>  - <code>${clientid}</code>: clientid<br/><br/>\
            \  - <code>${username}</code>: username"
          default: ""
        enable:
          type: boolean
          description: Whether to enable this gateway
          default: true
        enable_stats:
          type: boolean
          description: Whether to enable client process statistic
          default: true
        idle_timeout:
          type: string
          description: The idle time of the client connection process. It has two
            purposes:<br/>  1. A newly created client process that does not receive
            any client requests after that time will be closed directly.<br/>  2.
            A running client process that does not receive any client requests after
            this time will go into hibernation to save resources.
          example: 12m
          default: 30s
        clientinfo_override:
          $ref: '#/components/schemas/gateway.clientinfo_override'
        listeners:
          type: array
          items:
            oneOf:
            - $ref: '#/components/schemas/emqx_gateway_api.dtls_listener'
            - $ref: '#/components/schemas/emqx_gateway_api.udp_listener'
    emqx_authn_schema.node_error:
      type: object
      properties:
        node:
          type: string
          description: Node name.
          example: emqx@127.0.0.1
        error:
          type: string
          description: The error of node.
      example:
        node: emqx@127.0.0.1
        error: error
    emqx_gateway_api_listeners.dtls_listener:
      type: object
      properties:
        id:
          type: string
          description: Listener ID
        type:
          type: string
          description: Listener Type
          enum:
          - dtls
        name:
          type: string
          description: Listener Name
        running:
          type: boolean
          description: Listener Running status
        acceptors:
          type: integer
          description: Size of the acceptor pool.
          default: 16
        udp_options:
          $ref: '#/components/schemas/gateway.udp_opts'
        enable:
          type: boolean
          description: Enable the listener.
          default: true
        bind:
          type: string
          description: The IP address and port that the listener will bind.
          example: 127.0.0.1:80
        max_connections:
          description: Maximum number of concurrent connections.
          oneOf:
          - type: string
            enum:
            - infinity
          - minimum: 1
            type: integer
          default: 1024
        max_conn_rate:
          type: integer
          description: Maximum connections per second.
          default: 1000
        enable_authn:
          type: boolean
          description: Set <code>true</code> (default) to enable client authentication
            on this listener. <br/>When set to <code>false</code> clients will be
            allowed to connect without authentication.
          default: true
        mountpoint:
          type: string
          description: "When publishing or subscribing, prefix all topics with a mountpoint\
            \ string.<br/>The prefixed string will be removed from the topic name\
            \ when the message is delivered to the subscriber.<br/>The mountpoint\
            \ is a way that users can use to implement isolation of message routing\
            \ between different listeners.<br/>For example if a client A subscribes\
            \ to `t` with `listeners.tcp.\\<name>.mountpoint` set to `some_tenant`,<br/>then\
            \ the client actually subscribes to the topic `some_tenant/t`.<br/>Similarly,\
            \ if another client B (connected to the same listener as the client A)\
            \ sends a message to topic `t`,<br/>the message is routed to all the clients\
            \ subscribed `some_tenant/t`,<br/>so client A will receive the message,\
            \ with topic name `t`. Set to `\"\"` to disable the feature.<br/>Variables\
            \ in mountpoint string:<br/><br/>  - <code>${clientid}</code>: clientid<br/><br/>\
            \  - <code>${username}</code>: username"
        access_rules:
          type: array
          description: "The access control rules for this listener.<br/>See: https://github.com/emqtt/esockd#allowdeny"
          items:
            type: string
          default: []
        dtls_options:
          $ref: '#/components/schemas/gateway.dtls_opts'
        status:
          $ref: '#/components/schemas/listeners.status'
        node_status:
          type: array
          description: listener status of each node in the cluster
          items:
            $ref: '#/components/schemas/listeners.node_status'
    emqx_rule_api_schema.ctx_connack:
      required:
      - event_type
      type: object
      properties:
        event_type:
          type: string
          description: Event Type
          enum:
          - client_connack
        reason_code:
          type: string
          description: The reason code
        clientid:
          type: string
          description: The Client ID
        clean_start:
          type: boolean
          description: Clean Start
          default: true
        username:
          type: string
          description: Username
        peername:
          type: string
          description: The IP Address and Port of the Peer Client
        sockname:
          type: string
          description: The IP Address and Port of the Local Listener
        proto_name:
          type: string
          description: Protocol Name
        proto_ver:
          type: string
          description: Protocol Version
        keepalive:
          type: integer
          description: KeepAlive
        expiry_interval:
          type: integer
          description: Expiry Interval
        connected_at:
          type: integer
          description: The Time that this Client is Connected
    emqx_authz_api_schema.redis_single:
      required:
      - cmd
      - server
      - type
      type: object
      properties:
        enable:
          type: boolean
          description: Set to <code>true</code> or <code>false</code> to disable this
            ACL provider.
          default: true
        type:
          type: string
          description: Backend type.
          default: redis
          enum:
          - redis
        cmd:
          type: string
          description: Database query used to retrieve authorization data.
          example: HGETALL mqtt_authz
        server:
          type: string
          description: "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A\
            \ host entry has the following form: `Host[:Port]`.<br/><br/>The Redis\
            \ default port 6379 is used if `[:Port]` is not specified."
        redis_type:
          type: string
          description: Single mode. Must be set to 'single' when Redis server is running
            in single mode.
          default: single
          enum:
          - single
        pool_size:
          minimum: 1
          type: integer
          description: Size of the connection pool towards the bridge target service.
          default: 8
        password:
          type: string
          description: "The password associated with the bridge, used for authentication\
            \ with the external database."
          format: password
        database:
          minimum: 0
          type: integer
          description: Redis database ID.
          default: 0
        auto_reconnect:
          type: boolean
          description: Deprecated. Enable automatic reconnect to the database.
          deprecated: true
          default: true
        ssl:
          $ref: '#/components/schemas/broker.ssl_client_opts'
    listeners.tcp_required_bind-with_name:
      required:
      - bind
      - name
      - type
      type: object
      properties:
        type:
          type: string
          description: Listener type
          enum:
          - tcp
        running:
          type: boolean
          description: Listener status
        name:
          type: string
          description: Listener name
        current_connections:
          minimum: 0
          type: integer
          description: Current connections
        enable:
          type: boolean
          description: Enable listener.
          default: true
        bind:
          type: string
          description: IP address and port for the listening socket.
          example: 127.0.0.1:80
          default: "1883"
        acceptors:
          minimum: 1
          type: integer
          description: The size of the listener's receiving pool.
          default: 16
        max_connections:
          description: The maximum number of concurrent connections allowed by the
            listener.
          oneOf:
          - minimum: 1
            type: integer
          - type: string
            enum:
            - infinity
          default: infinity
        mountpoint:
          type: string
          description: "When publishing or subscribing, prefix all topics with a mountpoint\
            \ string.<br/>The prefixed string will be removed from the topic name\
            \ when the message<br/>is delivered to the subscriber. The mountpoint\
            \ is a way that users can use<br/>to implement isolation of message routing\
            \ between different listeners.<br/>For example if a client A subscribes\
            \ to `t` with `listeners.tcp.\\<name>.mountpoint`<br/>set to `some_tenant`,\
            \ then the client actually subscribes to the topic<br/>`some_tenant/t`.\
            \ Similarly, if another client B (connected to the same listener<br/>as\
            \ the client A) sends a message to topic `t`, the message is routed<br/>to\
            \ all the clients subscribed `some_tenant/t`, so client A will receive\
            \ the<br/>message, with topic name `t`.<br/><br/>Set to `\"\"` to disable\
            \ the feature.<br/><br/><br/>Variables in mountpoint string:<br/>  - <code>${clientid}</code>:\
            \ clientid<br/>  - <code>${username}</code>: username"
          default: ""
        enable_authn:
          type: string
          description: "Set <code>true</code> (default) to enable client authentication\
            \ on this listener, the authentication<br/>process goes through the configured\
            \ authentication chain.<br/>When set to <code>false</code> to allow any\
            \ clients with or without authentication information such as username\
            \ or password to log in.<br/>When set to <code>quick_deny_anonymous</code>,\
            \ it behaves like when set to <code>true</code>, but clients will be<br/>denied\
            \ immediately without going through any authenticators if <code>username</code>\
            \ is not provided. This is useful to fence off<br/>anonymous clients early."
          default: "true"
          enum:
          - "true"
          - "false"
          - quick_deny_anonymous
        max_conn_rate:
          type: string
          description: "Maximum connection rate.<br/><br/>This is used to limit the\
            \ connection rate for this listener,<br/>once the limit is reached, new\
            \ connections will be deferred or refused"
          example: 1000/s
        messages_rate:
          type: string
          description: "Messages publish rate.<br/><br/>This is used to limit the\
            \ inbound message numbers for each client connected to this listener,<br/>once\
            \ the limit is reached, the restricted client will slow down and even\
            \ be hung for a while."
          example: 1000/s
        bytes_rate:
          type: string
          description: "Data publish rate.<br/><br/>This is used to limit the inbound\
            \ bytes rate for each client connected to this listener,<br/>once the\
            \ limit is reached, the restricted client will slow down and even be hung\
            \ for a while."
          example: 100MB/s
        access_rules:
          type: array
          description: "The access control rules for this listener.<br/>See: https://github.com/emqtt/esockd#allowdeny"
          items:
            type: string
          default:
          - allow all
        proxy_protocol:
          type: boolean
          description: "Enable the Proxy Protocol V1/2 if the EMQX cluster is deployed\
            \ behind HAProxy or Nginx.<br/><br/>See: https://www.haproxy.com/blog/haproxy/proxy-protocol/"
          default: false
        proxy_protocol_timeout:
          type: string
          description: Timeout for proxy protocol. EMQX will close the TCP connection
            if proxy protocol packet is not received within the timeout.
          example: 12m
          default: 3s
        tcp_options:
          $ref: '#/components/schemas/broker.tcp_opts'
    prometheus.prometheus:
      required:
      - enable
      - interval
      - job_name
      - mnesia_collector
      - push_gateway_server
      - vm_dist_collector
      - vm_memory_collector
      - vm_msacc_collector
      - vm_statistics_collector
      - vm_system_info_collector
      type: object
      properties:
        push_gateway_server:
          type: string
          description: "URL of Prometheus server. Pushgateway is optional, should\
            \ not be configured if prometheus is to scrape EMQX."
          default: http://127.0.0.1:9091
        interval:
          type: string
          description: Data reporting interval
          example: 32s
          default: 15s
        headers:
          type: array
          description: "An HTTP Headers when pushing to Push Gateway.<br/><br/>For\
            \ example, <code> { Authorization = \"some-authz-tokens\"}</code>"
          items:
            type: object
            example: {}
        job_name:
          type: string
          description: "Job Name that is pushed to the Push Gateway. Available variables:<br/><br/>-\
            \ ${name}: Name of EMQX node.<br/><br/>- ${host}: Host name of EMQX node.<br/><br/>For\
            \ example, when the EMQX node name is <code>emqx@127.0.0.1</code> then\
            \ the <code>name</code> variable takes value <code>emqx</code> and the\
            \ <code>host</code> variable takes value <code>127.0.0.1</code>.<br/><br/>Default\
            \ value is: <code>${name}/instance/${name}~${host}</code>"
          default: "${name}/instance/${name}~${host}"
        enable:
          type: boolean
          description: Turn Prometheus data pushing on or off
          default: false
        vm_dist_collector:
          type: string
          description: "Enable or disable VM distribution collector, collects information\
            \ about the sockets and processes involved in the Erlang distribution\
            \ mechanism."
          default: disabled
          enum:
          - disabled
          - enabled
        mnesia_collector:
          type: string
          description: Enable or disable Mnesia metrics collector
          default: enabled
          enum:
          - enabled
          - disabled
        vm_statistics_collector:
          type: string
          description: Enable or disable VM statistics collector.
          default: enabled
          enum:
          - enabled
          - disabled
        vm_system_info_collector:
          type: string
          description: Enable or disable VM system info collector.
          default: enabled
          enum:
          - enabled
          - disabled
        vm_memory_collector:
          type: string
          description: Enable or disable VM memory metrics collector.
          default: enabled
          enum:
          - enabled
          - disabled
        vm_msacc_collector:
          type: string
          description: Enable or disable VM microstate accounting metrics collector.
          default: enabled
          enum:
          - enabled
          - disabled
      example:
        headers:
        - {}
        - {}
        push_gateway_server: http://127.0.0.1:9091
        vm_system_info_collector: enabled
        job_name: "${name}/instance/${name}~${host}"
        vm_memory_collector: enabled
        vm_statistics_collector: enabled
        enable: false
        interval: 32s
        vm_dist_collector: disabled
        mnesia_collector: enabled
        vm_msacc_collector: enabled
    authz.metrics:
      type: object
      properties:
        total:
          type: integer
          description: The total number of times the authorization rule was triggered.
        allow:
          type: integer
          description: The number of times the authentication was successful.
        deny:
          type: integer
          description: The number of authentication failures.
        nomatch:
          type: number
          description: The number of times that no authorization rules were matched.
        rate:
          type: number
          description: "The rate of matched, times/second."
        rate_max:
          type: number
          description: "The max rate of matched, times/second."
        rate_last5m:
          type: number
          description: "The average rate of matched in the last 5 minutes, times/second."
      example:
        allow: 9
        nomatch: 2.027123023002321833274663731572218239307403564453125
        rate_last5m: 1.231513536777255612975068288506008684635162353515625
        total: 7
        deny: 3
        rate: 4.1456080298839363962315474054776132106781005859375
        rate_max: 7.3862819483858839220147274318151175975799560546875
    listeners.ssl_required_bind-with_name:
      required:
      - bind
      - name
      - type
      type: object
      properties:
        type:
          type: string
          description: Listener type
          enum:
          - ssl
        running:
          type: boolean
          description: Listener status
        name:
          type: string
          description: Listener name
        current_connections:
          minimum: 0
          type: integer
          description: Current connections
        enable:
          type: boolean
          description: Enable listener.
          default: true
        bind:
          type: string
          description: IP address and port for the listening socket.
          example: 127.0.0.1:80
          default: "8883"
        acceptors:
          minimum: 1
          type: integer
          description: The size of the listener's receiving pool.
          default: 16
        max_connections:
          description: The maximum number of concurrent connections allowed by the
            listener.
          oneOf:
          - minimum: 1
            type: integer
          - type: string
            enum:
            - infinity
          default: infinity
        mountpoint:
          type: string
          description: "When publishing or subscribing, prefix all topics with a mountpoint\
            \ string.<br/>The prefixed string will be removed from the topic name\
            \ when the message<br/>is delivered to the subscriber. The mountpoint\
            \ is a way that users can use<br/>to implement isolation of message routing\
            \ between different listeners.<br/>For example if a client A subscribes\
            \ to `t` with `listeners.tcp.\\<name>.mountpoint`<br/>set to `some_tenant`,\
            \ then the client actually subscribes to the topic<br/>`some_tenant/t`.\
            \ Similarly, if another client B (connected to the same listener<br/>as\
            \ the client A) sends a message to topic `t`, the message is routed<br/>to\
            \ all the clients subscribed `some_tenant/t`, so client A will receive\
            \ the<br/>message, with topic name `t`.<br/><br/>Set to `\"\"` to disable\
            \ the feature.<br/><br/><br/>Variables in mountpoint string:<br/>  - <code>${clientid}</code>:\
            \ clientid<br/>  - <code>${username}</code>: username"
          default: ""
        enable_authn:
          type: string
          description: "Set <code>true</code> (default) to enable client authentication\
            \ on this listener, the authentication<br/>process goes through the configured\
            \ authentication chain.<br/>When set to <code>false</code> to allow any\
            \ clients with or without authentication information such as username\
            \ or password to log in.<br/>When set to <code>quick_deny_anonymous</code>,\
            \ it behaves like when set to <code>true</code>, but clients will be<br/>denied\
            \ immediately without going through any authenticators if <code>username</code>\
            \ is not provided. This is useful to fence off<br/>anonymous clients early."
          default: "true"
          enum:
          - "true"
          - "false"
          - quick_deny_anonymous
        max_conn_rate:
          type: string
          description: "Maximum connection rate.<br/><br/>This is used to limit the\
            \ connection rate for this listener,<br/>once the limit is reached, new\
            \ connections will be deferred or refused"
          example: 1000/s
        messages_rate:
          type: string
          description: "Messages publish rate.<br/><br/>This is used to limit the\
            \ inbound message numbers for each client connected to this listener,<br/>once\
            \ the limit is reached, the restricted client will slow down and even\
            \ be hung for a while."
          example: 1000/s
        bytes_rate:
          type: string
          description: "Data publish rate.<br/><br/>This is used to limit the inbound\
            \ bytes rate for each client connected to this listener,<br/>once the\
            \ limit is reached, the restricted client will slow down and even be hung\
            \ for a while."
          example: 100MB/s
        access_rules:
          type: array
          description: "The access control rules for this listener.<br/>See: https://github.com/emqtt/esockd#allowdeny"
          items:
            type: string
          default:
          - allow all
        proxy_protocol:
          type: boolean
          description: "Enable the Proxy Protocol V1/2 if the EMQX cluster is deployed\
            \ behind HAProxy or Nginx.<br/><br/>See: https://www.haproxy.com/blog/haproxy/proxy-protocol/"
          default: false
        proxy_protocol_timeout:
          type: string
          description: Timeout for proxy protocol. EMQX will close the TCP connection
            if proxy protocol packet is not received within the timeout.
          example: 12m
          default: 3s
        tcp_options:
          $ref: '#/components/schemas/broker.tcp_opts'
        ssl_options:
          $ref: '#/components/schemas/broker.listener_ssl_opts'
    emqx_gateway_api.mqttsn:
      required:
      - gateway_id
      type: object
      properties:
        name:
          type: string
          description: Gateway Name
          enum:
          - mqttsn
        gateway_id:
          type: integer
          description: "MQTT-SN Gateway ID.<br/>When the <code>broadcast</code> option\
            \ is enabled, the gateway will broadcast ADVERTISE message with this value"
          default: 1
        broadcast:
          type: boolean
          description: Whether to periodically broadcast ADVERTISE messages
          default: false
        enable_qos3:
          type: boolean
          description: "Allows connectionless clients to publish messages with a Qos\
            \ of -1.<br/>This feature is defined for very simple client implementations\
            \ which do not support any other features except this one. There is no\
            \ connection setup nor tear down, no registration nor subscription. The\
            \ client just sends its 'PUBLISH' messages to a GW"
          default: true
        subs_resume:
          type: boolean
          description: Whether to initiate all subscribed topic name registration
            messages to the client after the Session has been taken over by a new
            channel
          default: false
        predefined:
          type: array
          description: The pre-defined topic IDs and topic names.<br/>A 'pre-defined'
            topic ID is a topic ID whose mapping to a topic name is known in advance
            by both the client's application and the gateway
          items:
            $ref: '#/components/schemas/emqx_mqttsn_schema.mqttsn_predefined'
          default: []
        mountpoint:
          type: string
          description: "When publishing or subscribing, prefix all topics with a mountpoint\
            \ string.<br/>The prefixed string will be removed from the topic name\
            \ when the message is delivered to the subscriber.<br/>The mountpoint\
            \ is a way that users can use to implement isolation of message routing\
            \ between different listeners.<br/>For example if a client A subscribes\
            \ to `t` with `listeners.tcp.\\<name>.mountpoint` set to `some_tenant`,<br/>then\
            \ the client actually subscribes to the topic `some_tenant/t`.<br/>Similarly,\
            \ if another client B (connected to the same listener as the client A)\
            \ sends a message to topic `t`,<br/>the message is routed to all the clients\
            \ subscribed `some_tenant/t`,<br/>so client A will receive the message,\
            \ with topic name `t`. Set to `\"\"` to disable the feature.<br/>Variables\
            \ in mountpoint string:<br/><br/>  - <code>${clientid}</code>: clientid<br/><br/>\
            \  - <code>${username}</code>: username"
          default: ""
        enable:
          type: boolean
          description: Whether to enable this gateway
          default: true
        enable_stats:
          type: boolean
          description: Whether to enable client process statistic
          default: true
        idle_timeout:
          type: string
          description: The idle time of the client connection process. It has two
            purposes:<br/>  1. A newly created client process that does not receive
            any client requests after that time will be closed directly.<br/>  2.
            A running client process that does not receive any client requests after
            this time will go into hibernation to save resources.
          example: 12m
          default: 30s
        clientinfo_override:
          $ref: '#/components/schemas/gateway.clientinfo_override'
        listeners:
          type: array
          items:
            oneOf:
            - $ref: '#/components/schemas/emqx_gateway_api.dtls_listener'
            - $ref: '#/components/schemas/emqx_gateway_api.udp_listener'
    rule_engine.builtin_action_console:
      type: object
      properties:
        function:
          type: string
          description: Print the actions to the console
          enum:
          - console
    bridge_mqtt.put:
      required:
      - server
      type: object
      properties:
        enable:
          type: boolean
          description: Enable or disable this bridge
          default: true
        resource_opts:
          $ref: '#/components/schemas/bridge_mqtt.creation_opts'
        mode:
          type: string
          description: "The mode of the MQTT Bridge.<br/><br/>- cluster_shareload:\
            \ create an MQTT connection on each node in the emqx cluster.<br/><br/>In\
            \ 'cluster_shareload' mode, the incoming load from the remote broker is\
            \ shared by<br/>using shared subscription.<br/><br/>Note that the 'clientid'\
            \ is suffixed by the node name, this is to avoid<br/>clientid conflicts\
            \ between different nodes. And we can only use shared subscription<br/>topic\
            \ filters for <code>remote.topic</code> of ingress connections."
          deprecated: true
          default: cluster_shareload
          enum:
          - cluster_shareload
        server:
          type: string
          description: The host and port of the remote MQTT broker
        clientid_prefix:
          type: string
          description: Optional prefix to prepend to the clientid used by egress bridges.
        reconnect_interval:
          type: string
          deprecated: true
        proto_ver:
          type: string
          description: The MQTT protocol version
          default: v4
          enum:
          - v3
          - v4
          - v5
        bridge_mode:
          type: boolean
          description: "If enable bridge mode.<br/>NOTE: This setting is only for\
            \ MQTT protocol version older than 5.0, and the remote MQTT<br/>broker\
            \ MUST support this feature.<br/>If bridge_mode is set to true, the bridge\
            \ will indicate to the remote broker that it is a bridge not an ordinary\
            \ client.<br/>This means that loop detection will be more effective and\
            \ that retained messages will be propagated correctly."
          default: false
        username:
          type: string
          description: The username of the MQTT protocol
        password:
          type: string
          description: The password of the MQTT protocol
          format: password
        clean_start:
          type: boolean
          description: Whether to start a clean session when reconnecting a remote
            broker for ingress bridge
          default: true
        keepalive:
          type: string
          description: "MQTT Keepalive. Time interval is a string that contains a\
            \ number followed by time unit:<br/>- `ms` for milliseconds,<br/>- `s`\
            \ for seconds,<br/>- `m` for minutes,<br/>- `h` for hours;<br/><br/>or\
            \ combination of whereof: `1h5m0s`"
          default: 300s
        retry_interval:
          type: string
          description: "Message retry interval. Delay for the MQTT bridge to retry\
            \ sending the QoS1/QoS2 messages in case of ACK not received. Time interval\
            \ is a string that contains a number followed by time unit:<br/>- `ms`\
            \ for milliseconds,<br/>- `s` for seconds,<br/>- `m` for minutes,<br/>-\
            \ `h` for hours;<br/><br/>or combination of whereof: `1h5m0s`"
          default: 15s
        max_inflight:
          minimum: 0
          type: integer
          description: "Max inflight (sent, but un-acked) messages of the MQTT protocol"
          default: 32
        ssl:
          $ref: '#/components/schemas/broker.ssl_client_opts'
        ingress:
          $ref: '#/components/schemas/connector-mqtt.ingress'
        egress:
          $ref: '#/components/schemas/connector-mqtt.egress'
    authn-hash.bcrypt:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: BCRYPT password hashing.
          enum:
          - bcrypt
    exhook.ssl_conf:
      type: object
      properties:
        cacertfile:
          type: string
          description: "Trusted PEM format CA certificates bundle file.<br/><br/>The\
            \ certificates in this file are used to verify the TLS peer's certificates.<br/>Append\
            \ new certificates to the file if new CAs are to be trusted.<br/>There\
            \ is no need to restart EMQX to have the updated file loaded, because<br/>the\
            \ system regularly checks if file has been updated (and reload).<br/><br/>NOTE:\
            \ invalidating (deleting) a certificate from the file will not affect<br/>already\
            \ established connections."
        cacerts:
          type: boolean
          description: "When enabled, uses the system trusted CA certificates for\
            \ establishing to TLS connections."
          default: false
        certfile:
          type: string
          description: "PEM format certificates chain file.<br/><br/>The certificates\
            \ in this file should be in reversed order of the certificate<br/>issue\
            \ chain. That is, the host's certificate should be placed in the beginning<br/>of\
            \ the file, followed by the immediate issuer certificate and so on.<br/>Although\
            \ the root CA certificate is optional, it should be placed at the end\
            \ of<br/>the file if it is to be added."
        keyfile:
          type: string
          description: PEM format private key file.
        verify:
          type: string
          description: Enable or disable peer verification.
          default: verify_none
          enum:
          - verify_peer
          - verify_none
        reuse_sessions:
          type: boolean
          description: Enable TLS session reuse.</br><br/>Has no effect when TLS version
            is configured (or negotiated) to 1.3
          default: true
        depth:
          minimum: 0
          type: integer
          description: "Maximum number of non-self-issued intermediate certificates\
            \ that can follow the peer certificate in a valid certification path.<br/>So,\
            \ if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/><br/>if\
            \ 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/><br/>if 2 the\
            \ path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA."
          default: 10
        password:
          type: string
          description: String containing the user's password. Only used if the private
            key file is password-protected.
          format: password
          example: ""
        versions:
          type: array
          description: "All TLS/DTLS versions to be supported.<br/><br/>NOTE: PSK\
            \ ciphers are suppressed by 'tlsv1.3' version config.<br/><br/>In case\
            \ PSK cipher suites are intended, make sure to configure<br/><code>['tlsv1.2',\
            \ 'tlsv1.1']</code> here."
          items:
            type: string
          default:
          - tlsv1.3
          - tlsv1.2
        ciphers:
          type: array
          description: "This config holds TLS cipher suite names separated by comma,<br/>or\
            \ as an array of strings. e.g.<br/><code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"\
            </code> or<br/><code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"\
            ]</code>.<br/><br/><br/>Ciphers (and their ordering) define the way in\
            \ which the<br/>client and server encrypts information over the network\
            \ connection.<br/>Selecting a good cipher suite is critical for the<br/>application's\
            \ data security, confidentiality and performance.<br/><br/>The names should\
            \ be in OpenSSL string format (not RFC format).<br/>All default values\
            \ and examples provided by EMQX config<br/>documentation are all in OpenSSL\
            \ format.<br/><br/><br/>NOTE: Certain cipher suites are only compatible\
            \ with<br/>specific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or\
            \ 'tlsv1.3')<br/>incompatible cipher suites will be silently dropped.<br/>For\
            \ instance, if only 'tlsv1.3' is given in the <code>versions</code>,<br/>configuring\
            \ cipher suites for other versions will have no effect.<br/><br/><br/><br/>NOTE:\
            \ PSK ciphers are suppressed by 'tlsv1.3' version config<br/><br/>If PSK\
            \ cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/><br/>PSK\
            \ cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,<br/>RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,<br/>RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,<br/>RSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"\
            </code>"
          items:
            type: string
          default: []
        secure_renegotiate:
          type: boolean
          description: "SSL parameter renegotiation is a feature that allows a client\
            \ and a server<br/>to renegotiate the parameters of the SSL connection\
            \ on the fly.<br/>RFC 5746 defines a more secure way of doing this. By\
            \ enabling secure renegotiation,<br/>you drop support for the insecure\
            \ renegotiation, prone to MitM attacks.</br><br/>Has no effect when TLS\
            \ version is configured (or negotiated) to 1.3"
          default: true
        log_level:
          type: string
          description: Log level for SSL communication. Default is 'notice'. Set to
            'debug' to inspect TLS handshake messages.
          default: notice
          enum:
          - emergency
          - alert
          - critical
          - error
          - warning
          - notice
          - info
          - debug
          - none
          - all
        hibernate_after:
          type: string
          description: Hibernate the SSL process after idling for amount of time reducing
            its memory footprint.
          example: 12m
          default: 5s
        enable:
          type: boolean
          description: Enable TLS.
          default: false
        server_name_indication:
          description: "Specify the host name to be used in TLS Server Name Indication\
            \ extension.<br/><br/>For instance, when connecting to \"server.example.net\"\
            , the genuine server<br/>which accepts the connection and performs TLS\
            \ handshake may differ from the<br/>host the TLS client initially connects\
            \ to, e.g. when connecting to an IP address<br/>or when the host has multiple\
            \ resolvable DNS records <br/><br/>If not specified, it will default to\
            \ the host name string which is used<br/>to establish the connection,\
            \ unless it is IP addressed used.<br/><br/>The host name is then also\
            \ used in the host name verification of the peer<br/>certificate.<br/>\
            \ The special value 'disable' prevents the Server Name<br/>Indication\
            \ extension from being sent and disables the hostname<br/>verification\
            \ check."
          example: disable
          oneOf:
          - type: string
          - type: string
            enum:
            - disable
      example:
        cacerts: false
        hibernate_after: 12m
        certfile: certfile
        server_name_indication: disable
        cacertfile: cacertfile
        reuse_sessions: true
        log_level: notice
        secure_renegotiate: true
        password: ""
        depth: 0
        versions:
        - versions
        - versions
        keyfile: keyfile
        enable: false
        ciphers:
        - ciphers
        - ciphers
        verify: verify_none
    lwm2m.resource:
      type: object
      properties:
        operations:
          type: string
          description: Resource Operations
          example: E
        dataType:
          type: string
          description: Data Type
          example: Integer
          enum:
          - Integer
          - Float
          - Time
          - String
          - Boolean
          - Opaque
          - Objlnk
        path:
          type: string
          description: Resource Path
          example: urn:oma:lwm2m:oma:2
        name:
          type: string
          description: Resource Name
          example: lwm2m-test
      example:
        path: urn:oma:lwm2m:oma:2
        operations: E
        dataType: Integer
        name: lwm2m-test
    listeners.ssl_required_bind:
      required:
      - bind
      - id
      - type
      type: object
      properties:
        type:
          type: string
          description: Listener type
          enum:
          - ssl
        running:
          type: boolean
          description: Listener status
        id:
          type: string
          description: Listener id
        current_connections:
          minimum: 0
          type: integer
          description: Current connections
        enable:
          type: boolean
          description: Enable listener.
          default: true
        bind:
          type: string
          description: IP address and port for the listening socket.
          example: 127.0.0.1:80
          default: "8883"
        acceptors:
          minimum: 1
          type: integer
          description: The size of the listener's receiving pool.
          default: 16
        max_connections:
          description: The maximum number of concurrent connections allowed by the
            listener.
          oneOf:
          - minimum: 1
            type: integer
          - type: string
            enum:
            - infinity
          default: infinity
        mountpoint:
          type: string
          description: "When publishing or subscribing, prefix all topics with a mountpoint\
            \ string.<br/>The prefixed string will be removed from the topic name\
            \ when the message<br/>is delivered to the subscriber. The mountpoint\
            \ is a way that users can use<br/>to implement isolation of message routing\
            \ between different listeners.<br/>For example if a client A subscribes\
            \ to `t` with `listeners.tcp.\\<name>.mountpoint`<br/>set to `some_tenant`,\
            \ then the client actually subscribes to the topic<br/>`some_tenant/t`.\
            \ Similarly, if another client B (connected to the same listener<br/>as\
            \ the client A) sends a message to topic `t`, the message is routed<br/>to\
            \ all the clients subscribed `some_tenant/t`, so client A will receive\
            \ the<br/>message, with topic name `t`.<br/><br/>Set to `\"\"` to disable\
            \ the feature.<br/><br/><br/>Variables in mountpoint string:<br/>  - <code>${clientid}</code>:\
            \ clientid<br/>  - <code>${username}</code>: username"
          default: ""
        enable_authn:
          type: string
          description: "Set <code>true</code> (default) to enable client authentication\
            \ on this listener, the authentication<br/>process goes through the configured\
            \ authentication chain.<br/>When set to <code>false</code> to allow any\
            \ clients with or without authentication information such as username\
            \ or password to log in.<br/>When set to <code>quick_deny_anonymous</code>,\
            \ it behaves like when set to <code>true</code>, but clients will be<br/>denied\
            \ immediately without going through any authenticators if <code>username</code>\
            \ is not provided. This is useful to fence off<br/>anonymous clients early."
          default: "true"
          enum:
          - "true"
          - "false"
          - quick_deny_anonymous
        max_conn_rate:
          type: string
          description: "Maximum connection rate.<br/><br/>This is used to limit the\
            \ connection rate for this listener,<br/>once the limit is reached, new\
            \ connections will be deferred or refused"
          example: 1000/s
        messages_rate:
          type: string
          description: "Messages publish rate.<br/><br/>This is used to limit the\
            \ inbound message numbers for each client connected to this listener,<br/>once\
            \ the limit is reached, the restricted client will slow down and even\
            \ be hung for a while."
          example: 1000/s
        bytes_rate:
          type: string
          description: "Data publish rate.<br/><br/>This is used to limit the inbound\
            \ bytes rate for each client connected to this listener,<br/>once the\
            \ limit is reached, the restricted client will slow down and even be hung\
            \ for a while."
          example: 100MB/s
        access_rules:
          type: array
          description: "The access control rules for this listener.<br/>See: https://github.com/emqtt/esockd#allowdeny"
          items:
            type: string
          default:
          - allow all
        proxy_protocol:
          type: boolean
          description: "Enable the Proxy Protocol V1/2 if the EMQX cluster is deployed\
            \ behind HAProxy or Nginx.<br/><br/>See: https://www.haproxy.com/blog/haproxy/proxy-protocol/"
          default: false
        proxy_protocol_timeout:
          type: string
          description: Timeout for proxy protocol. EMQX will close the TCP connection
            if proxy protocol packet is not received within the timeout.
          example: 12m
          default: 3s
        tcp_options:
          $ref: '#/components/schemas/broker.tcp_opts'
        ssl_options:
          $ref: '#/components/schemas/broker.listener_ssl_opts'
    retainer.message_summary:
      type: object
      properties:
        msgid:
          type: string
          description: Message ID.
        topic:
          type: string
          description: Topic.
        qos:
          maximum: 2
          minimum: 0
          type: integer
          description: QoS.
          example: 0
        publish_at:
          type: string
          description: "Message publish time, RFC 3339 format."
        from_clientid:
          type: string
          description: The clientid of publisher.
        from_username:
          type: string
          description: The username of publisher.
      example:
        from_clientid: from_clientid
        qos: 0
        from_username: from_username
        msgid: msgid
        topic: topic
        publish_at: publish_at
    emqx_mgmt_api_topics.topic:
      required:
      - node
      - topic
      type: object
      properties:
        topic:
          type: string
          description: Topic Name
        node:
          type: string
          description: Node
      example:
        node: node
        topic: topic
    emqx_rule_api_schema.ctx_connected:
      required:
      - event_type
      type: object
      properties:
        event_type:
          type: string
          description: Event Type
          enum:
          - client_connected
        clientid:
          type: string
          description: The Client ID
        username:
          type: string
          description: Username
        mountpoint:
          type: string
          description: The Mountpoint
        peername:
          type: string
          description: The IP Address and Port of the Peer Client
        sockname:
          type: string
          description: The IP Address and Port of the Local Listener
        proto_name:
          type: string
          description: Protocol Name
        proto_ver:
          type: string
          description: Protocol Version
        keepalive:
          type: integer
          description: KeepAlive
        clean_start:
          type: boolean
          description: Clean Start
          default: true
        expiry_interval:
          type: integer
          description: Expiry Interval
        is_bridge:
          type: boolean
          description: Is Bridge
          default: false
        connected_at:
          type: integer
          description: The Time that this Client is Connected
    listeners.listener_id_status:
      required:
      - bind
      - enable
      - id
      - name
      - type
      type: object
      properties:
        id:
          type: string
          description: Listener id
          example: tcp:demo
        type:
          type: string
          description: Listener type
          enum:
          - tcp
          - ssl
          - ws
          - wss
          - quic
        name:
          type: string
          description: Listener name
        enable:
          type: boolean
          description: Listener enable
        number:
          minimum: 1
          type: integer
          description: ListenerId counter
        bind:
          type: string
          description: Listener bind addr
          example: 127.0.0.1:80
        acceptors:
          minimum: 1
          type: integer
          description: ListenerId acceptors
        status:
          $ref: '#/components/schemas/listeners.status'
        node_status:
          type: array
          items:
            $ref: '#/components/schemas/listeners.node_status'
      example:
        number: 1
        bind: 127.0.0.1:80
        node_status:
        - node: emqx@127.0.0.1
          status: null
        - node: emqx@127.0.0.1
          status: null
        enable: true
        name: name
        id: tcp:demo
        type: tcp
        acceptors: 1
        status:
          running: ""
          current_connections: 0
          max_connections: ""
    emqx_dashboard_monitor_api.sampler_current:
      type: object
      properties:
        dropped_msg_rate:
          type: integer
          description: Dropped messages per 10 seconds
        received_msg_rate:
          type: integer
          description: Dropped messages per 10 seconds
        sent_msg_rate:
          type: integer
          description: Sent messages per 10 seconds
        subscriptions:
          type: integer
          description: Subscriptions at the time of sampling. Can only represent the
            approximate state
        topics:
          type: integer
          description: Count topics at the time of sampling. Can only represent the
            approximate state
        connections:
          type: integer
          description: Sessions at the time of sampling. Can only represent the approximate
            state
        live_connections:
          type: integer
          description: Connections at the time of sampling. Can only represent the
            approximate state
      example:
        subscriptions: 5
        sent_msg_rate: 1
        topics: 5
        received_msg_rate: 6
        dropped_msg_rate: 0
        connections: 2
        live_connections: 7
    authn.http_get:
      required:
      - backend
      - mechanism
      - method
      - url
      type: object
      properties:
        method:
          type: string
          description: HTTP request method.
          enum:
          - get
        headers:
          type: object
          description: List of HTTP headers (without <code>content-type</code>).
          example: {}
          default:
            accept: application/json
            cache-control: no-cache
            connection: keep-alive
            keep-alive: "timeout=30, max=1000"
        mechanism:
          type: string
          description: Authentication mechanism.
          enum:
          - password_based
        backend:
          type: string
          description: Backend type.
          enum:
          - http
        url:
          type: string
          description: URL of the HTTP server.
        body:
          type: object
          description: HTTP request body.
          example: {}
        request_timeout:
          type: string
          description: HTTP request timeout.
          example: 32s
          default: 5s
        enable:
          type: boolean
          description: Set to <code>true</code> or <code>false</code> to disable this
            auth provider.
          default: true
        connect_timeout:
          type: string
          description: The timeout when connecting to the HTTP server.
          example: 32s
          default: 15s
        enable_pipelining:
          minimum: 1
          type: integer
          description: "A positive integer. Whether to send HTTP requests continuously,\
            \ when set to 1, it means that after each HTTP request is sent, you need\
            \ to wait for the server to return and then continue to send the next\
            \ request."
          default: 100
        max_retries:
          minimum: 0
          type: integer
          deprecated: true
        pool_size:
          minimum: 1
          type: integer
          description: The pool size.
          default: 8
        request:
          $ref: '#/components/schemas/connector-http.request'
        retry_interval:
          type: string
          example: 12m
          deprecated: true
        ssl:
          $ref: '#/components/schemas/broker.ssl_client_opts'
    dashboard.ssl_options:
      type: object
      properties:
        cacertfile:
          type: string
          description: "Trusted PEM format CA certificates bundle file.<br/><br/>The\
            \ certificates in this file are used to verify the TLS peer's certificates.<br/>Append\
            \ new certificates to the file if new CAs are to be trusted.<br/>There\
            \ is no need to restart EMQX to have the updated file loaded, because<br/>the\
            \ system regularly checks if file has been updated (and reload).<br/><br/>NOTE:\
            \ invalidating (deleting) a certificate from the file will not affect<br/>already\
            \ established connections."
          default: "${EMQX_ETC_DIR}/certs/cacert.pem"
        cacerts:
          type: boolean
          description: "When enabled, uses the system trusted CA certificates for\
            \ establishing to TLS connections."
          default: false
        certfile:
          type: string
          description: "PEM format certificates chain file.<br/><br/>The certificates\
            \ in this file should be in reversed order of the certificate<br/>issue\
            \ chain. That is, the host's certificate should be placed in the beginning<br/>of\
            \ the file, followed by the immediate issuer certificate and so on.<br/>Although\
            \ the root CA certificate is optional, it should be placed at the end\
            \ of<br/>the file if it is to be added."
          default: "${EMQX_ETC_DIR}/certs/cert.pem"
        keyfile:
          type: string
          description: PEM format private key file.
          default: "${EMQX_ETC_DIR}/certs/key.pem"
        verify:
          type: string
          description: Enable or disable peer verification.
          default: verify_none
          enum:
          - verify_peer
          - verify_none
        reuse_sessions:
          type: boolean
          description: Enable TLS session reuse.</br><br/>Has no effect when TLS version
            is configured (or negotiated) to 1.3
          default: true
        depth:
          minimum: 0
          type: integer
          description: "Maximum number of non-self-issued intermediate certificates\
            \ that can follow the peer certificate in a valid certification path.<br/>So,\
            \ if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/><br/>if\
            \ 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/><br/>if 2 the\
            \ path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA."
          default: 10
        password:
          type: string
          description: String containing the user's password. Only used if the private
            key file is password-protected.
          format: password
          example: ""
        versions:
          type: array
          description: "All TLS/DTLS versions to be supported.<br/><br/>NOTE: PSK\
            \ ciphers are suppressed by 'tlsv1.3' version config.<br/><br/>In case\
            \ PSK cipher suites are intended, make sure to configure<br/><code>['tlsv1.2',\
            \ 'tlsv1.1']</code> here."
          items:
            type: string
          default:
          - tlsv1.3
          - tlsv1.2
        ciphers:
          type: array
          description: "This config holds TLS cipher suite names separated by comma,<br/>or\
            \ as an array of strings. e.g.<br/><code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"\
            </code> or<br/><code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"\
            ]</code>.<br/><br/><br/>Ciphers (and their ordering) define the way in\
            \ which the<br/>client and server encrypts information over the network\
            \ connection.<br/>Selecting a good cipher suite is critical for the<br/>application's\
            \ data security, confidentiality and performance.<br/><br/>The names should\
            \ be in OpenSSL string format (not RFC format).<br/>All default values\
            \ and examples provided by EMQX config<br/>documentation are all in OpenSSL\
            \ format.<br/><br/><br/>NOTE: Certain cipher suites are only compatible\
            \ with<br/>specific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or\
            \ 'tlsv1.3')<br/>incompatible cipher suites will be silently dropped.<br/>For\
            \ instance, if only 'tlsv1.3' is given in the <code>versions</code>,<br/>configuring\
            \ cipher suites for other versions will have no effect.<br/><br/><br/><br/>NOTE:\
            \ PSK ciphers are suppressed by 'tlsv1.3' version config<br/><br/>If PSK\
            \ cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/><br/>PSK\
            \ cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,<br/>RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,<br/>RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,<br/>RSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"\
            </code>"
          items:
            type: string
          default: []
        secure_renegotiate:
          type: boolean
          description: "SSL parameter renegotiation is a feature that allows a client\
            \ and a server<br/>to renegotiate the parameters of the SSL connection\
            \ on the fly.<br/>RFC 5746 defines a more secure way of doing this. By\
            \ enabling secure renegotiation,<br/>you drop support for the insecure\
            \ renegotiation, prone to MitM attacks.</br><br/>Has no effect when TLS\
            \ version is configured (or negotiated) to 1.3"
          default: true
        log_level:
          type: string
          description: Log level for SSL communication. Default is 'notice'. Set to
            'debug' to inspect TLS handshake messages.
          default: notice
          enum:
          - emergency
          - alert
          - critical
          - error
          - warning
          - notice
          - info
          - debug
          - none
          - all
        hibernate_after:
          type: string
          description: Hibernate the SSL process after idling for amount of time reducing
            its memory footprint.
          example: 12m
          default: 5s
        dhfile:
          type: string
          description: "Path to a file containing PEM-encoded Diffie-Hellman parameters<br/>to\
            \ be used by the server if a cipher suite using Diffie-Hellman<br/>key\
            \ exchange is negotiated. If not specified, default parameters<br/>are\
            \ used.<br/><br/>NOTE: The <code>dhfile</code> option is not supported\
            \ by TLS 1.3."
        honor_cipher_order:
          type: boolean
          description: "An important security setting, it forces the cipher to be\
            \ set based<br/> on the server-specified order instead of the client-specified\
            \ order,<br/> hence enforcing the (usually more properly configured) security<br/>\
            \ ordering of the server administrator."
          default: true
        client_renegotiation:
          type: boolean
          description: "In protocols that support client-initiated renegotiation,<br/>the\
            \ cost of resources of such an operation is higher for the server than\
            \ the client.<br/>This can act as a vector for denial of service attacks.<br/>The\
            \ SSL application already takes measures to counter-act such attempts,<br/>but\
            \ client-initiated renegotiation can be strictly disabled by setting this\
            \ option to false.<br/>The default value is true. Note that disabling\
            \ renegotiation can result in<br/>long-lived connections becoming unusable\
            \ due to limits on<br/>the number of messages the underlying cipher suite\
            \ can encipher.</br><br/>Has no effect when TLS version is configured\
            \ (or negotiated) to 1.3"
          default: true
        handshake_timeout:
          type: string
          description: Maximum time duration allowed for the handshake to complete
          example: 12m
          default: 15s
      example:
        cacerts: false
        hibernate_after: 12m
        certfile: "${EMQX_ETC_DIR}/certs/cert.pem"
        client_renegotiation: true
        cacertfile: "${EMQX_ETC_DIR}/certs/cacert.pem"
        reuse_sessions: true
        log_level: notice
        handshake_timeout: 12m
        secure_renegotiate: true
        dhfile: dhfile
        password: ""
        depth: 0
        versions:
        - versions
        - versions
        keyfile: "${EMQX_ETC_DIR}/certs/key.pem"
        honor_cipher_order: true
        ciphers:
        - ciphers
        - ciphers
        verify: verify_none
    emqx_telemetry_api.telemetry:
      type: object
      properties:
        emqx_version:
          type: string
          description: Get emqx version
          example: 5.0.0-beta.3-32d1547c
        license:
          type: object
          description: Get license information
          example:
            edition: opensource
        os_name:
          type: string
          description: Get OS name
          example: Linux
        os_version:
          type: string
          description: Get OS version
          example: "20.04"
        otp_version:
          type: string
          description: Get Erlang OTP version
          example: "24"
        up_time:
          type: integer
          description: Get uptime
          example: 20220113
        uuid:
          type: string
          description: Get UUID
          example: AAAAAAAA-BBBB-CCCC-2022-DDDDEEEEFFF
        nodes_uuid:
          type: array
          description: Get nodes UUID
          example:
          - AAAAAAAA-BBBB-CCCC-2022-DDDDEEEEFFF
          - ZZZZZZZZ-CCCC-BBBB-2022-DDDDEEEEFFF
          items:
            type: string
        active_plugins:
          type: array
          description: Get active plugins
          example:
          - Plugin A
          - Plugin B
          items:
            type: string
        active_modules:
          type: array
          description: Get active modules
          example:
          - Module A
          - Module B
          items:
            type: string
        num_clients:
          type: integer
          description: Get number of clients
          example: 20220113
        messages_received:
          type: integer
          description: Get number of messages received
          example: 2022
        messages_sent:
          type: integer
          description: Get number of messages sent
          example: 2022
      example:
        otp_version: "24"
        os_version: "20.04"
        uuid: AAAAAAAA-BBBB-CCCC-2022-DDDDEEEEFFF
        messages_received: 2022
        messages_sent: 2022
        license:
          edition: opensource
        emqx_version: 5.0.0-beta.3-32d1547c
        active_plugins:
        - Plugin A
        - Plugin B
        os_name: Linux
        up_time: 20220113
        num_clients: 20220113
        nodes_uuid:
        - AAAAAAAA-BBBB-CCCC-2022-DDDDEEEEFFF
        - ZZZZZZZZ-CCCC-BBBB-2022-DDDDEEEEFFF
        active_modules:
        - Module A
        - Module B
    listeners.node_status:
      type: object
      properties:
        node:
          type: string
          description: Node name
          example: emqx@127.0.0.1
        status:
          $ref: '#/components/schemas/listeners.status'
      example:
        node: emqx@127.0.0.1
        status: null
    emqx_mgmt_api_clients.client:
      type: object
      properties:
        awaiting_rel_cnt:
          type: integer
          description: "v4 api name [awaiting_rel] Number of awaiting PUBREC packet"
        awaiting_rel_max:
          type: integer
          description: "v4 api name [max_awaiting_rel]. Maximum allowed number of\
            \ awaiting PUBREC packet"
        clean_start:
          type: boolean
          description: Indicate whether the client is using a brand new session
        clientid:
          type: string
          description: Client identifier
        connected:
          type: boolean
          description: Whether the client is connected
        connected_at:
          description: "Client connection time, rfc3339 or timestamp(millisecond)"
          oneOf:
          - type: integer
            description: epoch-millisecond
            example: 1640995200000
          - type: string
            format: date-time
            example: 2022-01-01T00:00:00Z
        created_at:
          description: "Session creation time, rfc3339 or timestamp(millisecond)"
          oneOf:
          - type: integer
            description: epoch-millisecond
            example: 1640995200000
          - type: string
            format: date-time
            example: 2022-01-01T00:00:00Z
        disconnected_at:
          description: "Client offline time. It's Only valid and returned when connected\
            \ is false, rfc3339 or timestamp(millisecond)"
          oneOf:
          - type: integer
            description: epoch-millisecond
            example: 1640995200000
          - type: string
            format: date-time
            example: 2022-01-01T00:00:00Z
        expiry_interval:
          type: integer
          description: "Session expiration interval, with the unit of second"
        heap_size:
          type: integer
          description: Process heap size with the unit of byte
        inflight_cnt:
          type: integer
          description: Current length of inflight
        inflight_max:
          type: integer
          description: "v4 api name [max_inflight]. Maximum length of inflight"
        ip_address:
          type: string
          description: Client's IP address
        is_bridge:
          type: boolean
          description: Indicates whether the client is connectedvia bridge
        keepalive:
          type: integer
          description: "keepalive time, with the unit of second"
        mailbox_len:
          type: integer
          description: Process mailbox size
        mqueue_dropped:
          type: integer
          description: Number of messages dropped by the message queue due to exceeding
            the length
        mqueue_len:
          type: integer
          description: Current length of message queue
        mqueue_max:
          type: integer
          description: "v4 api name [max_mqueue]. Maximum length of message queue"
        node:
          type: string
          description: Name of the node to which the client is connected
        port:
          type: integer
          description: Client's port
        proto_name:
          type: string
          description: Client protocol name
        proto_ver:
          type: integer
          description: Protocol version used by the client
        recv_cnt:
          type: integer
          description: Number of TCP packets received
        recv_msg:
          type: integer
          description: Number of PUBLISH packets received
        recv_msg.dropped:
          type: integer
          description: Number of dropped PUBLISH packets
        recv_msg.dropped.await_pubrel_timeout:
          type: integer
          description: Number of dropped PUBLISH packets due to expired
        recv_msg.qos0:
          type: integer
          description: Number of PUBLISH QoS0 packets received
        recv_msg.qos1:
          type: integer
          description: Number of PUBLISH QoS1 packets received
        recv_msg.qos2:
          type: integer
          description: Number of PUBLISH QoS2 packets received
        recv_oct:
          type: integer
          description: Number of bytes received
        recv_pkt:
          type: integer
          description: Number of MQTT packets received
        reductions:
          type: integer
          description: Erlang reduction
        send_cnt:
          type: integer
          description: Number of TCP packets sent
        send_msg:
          type: integer
          description: Number of PUBLISH packets sent
        send_msg.dropped:
          type: integer
          description: Number of dropped PUBLISH packets
        send_msg.dropped.expired:
          type: integer
          description: Number of dropped PUBLISH packets due to expired
        send_msg.dropped.queue_full:
          type: integer
          description: Number of dropped PUBLISH packets due to queue full
        send_msg.dropped.too_large:
          type: integer
          description: Number of dropped PUBLISH packets due to packet length too
            large
        send_msg.qos0:
          type: integer
          description: Number of PUBLISH QoS0 packets sent
        send_msg.qos1:
          type: integer
          description: Number of PUBLISH QoS1 packets sent
        send_msg.qos2:
          type: integer
          description: Number of PUBLISH QoS2 packets sent
        send_oct:
          type: integer
          description: Number of bytes sent
        send_pkt:
          type: integer
          description: Number of MQTT packets sent
        subscriptions_cnt:
          type: integer
          description: Number of subscriptions established by this client.
        subscriptions_max:
          type: integer
          description: "v4 api name [max_subscriptions] Maximum number of subscriptions\
            \ allowed by this client"
        username:
          type: string
          description: User name of client when connecting
        mountpoint:
          type: string
          description: Topic mountpoint
      example:
        clientid: clientid
        keepalive: 7
        mqueue_len: 2
        reductions: 6
        send_msg.qos0: 2
        created_at: ""
        proto_ver: 1
        recv_msg.dropped.await_pubrel_timeout: 7
        connected_at: ""
        send_msg.dropped.expired: 3
        mountpoint: mountpoint
        mailbox_len: 9
        send_msg: 9
        subscriptions_cnt: 3
        heap_size: 5
        disconnected_at: ""
        mqueue_dropped: 3
        recv_msg: 1
        is_bridge: true
        recv_cnt: 1
        send_msg.dropped.queue_full: 6
        proto_name: proto_name
        ip_address: ip_address
        awaiting_rel_cnt: 0
        send_msg.dropped.too_large: 1
        subscriptions_max: 3
        recv_msg.qos0: 1
        send_cnt: 8
        recv_msg.qos1: 4
        recv_msg.qos2: 5
        connected: true
        node: node
        recv_oct: 9
        inflight_max: 2
        mqueue_max: 4
        port: 7
        recv_pkt: 9
        send_oct: 5
        awaiting_rel_max: 6
        inflight_cnt: 5
        send_msg.dropped: 6
        send_msg.qos2: 6
        send_msg.qos1: 6
        expiry_interval: 1
        recv_msg.dropped: 6
        send_pkt: 6
        clean_start: true
        username: username
    bridge_mqtt.get:
      required:
      - server
      type: object
      properties:
        status:
          type: string
          description: "The status of the bridge<br/><br/>- <code>connecting</code>:\
            \ the initial state before any health probes were made.<br/><br/>- <code>connected</code>:\
            \ when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>:\
            \ when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>:\
            \ when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>:\
            \ When not all the nodes are at the same status."
          enum:
          - connected
          - disconnected
          - connecting
          - inconsistent
        status_reason:
          type: string
          description: This is the reason given in case a bridge is failing to connect.
          example: Connection refused
        node_status:
          type: array
          description: Node status.
          items:
            $ref: '#/components/schemas/bridge.node_status'
        enable:
          type: boolean
          description: Enable or disable this bridge
          default: true
        resource_opts:
          $ref: '#/components/schemas/bridge_mqtt.creation_opts'
        mode:
          type: string
          description: "The mode of the MQTT Bridge.<br/><br/>- cluster_shareload:\
            \ create an MQTT connection on each node in the emqx cluster.<br/><br/>In\
            \ 'cluster_shareload' mode, the incoming load from the remote broker is\
            \ shared by<br/>using shared subscription.<br/><br/>Note that the 'clientid'\
            \ is suffixed by the node name, this is to avoid<br/>clientid conflicts\
            \ between different nodes. And we can only use shared subscription<br/>topic\
            \ filters for <code>remote.topic</code> of ingress connections."
          deprecated: true
          default: cluster_shareload
          enum:
          - cluster_shareload
        server:
          type: string
          description: The host and port of the remote MQTT broker
        clientid_prefix:
          type: string
          description: Optional prefix to prepend to the clientid used by egress bridges.
        reconnect_interval:
          type: string
          deprecated: true
        proto_ver:
          type: string
          description: The MQTT protocol version
          default: v4
          enum:
          - v3
          - v4
          - v5
        bridge_mode:
          type: boolean
          description: "If enable bridge mode.<br/>NOTE: This setting is only for\
            \ MQTT protocol version older than 5.0, and the remote MQTT<br/>broker\
            \ MUST support this feature.<br/>If bridge_mode is set to true, the bridge\
            \ will indicate to the remote broker that it is a bridge not an ordinary\
            \ client.<br/>This means that loop detection will be more effective and\
            \ that retained messages will be propagated correctly."
          default: false
        username:
          type: string
          description: The username of the MQTT protocol
        password:
          type: string
          description: The password of the MQTT protocol
          format: password
        clean_start:
          type: boolean
          description: Whether to start a clean session when reconnecting a remote
            broker for ingress bridge
          default: true
        keepalive:
          type: string
          description: "MQTT Keepalive. Time interval is a string that contains a\
            \ number followed by time unit:<br/>- `ms` for milliseconds,<br/>- `s`\
            \ for seconds,<br/>- `m` for minutes,<br/>- `h` for hours;<br/><br/>or\
            \ combination of whereof: `1h5m0s`"
          default: 300s
        retry_interval:
          type: string
          description: "Message retry interval. Delay for the MQTT bridge to retry\
            \ sending the QoS1/QoS2 messages in case of ACK not received. Time interval\
            \ is a string that contains a number followed by time unit:<br/>- `ms`\
            \ for milliseconds,<br/>- `s` for seconds,<br/>- `m` for minutes,<br/>-\
            \ `h` for hours;<br/><br/>or combination of whereof: `1h5m0s`"
          default: 15s
        max_inflight:
          minimum: 0
          type: integer
          description: "Max inflight (sent, but un-acked) messages of the MQTT protocol"
          default: 32
        ssl:
          $ref: '#/components/schemas/broker.ssl_client_opts'
        ingress:
          $ref: '#/components/schemas/connector-mqtt.ingress'
        egress:
          $ref: '#/components/schemas/connector-mqtt.egress'
    authz.resource_metrics:
      type: object
      properties:
        matched:
          type: integer
          description: Count of this resource is queried.
        success:
          type: integer
          description: Count of query success.
        failed:
          type: integer
          description: Count of query failed.
        rate:
          type: number
          description: "The rate of matched, times/second."
        rate_max:
          type: number
          description: "The max rate of matched, times/second."
        rate_last5m:
          type: number
          description: "The average rate of matched in the last 5 minutes, times/second."
      example:
        rate_last5m: 2.3021358869347654518833223846741020679473876953125
        rate: 5.962133916683182377482808078639209270477294921875
        rate_max: 5.63737665663332876420099637471139430999755859375
        success: 6
        matched: 0
        failed: 1
    emqx_mgmt_api_subscriptions.subscription:
      type: object
      properties:
        node:
          type: string
          description: Access type
          example: emqx@127.0.0.1
        topic:
          type: string
          description: Topic name
          example: testtopic/1
        clientid:
          type: string
          description: Client identifier
          example: emqx_clientid_xx128cdhfc
        qos:
          maximum: 2
          minimum: 0
          type: integer
          description: QoS
          example: 0
        nl:
          type: integer
          description: No Local
          example: 0
        rap:
          type: integer
          description: Retain as Published
          example: 0
        rh:
          type: integer
          description: Retain Handling
          example: 0
      example:
        rap: 0
        node: emqx@127.0.0.1
        clientid: emqx_clientid_xx128cdhfc
        qos: 0
        rh: 0
        topic: testtopic/1
        nl: 0
    emqx_gateway_api_listeners.ssl_listener:
      type: object
      properties:
        id:
          type: string
          description: Listener ID
        type:
          type: string
          description: Listener Type
          enum:
          - ssl
        name:
          type: string
          description: Listener Name
        running:
          type: boolean
          description: Listener Running status
        acceptors:
          type: integer
          description: Size of the acceptor pool.
          default: 16
        tcp_options:
          $ref: '#/components/schemas/broker.tcp_opts'
        proxy_protocol:
          type: boolean
          description: "Enable the Proxy Protocol V1/2 if the EMQX cluster is deployed\
            \ behind HAProxy or Nginx.<br/>See: https://www.haproxy.com/blog/haproxy/proxy-protocol/"
          default: false
        proxy_protocol_timeout:
          type: string
          description: Timeout for proxy protocol.<br/>EMQX will close the TCP connection
            if proxy protocol packet is not received within the timeout.
          example: 12m
          default: 15s
        enable:
          type: boolean
          description: Enable the listener.
          default: true
        bind:
          type: string
          description: The IP address and port that the listener will bind.
          example: 127.0.0.1:80
        max_connections:
          description: Maximum number of concurrent connections.
          oneOf:
          - type: string
            enum:
            - infinity
          - minimum: 1
            type: integer
          default: 1024
        max_conn_rate:
          type: integer
          description: Maximum connections per second.
          default: 1000
        enable_authn:
          type: boolean
          description: Set <code>true</code> (default) to enable client authentication
            on this listener. <br/>When set to <code>false</code> clients will be
            allowed to connect without authentication.
          default: true
        mountpoint:
          type: string
          description: "When publishing or subscribing, prefix all topics with a mountpoint\
            \ string.<br/>The prefixed string will be removed from the topic name\
            \ when the message is delivered to the subscriber.<br/>The mountpoint\
            \ is a way that users can use to implement isolation of message routing\
            \ between different listeners.<br/>For example if a client A subscribes\
            \ to `t` with `listeners.tcp.\\<name>.mountpoint` set to `some_tenant`,<br/>then\
            \ the client actually subscribes to the topic `some_tenant/t`.<br/>Similarly,\
            \ if another client B (connected to the same listener as the client A)\
            \ sends a message to topic `t`,<br/>the message is routed to all the clients\
            \ subscribed `some_tenant/t`,<br/>so client A will receive the message,\
            \ with topic name `t`. Set to `\"\"` to disable the feature.<br/>Variables\
            \ in mountpoint string:<br/><br/>  - <code>${clientid}</code>: clientid<br/><br/>\
            \  - <code>${username}</code>: username"
        access_rules:
          type: array
          description: "The access control rules for this listener.<br/>See: https://github.com/emqtt/esockd#allowdeny"
          items:
            type: string
          default: []
        ssl_options:
          $ref: '#/components/schemas/broker.listener_ssl_opts'
        status:
          $ref: '#/components/schemas/listeners.status'
        node_status:
          type: array
          description: listener status of each node in the cluster
          items:
            $ref: '#/components/schemas/listeners.node_status'
    emqx_mongodb.topology:
      type: object
      properties:
        max_overflow:
          minimum: 0
          type: integer
          description: The maximum number of additional workers that can be created
            when all workers in the pool are busy. This helps to manage temporary
            spikes in workload by allowing more concurrent connections to the MongoDB
            server.
          default: 0
        overflow_ttl:
          type: string
          description: Period of time before workers that exceed the configured pool
            size ("overflow") to be terminated.
          example: 32s
        overflow_check_period:
          type: string
          description: Period for checking if there are more workers than configured
            ("overflow").
          example: 32s
        local_threshold_ms:
          type: string
          description: The size of the latency window for selecting among multiple
            suitable MongoDB instances.
          example: 32s
        connect_timeout_ms:
          type: string
          description: The duration to attempt a connection before timing out.
          example: 32s
        socket_timeout_ms:
          type: string
          description: The duration to attempt to send or to receive on a socket before
            the attempt times out.
          example: 32s
        server_selection_timeout_ms:
          type: string
          description: Specifies how long to block for server selection before throwing
            an exception.
          example: 32s
        wait_queue_timeout_ms:
          type: string
          description: The maximum duration that a worker can wait for a connection
            to become available.
          example: 32s
        heartbeat_frequency_ms:
          type: string
          description: "Controls when the driver checks the state of the MongoDB deployment.\
            \ Specify the interval between checks, counted from the end of the previous\
            \ check until the beginning of the next one. If the number of connections\
            \ is increased (which will happen, for example, if you increase the pool\
            \ size), you may need to increase this period as well to avoid creating\
            \ too many log entries in the MongoDB log file."
          example: 32s
          default: 200s
        min_heartbeat_frequency_ms:
          type: string
          description: Controls the minimum amount of time to wait between heartbeats.
          example: 32s
    listeners.quic_required_bind-with_name:
      required:
      - bind
      - name
      - type
      type: object
      properties:
        type:
          type: string
          description: Listener type
          enum:
          - quic
        running:
          type: boolean
          description: Listener status
        name:
          type: string
          description: Listener name
        current_connections:
          minimum: 0
          type: integer
          description: Current connections
        ciphers:
          type: array
          description: "This config holds TLS cipher suite names separated by comma,<br/>or\
            \ as an array of strings. e.g.<br/><code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"\
            </code> or<br/><code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"\
            ]</code>.<br/><br/><br/>Ciphers (and their ordering) define the way in\
            \ which the<br/>client and server encrypts information over the network\
            \ connection.<br/>Selecting a good cipher suite is critical for the<br/>application's\
            \ data security, confidentiality and performance.<br/><br/>The names should\
            \ be in OpenSSL string format (not RFC format).<br/>All default values\
            \ and examples provided by EMQX config<br/>documentation are all in OpenSSL\
            \ format.<br/><br/><br/>NOTE: Certain cipher suites are only compatible\
            \ with<br/>specific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or\
            \ 'tlsv1.3')<br/>incompatible cipher suites will be silently dropped.<br/>For\
            \ instance, if only 'tlsv1.3' is given in the <code>versions</code>,<br/>configuring\
            \ cipher suites for other versions will have no effect.<br/><br/><br/><br/>NOTE:\
            \ PSK ciphers are suppressed by 'tlsv1.3' version config<br/><br/>If PSK\
            \ cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/><br/>PSK\
            \ cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,<br/>RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,<br/>RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,<br/>RSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"\
            </code><br/><br/><br/>NOTE: QUIC listener supports only 'tlsv1.3' ciphers"
          items:
            type: string
          default:
          - TLS_AES_256_GCM_SHA384
          - TLS_AES_128_GCM_SHA256
          - TLS_CHACHA20_POLY1305_SHA256
        ssl_options:
          $ref: '#/components/schemas/broker.listener_quic_ssl_opts'
        enable:
          type: boolean
          description: Enable listener.
          default: true
        bind:
          type: string
          description: IP address and port for the listening socket.
          example: 127.0.0.1:80
          default: "14567"
        acceptors:
          minimum: 1
          type: integer
          description: The size of the listener's receiving pool.
          default: 16
        max_connections:
          description: The maximum number of concurrent connections allowed by the
            listener.
          oneOf:
          - minimum: 1
            type: integer
          - type: string
            enum:
            - infinity
          default: infinity
        mountpoint:
          type: string
          description: "When publishing or subscribing, prefix all topics with a mountpoint\
            \ string.<br/>The prefixed string will be removed from the topic name\
            \ when the message<br/>is delivered to the subscriber. The mountpoint\
            \ is a way that users can use<br/>to implement isolation of message routing\
            \ between different listeners.<br/>For example if a client A subscribes\
            \ to `t` with `listeners.tcp.\\<name>.mountpoint`<br/>set to `some_tenant`,\
            \ then the client actually subscribes to the topic<br/>`some_tenant/t`.\
            \ Similarly, if another client B (connected to the same listener<br/>as\
            \ the client A) sends a message to topic `t`, the message is routed<br/>to\
            \ all the clients subscribed `some_tenant/t`, so client A will receive\
            \ the<br/>message, with topic name `t`.<br/><br/>Set to `\"\"` to disable\
            \ the feature.<br/><br/><br/>Variables in mountpoint string:<br/>  - <code>${clientid}</code>:\
            \ clientid<br/>  - <code>${username}</code>: username"
          default: ""
        enable_authn:
          type: string
          description: "Set <code>true</code> (default) to enable client authentication\
            \ on this listener, the authentication<br/>process goes through the configured\
            \ authentication chain.<br/>When set to <code>false</code> to allow any\
            \ clients with or without authentication information such as username\
            \ or password to log in.<br/>When set to <code>quick_deny_anonymous</code>,\
            \ it behaves like when set to <code>true</code>, but clients will be<br/>denied\
            \ immediately without going through any authenticators if <code>username</code>\
            \ is not provided. This is useful to fence off<br/>anonymous clients early."
          default: "true"
          enum:
          - "true"
          - "false"
          - quick_deny_anonymous
        max_conn_rate:
          type: string
          description: "Maximum connection rate.<br/><br/>This is used to limit the\
            \ connection rate for this listener,<br/>once the limit is reached, new\
            \ connections will be deferred or refused"
          example: 1000/s
        messages_rate:
          type: string
          description: "Messages publish rate.<br/><br/>This is used to limit the\
            \ inbound message numbers for each client connected to this listener,<br/>once\
            \ the limit is reached, the restricted client will slow down and even\
            \ be hung for a while."
          example: 1000/s
        bytes_rate:
          type: string
          description: "Data publish rate.<br/><br/>This is used to limit the inbound\
            \ bytes rate for each client connected to this listener,<br/>once the\
            \ limit is reached, the restricted client will slow down and even be hung\
            \ for a while."
          example: 100MB/s
    emqx_topic_metrics_api.topic_metrics:
      required:
      - create_time
      - metrics
      - topic
      type: object
      properties:
        topic:
          type: string
          description: Topic
          example: testtopic/1
        create_time:
          description: Create time
          example: 2022-01-14T21:48:47+08:00
          oneOf:
          - type: integer
            description: epoch-second
            example: 1640995200
          - type: string
            format: date-time
            example: 2022-01-01T00:00:00Z
        reset_time:
          description: Reset time. In rfc3339. Nullable if never reset
          example: 2022-01-14T21:48:47+08:00
          oneOf:
          - type: integer
            description: epoch-second
            example: 1640995200
          - type: string
            format: date-time
            example: 2022-01-01T00:00:00Z
        metrics:
          $ref: '#/components/schemas/emqx_topic_metrics_api.metrics'
      example:
        create_time: 2022-01-14T21:48:47+08:00
        topic: testtopic/1
        metrics:
          message.qos2.in.count: 0
          message.in.rate: 0
          message.out.count: 0
          message.dropped.rate: 0
          message.qos0.out.count: 0
          message.qos2.out.rate: 0
          message.qos1.out.rate: 0
          message.out.rate: 0
          message.qos2.in.rate: 0
          message.qos2.out.count: 0
          message.dropped.count: 0
          message.qos0.in.count: 0
          message.qos1.in.rate: 0
          message.qos1.out.count: 0
          message.qos0.in.rate: 0
          message.qos1.in.count: 0
          message.qos0.out.rate: 0
          message.in.count: 0
        reset_time: 2022-01-14T21:48:47+08:00
    listeners.quic_required_bind:
      required:
      - bind
      - id
      - type
      type: object
      properties:
        type:
          type: string
          description: Listener type
          enum:
          - quic
        running:
          type: boolean
          description: Listener status
        id:
          type: string
          description: Listener id
        current_connections:
          minimum: 0
          type: integer
          description: Current connections
        ciphers:
          type: array
          description: "This config holds TLS cipher suite names separated by comma,<br/>or\
            \ as an array of strings. e.g.<br/><code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"\
            </code> or<br/><code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"\
            ]</code>.<br/><br/><br/>Ciphers (and their ordering) define the way in\
            \ which the<br/>client and server encrypts information over the network\
            \ connection.<br/>Selecting a good cipher suite is critical for the<br/>application's\
            \ data security, confidentiality and performance.<br/><br/>The names should\
            \ be in OpenSSL string format (not RFC format).<br/>All default values\
            \ and examples provided by EMQX config<br/>documentation are all in OpenSSL\
            \ format.<br/><br/><br/>NOTE: Certain cipher suites are only compatible\
            \ with<br/>specific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or\
            \ 'tlsv1.3')<br/>incompatible cipher suites will be silently dropped.<br/>For\
            \ instance, if only 'tlsv1.3' is given in the <code>versions</code>,<br/>configuring\
            \ cipher suites for other versions will have no effect.<br/><br/><br/><br/>NOTE:\
            \ PSK ciphers are suppressed by 'tlsv1.3' version config<br/><br/>If PSK\
            \ cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/><br/>PSK\
            \ cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,<br/>RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,<br/>RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,<br/>RSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"\
            </code><br/><br/><br/>NOTE: QUIC listener supports only 'tlsv1.3' ciphers"
          items:
            type: string
          default:
          - TLS_AES_256_GCM_SHA384
          - TLS_AES_128_GCM_SHA256
          - TLS_CHACHA20_POLY1305_SHA256
        ssl_options:
          $ref: '#/components/schemas/broker.listener_quic_ssl_opts'
        enable:
          type: boolean
          description: Enable listener.
          default: true
        bind:
          type: string
          description: IP address and port for the listening socket.
          example: 127.0.0.1:80
          default: "14567"
        acceptors:
          minimum: 1
          type: integer
          description: The size of the listener's receiving pool.
          default: 16
        max_connections:
          description: The maximum number of concurrent connections allowed by the
            listener.
          oneOf:
          - minimum: 1
            type: integer
          - type: string
            enum:
            - infinity
          default: infinity
        mountpoint:
          type: string
          description: "When publishing or subscribing, prefix all topics with a mountpoint\
            \ string.<br/>The prefixed string will be removed from the topic name\
            \ when the message<br/>is delivered to the subscriber. The mountpoint\
            \ is a way that users can use<br/>to implement isolation of message routing\
            \ between different listeners.<br/>For example if a client A subscribes\
            \ to `t` with `listeners.tcp.\\<name>.mountpoint`<br/>set to `some_tenant`,\
            \ then the client actually subscribes to the topic<br/>`some_tenant/t`.\
            \ Similarly, if another client B (connected to the same listener<br/>as\
            \ the client A) sends a message to topic `t`, the message is routed<br/>to\
            \ all the clients subscribed `some_tenant/t`, so client A will receive\
            \ the<br/>message, with topic name `t`.<br/><br/>Set to `\"\"` to disable\
            \ the feature.<br/><br/><br/>Variables in mountpoint string:<br/>  - <code>${clientid}</code>:\
            \ clientid<br/>  - <code>${username}</code>: username"
          default: ""
        enable_authn:
          type: string
          description: "Set <code>true</code> (default) to enable client authentication\
            \ on this listener, the authentication<br/>process goes through the configured\
            \ authentication chain.<br/>When set to <code>false</code> to allow any\
            \ clients with or without authentication information such as username\
            \ or password to log in.<br/>When set to <code>quick_deny_anonymous</code>,\
            \ it behaves like when set to <code>true</code>, but clients will be<br/>denied\
            \ immediately without going through any authenticators if <code>username</code>\
            \ is not provided. This is useful to fence off<br/>anonymous clients early."
          default: "true"
          enum:
          - "true"
          - "false"
          - quick_deny_anonymous
        max_conn_rate:
          type: string
          description: "Maximum connection rate.<br/><br/>This is used to limit the\
            \ connection rate for this listener,<br/>once the limit is reached, new\
            \ connections will be deferred or refused"
          example: 1000/s
        messages_rate:
          type: string
          description: "Messages publish rate.<br/><br/>This is used to limit the\
            \ inbound message numbers for each client connected to this listener,<br/>once\
            \ the limit is reached, the restricted client will slow down and even\
            \ be hung for a while."
          example: 1000/s
        bytes_rate:
          type: string
          description: "Data publish rate.<br/><br/>This is used to limit the inbound\
            \ bytes rate for each client connected to this listener,<br/>once the\
            \ limit is reached, the restricted client will slow down and even be hung\
            \ for a while."
          example: 100MB/s
    emqx_authz_api_mnesia.username_response_data:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/emqx_authz_api_mnesia.rules_for_username'
        meta:
          $ref: '#/components/schemas/public.meta'
      example:
        data:
        - rules:
          - qos:
            - 0
            - 0
            retain: ""
            topic: test/topic/1
            action: publish
            permission: allow
          - qos:
            - 0
            - 0
            retain: ""
            topic: test/topic/1
            action: publish
            permission: allow
          username: user1
        - rules:
          - qos:
            - 0
            - 0
            retain: ""
            topic: test/topic/1
            action: publish
            permission: allow
          - qos:
            - 0
            - 0
            retain: ""
            topic: test/topic/1
            action: publish
            permission: allow
          username: user1
        meta:
          limit: 50
          count: 0
          page: 1
          hasnext: true
    emqx_lwm2m_schema.lwm2m_translators:
      required:
      - command
      - notify
      - register
      - response
      - update
      type: object
      properties:
        command:
          $ref: '#/components/schemas/emqx_lwm2m_schema.translator'
        response:
          $ref: '#/components/schemas/emqx_lwm2m_schema.translator'
        notify:
          $ref: '#/components/schemas/emqx_lwm2m_schema.translator'
        register:
          $ref: '#/components/schemas/emqx_lwm2m_schema.translator'
        update:
          $ref: '#/components/schemas/emqx_lwm2m_schema.translator'
    authn.http_post:
      required:
      - backend
      - mechanism
      - method
      - url
      type: object
      properties:
        method:
          type: string
          description: HTTP request method.
          enum:
          - post
        headers:
          type: object
          description: List of HTTP Headers.
          example: {}
          default:
            accept: application/json
            cache-control: no-cache
            connection: keep-alive
            content-type: application/json
            keep-alive: "timeout=30, max=1000"
        mechanism:
          type: string
          description: Authentication mechanism.
          enum:
          - password_based
        backend:
          type: string
          description: Backend type.
          enum:
          - http
        url:
          type: string
          description: URL of the HTTP server.
        body:
          type: object
          description: HTTP request body.
          example: {}
        request_timeout:
          type: string
          description: HTTP request timeout.
          example: 32s
          default: 5s
        enable:
          type: boolean
          description: Set to <code>true</code> or <code>false</code> to disable this
            auth provider.
          default: true
        connect_timeout:
          type: string
          description: The timeout when connecting to the HTTP server.
          example: 32s
          default: 15s
        enable_pipelining:
          minimum: 1
          type: integer
          description: "A positive integer. Whether to send HTTP requests continuously,\
            \ when set to 1, it means that after each HTTP request is sent, you need\
            \ to wait for the server to return and then continue to send the next\
            \ request."
          default: 100
        max_retries:
          minimum: 0
          type: integer
          deprecated: true
        pool_size:
          minimum: 1
          type: integer
          description: The pool size.
          default: 8
        request:
          $ref: '#/components/schemas/connector-http.request'
        retry_interval:
          type: string
          example: 12m
          deprecated: true
        ssl:
          $ref: '#/components/schemas/broker.ssl_client_opts'
    bridge_mqtt.post:
      required:
      - name
      - server
      - type
      type: object
      properties:
        type:
          type: string
          description: The bridge type.
          enum:
          - mqtt
        name:
          type: string
          description: "Bridge name, used as a human-readable description of the bridge."
        enable:
          type: boolean
          description: Enable or disable this bridge
          default: true
        resource_opts:
          $ref: '#/components/schemas/bridge_mqtt.creation_opts'
        mode:
          type: string
          description: "The mode of the MQTT Bridge.<br/><br/>- cluster_shareload:\
            \ create an MQTT connection on each node in the emqx cluster.<br/><br/>In\
            \ 'cluster_shareload' mode, the incoming load from the remote broker is\
            \ shared by<br/>using shared subscription.<br/><br/>Note that the 'clientid'\
            \ is suffixed by the node name, this is to avoid<br/>clientid conflicts\
            \ between different nodes. And we can only use shared subscription<br/>topic\
            \ filters for <code>remote.topic</code> of ingress connections."
          deprecated: true
          default: cluster_shareload
          enum:
          - cluster_shareload
        server:
          type: string
          description: The host and port of the remote MQTT broker
        clientid_prefix:
          type: string
          description: Optional prefix to prepend to the clientid used by egress bridges.
        reconnect_interval:
          type: string
          deprecated: true
        proto_ver:
          type: string
          description: The MQTT protocol version
          default: v4
          enum:
          - v3
          - v4
          - v5
        bridge_mode:
          type: boolean
          description: "If enable bridge mode.<br/>NOTE: This setting is only for\
            \ MQTT protocol version older than 5.0, and the remote MQTT<br/>broker\
            \ MUST support this feature.<br/>If bridge_mode is set to true, the bridge\
            \ will indicate to the remote broker that it is a bridge not an ordinary\
            \ client.<br/>This means that loop detection will be more effective and\
            \ that retained messages will be propagated correctly."
          default: false
        username:
          type: string
          description: The username of the MQTT protocol
        password:
          type: string
          description: The password of the MQTT protocol
          format: password
        clean_start:
          type: boolean
          description: Whether to start a clean session when reconnecting a remote
            broker for ingress bridge
          default: true
        keepalive:
          type: string
          description: "MQTT Keepalive. Time interval is a string that contains a\
            \ number followed by time unit:<br/>- `ms` for milliseconds,<br/>- `s`\
            \ for seconds,<br/>- `m` for minutes,<br/>- `h` for hours;<br/><br/>or\
            \ combination of whereof: `1h5m0s`"
          default: 300s
        retry_interval:
          type: string
          description: "Message retry interval. Delay for the MQTT bridge to retry\
            \ sending the QoS1/QoS2 messages in case of ACK not received. Time interval\
            \ is a string that contains a number followed by time unit:<br/>- `ms`\
            \ for milliseconds,<br/>- `s` for seconds,<br/>- `m` for minutes,<br/>-\
            \ `h` for hours;<br/><br/>or combination of whereof: `1h5m0s`"
          default: 15s
        max_inflight:
          minimum: 0
          type: integer
          description: "Max inflight (sent, but un-acked) messages of the MQTT protocol"
          default: 32
        ssl:
          $ref: '#/components/schemas/broker.ssl_client_opts'
        ingress:
          $ref: '#/components/schemas/connector-mqtt.ingress'
        egress:
          $ref: '#/components/schemas/connector-mqtt.egress'
    plugins.plugin:
      required:
      - description
      - name
      - rel_apps
      - rel_vsn
      - running_status
      type: object
      properties:
        name:
          type: string
          description: "Name-Vsn: without .tar.gz"
          example: emqx_plugin_template-5.0-rc.1
        author:
          type: array
          example:
          - EMQX Team
          items:
            type: string
        builder:
          $ref: '#/components/schemas/plugins.builder'
        built_on_otp_release:
          type: string
          example: "24"
        compatibility:
          type: object
          example:
            emqx: "~>5.0"
        git_commit_or_build_date:
          type: string
          description: "Last git commit date by `git log -1 --pretty=format:'%cd'\
            \ --date=format:'%Y-%m-%d`.<br/> If the last commit date is not available,\
            \ the build date will be presented."
          example: 2021-12-25
        functionality:
          type: array
          example:
          - Demo
          items:
            type: string
        git_ref:
          type: string
          example: ddab50fafeed6b1faea70fc9ffd8c700d7e26ec1
        metadata_vsn:
          type: string
          example: 0.1.0
        rel_vsn:
          type: string
          description: Plugins release version
          example: 5.0-rc.1
        rel_apps:
          type: array
          description: Aplications in plugin.
          example:
          - emqx_plugin_template-5.0.0
          - map_sets-1.1.0
          items:
            type: string
        repo:
          type: string
          example: https://github.com/emqx/emqx-plugin-template
        description:
          type: string
          description: Plugin description.
          example: This is an demo plugin description
        running_status:
          type: array
          items:
            $ref: '#/components/schemas/plugins.running_status'
        readme:
          type: string
          description: "only return when `GET /plugins/{name}`."
          example: This is an demo plugin.
      example:
        git_commit_or_build_date: 2021-12-25
        author:
        - EMQX Team
        repo: https://github.com/emqx/emqx-plugin-template
        description: This is an demo plugin description
        functionality:
        - Demo
        readme: This is an demo plugin.
        running_status:
        - node: emqx@127.0.0.1
          status: running
        - node: emqx@127.0.0.1
          status: running
        rel_vsn: 5.0-rc.1
        rel_apps:
        - emqx_plugin_template-5.0.0
        - map_sets-1.1.0
        name: emqx_plugin_template-5.0-rc.1
        builder:
          website: www.emqx.com
          contact: emqx-support@emqx.io
          name: EMQX Team
        built_on_otp_release: "24"
        git_ref: ddab50fafeed6b1faea70fc9ffd8c700d7e26ec1
        metadata_vsn: 0.1.0
        compatibility:
          emqx: "~>5.0"
    emqx_authz_api_mnesia.rules_for_clientid:
      required:
      - clientid
      type: object
      properties:
        rules:
          type: array
          items:
            $ref: '#/components/schemas/emqx_authz_api_mnesia.rule_item'
        clientid:
          type: string
          description: ClientID
          example: client1
      example:
        clientid: client1
        rules:
        - qos:
          - 0
          - 0
          retain: ""
          topic: test/topic/1
          action: publish
          permission: allow
        - qos:
          - 0
          - 0
          retain: ""
          topic: test/topic/1
          action: publish
          permission: allow
    emqx_rule_api_schema.ctx_pub:
      required:
      - event_type
      type: object
      properties:
        event_type:
          type: string
          description: Event Type
          enum:
          - message_publish
        id:
          type: string
          description: Message ID
        clientid:
          type: string
          description: The Client ID
        username:
          type: string
          description: Username
        payload:
          type: string
          description: The Message Payload
        peerhost:
          type: string
          description: The IP Address of the Peer Client
        topic:
          type: string
          description: Message Topic
        publish_received_at:
          type: integer
          description: The Time that this Message is Received
        qos:
          maximum: 2
          minimum: 0
          type: integer
          description: The Message QoS
          example: 0
    emqx_gateway_api_clients.coap_client:
      type: object
      properties:
        node:
          type: string
          description: Name of the node to which the client is connected
        clientid:
          type: string
          description: Client ID
        username:
          type: string
          description: Username of client when connecting
        mountpoint:
          type: string
          description: Topic mountpoint
        proto_name:
          type: string
          description: Client protocol name
        proto_ver:
          type: string
          description: Protocol version used by the client
        ip_address:
          type: string
          description: Client's IP address
        port:
          type: integer
          description: Client's port
        is_bridge:
          type: boolean
          description: Indicates whether the client is connected via bridge
        connected_at:
          description: Client connection time
          oneOf:
          - type: integer
            description: epoch-millisecond
            example: 1640995200000
          - type: string
            format: date-time
            example: 2022-01-01T00:00:00Z
        disconnected_at:
          description: "Client offline time, This field is only valid and returned\
            \ when connected is false"
          oneOf:
          - type: integer
            description: epoch-millisecond
            example: 1640995200000
          - type: string
            format: date-time
            example: 2022-01-01T00:00:00Z
        connected:
          type: boolean
          description: Whether the client is connected
        keepalive:
          type: integer
          description: "Keepalive time, with the unit of second"
        clean_start:
          type: boolean
          description: Indicate whether the client is using a brand new session
        expiry_interval:
          type: integer
          description: "Session expiration interval, with the unit of second"
        created_at:
          description: Session creation time
          oneOf:
          - type: integer
            description: epoch-millisecond
            example: 1640995200000
          - type: string
            format: date-time
            example: 2022-01-01T00:00:00Z
        subscriptions_cnt:
          type: integer
          description: Number of subscriptions established by this client
        subscriptions_max:
          type: integer
          description: Maximum number of subscriptions allowed by this client
        inflight_cnt:
          type: integer
          description: Current length of inflight
        inflight_max:
          type: integer
          description: Maximum length of inflight
        mqueue_len:
          type: integer
          description: Current length of message queue
        mqueue_max:
          type: integer
          description: Maximum length of message queue
        mqueue_dropped:
          type: integer
          description: Number of messages dropped by the message queue due to exceeding
            the length
        awaiting_rel_cnt:
          type: integer
          description: Number of awaiting acknowledge packet
        awaiting_rel_max:
          type: integer
          description: Maximum allowed number of awaiting PUBREC packet
        recv_oct:
          type: integer
          description: Number of bytes received
        recv_cnt:
          type: integer
          description: Number of socket packets received
        recv_pkt:
          type: integer
          description: Number of protocol packets received
        recv_msg:
          type: integer
          description: Number of message packets received
        send_oct:
          type: integer
          description: Number of bytes sent
        send_cnt:
          type: integer
          description: Number of socket packets sent
        send_pkt:
          type: integer
          description: Number of protocol packets sent
        send_msg:
          type: integer
          description: Number of message packets sent
        mailbox_len:
          type: integer
          description: Process mailbox size
        heap_size:
          type: integer
          description: Process heap size with the unit of byte
        reductions:
          type: integer
          description: Erlang reduction
    emqx_mgmt_api_clients.authz_cache:
      type: object
      properties:
        access:
          type: string
          description: Access type
          example: publish
        result:
          type: string
          description: Allow or deny
          example: allow
          enum:
          - allow
          - denny
        topic:
          type: string
          description: Topic name
          example: testtopic/1
        updated_time:
          type: integer
          description: Update time
          example: 1687850712989
      example:
        result: allow
        updated_time: 1687850712989
        access: publish
        topic: testtopic/1
    emqx_rule_api_schema.rule_test:
      required:
      - sql
      type: object
      properties:
        context:
          description: The context of the event for testing
          oneOf:
          - $ref: '#/components/schemas/emqx_rule_api_schema.ctx_delivery_dropped'
          - $ref: '#/components/schemas/emqx_rule_api_schema.ctx_bridge_mqtt'
          - $ref: '#/components/schemas/emqx_rule_api_schema.ctx_check_authz_complete'
          - $ref: '#/components/schemas/emqx_rule_api_schema.ctx_connack'
          - $ref: '#/components/schemas/emqx_rule_api_schema.ctx_disconnected'
          - $ref: '#/components/schemas/emqx_rule_api_schema.ctx_connected'
          - $ref: '#/components/schemas/emqx_rule_api_schema.ctx_dropped'
          - $ref: '#/components/schemas/emqx_rule_api_schema.ctx_acked'
          - $ref: '#/components/schemas/emqx_rule_api_schema.ctx_delivered'
          - $ref: '#/components/schemas/emqx_rule_api_schema.ctx_unsub'
          - $ref: '#/components/schemas/emqx_rule_api_schema.ctx_sub'
          - $ref: '#/components/schemas/emqx_rule_api_schema.ctx_pub'
          default: {}
        sql:
          type: string
          description: The SQL of the rule for testing
    slow_subs.slow_subs:
      type: object
      properties:
        enable:
          type: boolean
          description: Enable this feature
          default: false
        threshold:
          type: string
          description: The latency threshold for statistics
          example: 32s
          default: 500ms
        expire_interval:
          type: string
          description: "The eviction time of the record, which in the statistics record\
            \ table"
          example: 32s
          default: 300s
        top_k_num:
          minimum: 1
          type: integer
          description: The maximum number of records in the slow subscription statistics
            record table
          default: 10
        stats_type:
          type: string
          description: The method to calculate the latency
          default: whole
          enum:
          - whole
          - internal
          - response
      example:
        top_k_num: 1
        enable: false
        expire_interval: 32s
        stats_type: whole
        threshold: 32s
    emqx_rule_api_schema.ctx_dropped:
      required:
      - event_type
      type: object
      properties:
        event_type:
          type: string
          description: Event Type
          enum:
          - message_dropped
        id:
          type: string
          description: Message ID
        reason:
          type: string
          description: The Reason for Dropping
        clientid:
          type: string
          description: The Client ID
        username:
          type: string
          description: Username
        payload:
          type: string
          description: The Message Payload
        peerhost:
          type: string
          description: The IP Address of the Peer Client
        topic:
          type: string
          description: Message Topic
        publish_received_at:
          type: integer
          description: The Time that this Message is Received
        qos:
          maximum: 2
          minimum: 0
          type: integer
          description: The Message QoS
          example: 0
    limiter.limiter:
      type: object
      properties: {}
    broker.ws_opts:
      type: object
      properties:
        mqtt_path:
          type: string
          description: "WebSocket's MQTT protocol path. So the address of EMQX Broker's\
            \ WebSocket is:<br/><code>ws://{ip}:{port}/mqtt</code>"
          default: /mqtt
        mqtt_piggyback:
          type: string
          description: Whether a WebSocket message is allowed to contain multiple
            MQTT packets.
          default: multiple
          enum:
          - single
          - multiple
        compress:
          type: boolean
          description: "If <code>true</code>, compress WebSocket messages using <code>zlib</code>.<br/><br/>The\
            \ configuration items under <code>deflate_opts</code> belong to the compression-related\
            \ parameter configuration."
          default: false
        idle_timeout:
          type: string
          description: Close transport-layer connections from the clients that have
            not sent MQTT CONNECT message within this interval.
          example: 12m
          default: 7200s
        max_frame_size:
          description: The maximum length of a single MQTT packet.
          oneOf:
          - type: integer
          - type: string
            enum:
            - infinity
          default: infinity
        fail_if_no_subprotocol:
          type: boolean
          description: "If <code>true</code>, the server will return an error when<br/>\
            \ the client does not carry the <code>Sec-WebSocket-Protocol</code> field.<br/>\
            \ <br/>Note: WeChat applet needs to disable this verification."
          default: true
        supported_subprotocols:
          type: string
          description: Comma-separated list of supported subprotocols.
          example: "item1,item2"
          default: "mqtt, mqtt-v3, mqtt-v3.1.1, mqtt-v5"
        check_origin_enable:
          type: boolean
          description: "If <code>true</code>, <code>origin</code> HTTP header will\
            \ be<br/> validated against the list of allowed origins configured in\
            \ <code>check_origins</code><br/> parameter."
          default: false
        allow_origin_absence:
          type: boolean
          description: "If <code>false</code> and <code>check_origin_enable</code>\
            \ is<br/> <code>true</code>, the server will reject requests that don't\
            \ have <code>origin</code><br/> HTTP header."
          default: true
        check_origins:
          type: string
          description: List of allowed origins.<br/>See <code>check_origin_enable</code>.
          example: "item1,item2"
          default: "http://localhost:18083, http://127.0.0.1:18083"
        proxy_address_header:
          type: string
          description: HTTP header used to pass information about the client IP address.<br/>Relevant
            when the EMQX cluster is deployed behind a load-balancer.
          default: x-forwarded-for
        proxy_port_header:
          type: string
          description: HTTP header used to pass information about the client port.
            Relevant when the EMQX cluster is deployed behind a load-balancer.
          default: x-forwarded-port
        deflate_opts:
          $ref: '#/components/schemas/broker.deflate_opts'
    dashboard.https:
      required:
      - ssl_options
      type: object
      properties:
        bind:
          type: string
          description: Port without IP(18083) or port with specified IP(127.0.0.1:18083).<br/>Disabled
            when setting bind to `0`.<br/>
          example: 0.0.0.0:18084
          default: "0"
        ssl_options:
          $ref: '#/components/schemas/dashboard.ssl_options'
        num_acceptors:
          type: integer
          description: Socket acceptor pool size for TCP protocols. Default is the
            number of schedulers online
          default: 4
        max_connections:
          type: integer
          description: Maximum number of simultaneous connections.
          default: 512
        backlog:
          type: integer
          description: Defines the maximum length that the queue of pending connections
            can grow to.
          default: 1024
        send_timeout:
          type: string
          description: Send timeout for the socket.
          example: 12m
          default: 10s
        inet6:
          type: boolean
          description: "Enable IPv6 support, default is false, which means IPv4 only."
          default: false
        ipv6_v6only:
          type: boolean
          description: Disable IPv4-to-IPv6 mapping for the listener.<br/>The configuration
            is only valid when the inet6 is true.
          default: false
        proxy_header:
          type: boolean
          description: Enable support for `HAProxy` header. Be aware once enabled
            regular HTTP requests can't be handled anymore.
          default: false
      example:
        proxy_header: false
        max_connections: 2
        bind: 0.0.0.0:18084
        backlog: 7
        ssl_options:
          cacerts: false
          hibernate_after: 12m
          certfile: "${EMQX_ETC_DIR}/certs/cert.pem"
          client_renegotiation: true
          cacertfile: "${EMQX_ETC_DIR}/certs/cacert.pem"
          reuse_sessions: true
          log_level: notice
          handshake_timeout: 12m
          secure_renegotiate: true
          dhfile: dhfile
          password: ""
          depth: 0
          versions:
          - versions
          - versions
          keyfile: "${EMQX_ETC_DIR}/certs/key.pem"
          honor_cipher_order: true
          ciphers:
          - ciphers
          - ciphers
          verify: verify_none
        ipv6_v6only: false
        inet6: false
        send_timeout: 12m
        num_acceptors: 5
    trace.log_file_detail:
      type: object
      properties:
        node:
          type: string
          description: Node name
          example: emqx@127.0.0.1
        size:
          type: integer
          description: file size
        mtime:
          type: integer
          description: The last time this file is modified.
      example:
        node: emqx@127.0.0.1
        size: 0
        mtime: 6
    emqx_authz_api_schema.mongo_single:
      required:
      - collection
      - database
      - server
      - type
      type: object
      properties:
        enable:
          type: boolean
          description: Set to <code>true</code> or <code>false</code> to disable this
            ACL provider.
          default: true
        type:
          type: string
          description: Backend type.
          default: mongodb
          enum:
          - mongodb
        collection:
          type: string
          description: '`MongoDB` collection containing the authorization data.'
        filter:
          type: object
          description: "Conditional expression that defines the filter condition in\
            \ the query.<br/>Filter supports the following placeholders:<br/> - <code>${username}</code>:\
            \ Will be replaced at runtime with <code>Username</code> used by the client\
            \ when connecting;<br/> - <code>${clientid}</code>: Will be replaced at\
            \ runtime with <code>Client ID</code> used by the client when connecting."
          example: {}
          default: {}
        mongo_type:
          type: string
          description: Standalone instance. Must be set to 'single' when MongoDB server
            is running in standalone mode.
          default: single
          enum:
          - single
        server:
          type: string
          description: "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A\
            \ host entry has the following form: `Host[:Port]`.<br/><br/>The MongoDB\
            \ default port 27017 is used if `[:Port]` is not specified."
        w_mode:
          type: string
          description: Write mode.
          default: unsafe
          enum:
          - unsafe
          - safe
        srv_record:
          type: boolean
          description: Use DNS SRV record.
          default: false
        pool_size:
          minimum: 1
          type: integer
          description: Size of the connection pool towards the bridge target service.
          default: 8
        username:
          type: string
          description: The username associated with the bridge in the external database
            used for authentication or identification purposes.
        password:
          type: string
          description: "The password associated with the bridge, used for authentication\
            \ with the external database."
          format: password
        auth_source:
          type: string
          description: Database name associated with the user's credentials.
        database:
          type: string
          description: Database name.
        topology:
          $ref: '#/components/schemas/emqx_mongodb.topology'
        ssl:
          $ref: '#/components/schemas/broker.ssl_client_opts'
    emqx_authn_schema.node_metrics:
      type: object
      properties:
        node:
          type: string
          description: Node name.
          example: emqx@127.0.0.1
        metrics:
          $ref: '#/components/schemas/emqx_authn_schema.metrics'
      example:
        node: emqx@127.0.0.1
        metrics: null
    connector-mqtt.ingress_local:
      type: object
      properties:
        topic:
          type: string
          description: Send messages to which topic of the local broker.<br/><br/>Template
            with variables is allowed.
        qos:
          description: The QoS of the MQTT message to be sent.<br/><br/>Template with
            variables is allowed.
          oneOf:
          - type: string
          - maximum: 2
            minimum: 0
            type: integer
            example: 0
          default: "${qos}"
        retain:
          description: The 'retain' flag of the MQTT message to be sent.<br/><br/>Template
            with variables is allowed.
          oneOf:
          - type: string
          - type: boolean
          default: "${retain}"
        payload:
          type: string
          description: The payload of the MQTT message to be sent.<br/><br/>Template
            with variables is allowed.
    emqx_gateway_api.dtls_listener:
      type: object
      properties:
        id:
          type: string
          description: Listener ID
        type:
          type: string
          description: Listener Type
          enum:
          - dtls
        name:
          type: string
          description: Listener Name
        running:
          type: boolean
          description: Listener Running status
        acceptors:
          type: integer
          description: Size of the acceptor pool.
          default: 16
        udp_options:
          $ref: '#/components/schemas/gateway.udp_opts'
        enable:
          type: boolean
          description: Enable the listener.
          default: true
        bind:
          type: string
          description: The IP address and port that the listener will bind.
          example: 127.0.0.1:80
        max_connections:
          description: Maximum number of concurrent connections.
          oneOf:
          - type: string
            enum:
            - infinity
          - minimum: 1
            type: integer
          default: 1024
        max_conn_rate:
          type: integer
          description: Maximum connections per second.
          default: 1000
        enable_authn:
          type: boolean
          description: Set <code>true</code> (default) to enable client authentication
            on this listener. <br/>When set to <code>false</code> clients will be
            allowed to connect without authentication.
          default: true
        mountpoint:
          type: string
          description: "When publishing or subscribing, prefix all topics with a mountpoint\
            \ string.<br/>The prefixed string will be removed from the topic name\
            \ when the message is delivered to the subscriber.<br/>The mountpoint\
            \ is a way that users can use to implement isolation of message routing\
            \ between different listeners.<br/>For example if a client A subscribes\
            \ to `t` with `listeners.tcp.\\<name>.mountpoint` set to `some_tenant`,<br/>then\
            \ the client actually subscribes to the topic `some_tenant/t`.<br/>Similarly,\
            \ if another client B (connected to the same listener as the client A)\
            \ sends a message to topic `t`,<br/>the message is routed to all the clients\
            \ subscribed `some_tenant/t`,<br/>so client A will receive the message,\
            \ with topic name `t`. Set to `\"\"` to disable the feature.<br/>Variables\
            \ in mountpoint string:<br/><br/>  - <code>${clientid}</code>: clientid<br/><br/>\
            \  - <code>${username}</code>: username"
        access_rules:
          type: array
          description: "The access control rules for this listener.<br/>See: https://github.com/emqtt/esockd#allowdeny"
          items:
            type: string
          default: []
        dtls_options:
          $ref: '#/components/schemas/gateway.dtls_opts'
    bridge_webhook.post:
      required:
      - name
      - type
      - url
      type: object
      properties:
        type:
          type: string
          description: The Bridge Type
          enum:
          - webhook
        name:
          type: string
          description: "Bridge name, used as a human-readable description of the bridge."
        enable:
          type: boolean
          description: Enable or disable this bridge
          default: true
        resource_opts:
          $ref: '#/components/schemas/bridge_webhook.creation_opts'
        connect_timeout:
          type: string
          description: The timeout when connecting to the HTTP server.
          example: 32s
          default: 15s
        retry_interval:
          type: string
          example: 12m
          deprecated: true
        pool_type:
          type: string
          description: "The type of the pool. Can be one of `random`, `hash`."
          default: random
          enum:
          - random
          - hash
        pool_size:
          minimum: 1
          type: integer
          description: The pool size.
          default: 8
        enable_pipelining:
          minimum: 1
          type: integer
          description: "A positive integer. Whether to send HTTP requests continuously,\
            \ when set to 1, it means that after each HTTP request is sent, you need\
            \ to wait for the server to return and then continue to send the next\
            \ request."
          default: 100
        request:
          $ref: '#/components/schemas/connector-http.request'
        ssl:
          $ref: '#/components/schemas/broker.ssl_client_opts'
        url:
          type: string
          description: "The URL of the HTTP Bridge.<br/><br/>Template with variables\
            \ is allowed in the path, but variables cannot be used in the scheme,\
            \ host,<br/>or port part.<br/><br/>For example, <code> http://localhost:9901/${topic}\
            \ </code> is allowed, but<br/><code> http://${host}:9901/message </code>\
            \ or <code> http://localhost:${port}/message </code><br/>is not allowed."
        direction:
          type: string
          description: "Deprecated, The direction of this bridge, MUST be 'egress'"
          deprecated: true
          enum:
          - egress
        local_topic:
          type: string
          description: "The MQTT topic filter to be forwarded to the HTTP server.\
            \ All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic\
            \ will be forwarded.<br/><br/>NOTE: if this bridge is used as the action\
            \ of a rule (EMQX rule engine), and also local_topic is<br/>configured,\
            \ then both the data got from the rule and the MQTT messages that match\
            \ local_topic<br/>will be forwarded."
        method:
          type: string
          description: "The method of the HTTP request. All the available methods\
            \ are: post, put, get, delete.<br/><br/>Template with variables is allowed."
          default: post
          enum:
          - post
          - put
          - get
          - delete
        headers:
          type: object
          description: The headers of the HTTP request.<br/><br/>Template with variables
            is allowed.
          example: {}
          default:
            accept: application/json
            cache-control: no-cache
            connection: keep-alive
            content-type: application/json
            keep-alive: timeout=5
        body:
          type: string
          description: "The body of the HTTP request.<br/><br/>If not provided, the\
            \ body will be a JSON object of all the available fields.<br/><br/>There,\
            \ 'all the available fields' means the context of a MQTT message when<br/>this\
            \ webhook is triggered by receiving a MQTT message (the `local_topic`\
            \ is set),<br/>or the context of the event when this webhook is triggered\
            \ by a rule (i.e. this<br/>webhook is used as an action of a rule).<br/><br/>Template\
            \ with variables is allowed."
        max_retries:
          minimum: 0
          type: integer
          description: HTTP request max retry times if failed.
          default: 2
        request_timeout:
          type: string
          description: HTTP request timeout.
          example: 32s
          deprecated: true
          default: 15s
    dashboard.user:
      type: object
      properties:
        username:
          maxLength: 100
          type: string
          description: Dashboard Username
          example: admin
        description:
          type: string
          description: Dashboard User Description
          example: administrator
      example:
        description: administrator
        username: admin
    emqx_gateway_api_clients.lwm2m_client:
      type: object
      properties:
        endpoint_name:
          type: string
          description: The LwM2M client endpoint name
        lifetime:
          type: integer
          description: LwM2M Life time
        node:
          type: string
          description: Name of the node to which the client is connected
        clientid:
          type: string
          description: Client ID
        username:
          type: string
          description: Username of client when connecting
        mountpoint:
          type: string
          description: Topic mountpoint
        proto_name:
          type: string
          description: Client protocol name
        proto_ver:
          type: string
          description: Protocol version used by the client
        ip_address:
          type: string
          description: Client's IP address
        port:
          type: integer
          description: Client's port
        is_bridge:
          type: boolean
          description: Indicates whether the client is connected via bridge
        connected_at:
          description: Client connection time
          oneOf:
          - type: integer
            description: epoch-millisecond
            example: 1640995200000
          - type: string
            format: date-time
            example: 2022-01-01T00:00:00Z
        disconnected_at:
          description: "Client offline time, This field is only valid and returned\
            \ when connected is false"
          oneOf:
          - type: integer
            description: epoch-millisecond
            example: 1640995200000
          - type: string
            format: date-time
            example: 2022-01-01T00:00:00Z
        connected:
          type: boolean
          description: Whether the client is connected
        keepalive:
          type: integer
          description: "Keepalive time, with the unit of second"
        clean_start:
          type: boolean
          description: Indicate whether the client is using a brand new session
        expiry_interval:
          type: integer
          description: "Session expiration interval, with the unit of second"
        created_at:
          description: Session creation time
          oneOf:
          - type: integer
            description: epoch-millisecond
            example: 1640995200000
          - type: string
            format: date-time
            example: 2022-01-01T00:00:00Z
        subscriptions_cnt:
          type: integer
          description: Number of subscriptions established by this client
        subscriptions_max:
          type: integer
          description: Maximum number of subscriptions allowed by this client
        inflight_cnt:
          type: integer
          description: Current length of inflight
        inflight_max:
          type: integer
          description: Maximum length of inflight
        mqueue_len:
          type: integer
          description: Current length of message queue
        mqueue_max:
          type: integer
          description: Maximum length of message queue
        mqueue_dropped:
          type: integer
          description: Number of messages dropped by the message queue due to exceeding
            the length
        awaiting_rel_cnt:
          type: integer
          description: Number of awaiting acknowledge packet
        awaiting_rel_max:
          type: integer
          description: Maximum allowed number of awaiting PUBREC packet
        recv_oct:
          type: integer
          description: Number of bytes received
        recv_cnt:
          type: integer
          description: Number of socket packets received
        recv_pkt:
          type: integer
          description: Number of protocol packets received
        recv_msg:
          type: integer
          description: Number of message packets received
        send_oct:
          type: integer
          description: Number of bytes sent
        send_cnt:
          type: integer
          description: Number of socket packets sent
        send_pkt:
          type: integer
          description: Number of protocol packets sent
        send_msg:
          type: integer
          description: Number of message packets sent
        mailbox_len:
          type: integer
          description: Process mailbox size
        heap_size:
          type: integer
          description: Process heap size with the unit of byte
        reductions:
          type: integer
          description: Erlang reduction
    bridge_webhook.put:
      required:
      - url
      type: object
      properties:
        enable:
          type: boolean
          description: Enable or disable this bridge
          default: true
        resource_opts:
          $ref: '#/components/schemas/bridge_webhook.creation_opts'
        connect_timeout:
          type: string
          description: The timeout when connecting to the HTTP server.
          example: 32s
          default: 15s
        retry_interval:
          type: string
          example: 12m
          deprecated: true
        pool_type:
          type: string
          description: "The type of the pool. Can be one of `random`, `hash`."
          default: random
          enum:
          - random
          - hash
        pool_size:
          minimum: 1
          type: integer
          description: The pool size.
          default: 8
        enable_pipelining:
          minimum: 1
          type: integer
          description: "A positive integer. Whether to send HTTP requests continuously,\
            \ when set to 1, it means that after each HTTP request is sent, you need\
            \ to wait for the server to return and then continue to send the next\
            \ request."
          default: 100
        request:
          $ref: '#/components/schemas/connector-http.request'
        ssl:
          $ref: '#/components/schemas/broker.ssl_client_opts'
        url:
          type: string
          description: "The URL of the HTTP Bridge.<br/><br/>Template with variables\
            \ is allowed in the path, but variables cannot be used in the scheme,\
            \ host,<br/>or port part.<br/><br/>For example, <code> http://localhost:9901/${topic}\
            \ </code> is allowed, but<br/><code> http://${host}:9901/message </code>\
            \ or <code> http://localhost:${port}/message </code><br/>is not allowed."
        direction:
          type: string
          description: "Deprecated, The direction of this bridge, MUST be 'egress'"
          deprecated: true
          enum:
          - egress
        local_topic:
          type: string
          description: "The MQTT topic filter to be forwarded to the HTTP server.\
            \ All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic\
            \ will be forwarded.<br/><br/>NOTE: if this bridge is used as the action\
            \ of a rule (EMQX rule engine), and also local_topic is<br/>configured,\
            \ then both the data got from the rule and the MQTT messages that match\
            \ local_topic<br/>will be forwarded."
        method:
          type: string
          description: "The method of the HTTP request. All the available methods\
            \ are: post, put, get, delete.<br/><br/>Template with variables is allowed."
          default: post
          enum:
          - post
          - put
          - get
          - delete
        headers:
          type: object
          description: The headers of the HTTP request.<br/><br/>Template with variables
            is allowed.
          example: {}
          default:
            accept: application/json
            cache-control: no-cache
            connection: keep-alive
            content-type: application/json
            keep-alive: timeout=5
        body:
          type: string
          description: "The body of the HTTP request.<br/><br/>If not provided, the\
            \ body will be a JSON object of all the available fields.<br/><br/>There,\
            \ 'all the available fields' means the context of a MQTT message when<br/>this\
            \ webhook is triggered by receiving a MQTT message (the `local_topic`\
            \ is set),<br/>or the context of the event when this webhook is triggered\
            \ by a rule (i.e. this<br/>webhook is used as an action of a rule).<br/><br/>Template\
            \ with variables is allowed."
        max_retries:
          minimum: 0
          type: integer
          description: HTTP request max retry times if failed.
          default: 2
        request_timeout:
          type: string
          description: HTTP request timeout.
          example: 32s
          deprecated: true
          default: 15s
    auto_subscribe.topic:
      required:
      - topic
      type: object
      properties:
        topic:
          type: string
          description: "Topic name, placeholders are supported. For example: client/${clientid}/username/${username}/host/${host}/port/${port}<br/>Required\
            \ field, and cannot be empty string"
          example: "/clientid/${clientid}/username/${username}/host/${host}/port/${port}"
        qos:
          maximum: 2
          minimum: 0
          type: integer
          description: Default value 0. Quality of service.<br/>At most once (0)<br/>At
            least once (1)<br/>Exactly once (2)
          example: 0
          default: 0
        rh:
          maximum: 2
          minimum: 0
          type: integer
          description: "Default value 0. This option is used to specify whether the\
            \ server forwards the retained message to the client when establishing\
            \ a subscription.<br/>Retain Handling is equal to 0, as long as the client\
            \ successfully subscribes, the server will send the retained message.<br/>Retain\
            \ Handling is equal to 1, if the client successfully subscribes and this\
            \ subscription does not exist previously, the server sends the retained\
            \ message. After all, sometimes the client re-initiate the subscription\
            \ just to change the QoS, but it does not mean that it wants to receive\
            \ the reserved messages again.<br/>Retain Handling is equal to 2, even\
            \ if the client successfully subscribes, the server does not send the\
            \ retained message."
          default: 0
        rap:
          maximum: 1
          minimum: 0
          type: integer
          description: "Default value 0. This option is used to specify whether the\
            \ server retains the RETAIN mark when forwarding messages to the client,\
            \ and this option does not affect the RETAIN mark in the retained message.\
            \ Therefore, when the option Retain As Publish is set to 0, the client\
            \ will directly distinguish whether this is a normal forwarded message\
            \ or a retained message according to the RETAIN mark in the message, instead\
            \ of judging whether this message is the first received after subscribing(the\
            \ forwarded message may be sent before the retained message, which depends\
            \ on the specific implementation of different brokers)."
          default: 0
        nl:
          maximum: 1
          minimum: 0
          type: integer
          description: "Default value 0.<br/>MQTT v3.1.1： if you subscribe to the\
            \ topic published by yourself, you will receive all messages that you\
            \ published.<br/>MQTT v5: if you set this option as 1 when subscribing,\
            \ the server will not forward the message you published to you."
          default: 0
      example:
        rap: 0
        qos: 0
        rh: 0
        topic: "/clientid/${clientid}/username/${username}/host/${host}/port/${port}"
        nl: 0
    authn.redis_cluster:
      required:
      - backend
      - cmd
      - mechanism
      - servers
      type: object
      properties:
        mechanism:
          type: string
          description: Authentication mechanism.
          enum:
          - password_based
        backend:
          type: string
          description: Backend type.
          enum:
          - redis
        cmd:
          type: string
          description: "The Redis Command used to query data for authentication such\
            \ as password hash, currently only supports <code>HGET</code> and <code>HMGET</code>."
        password_hash_algorithm:
          description: Options for password hash verification.
          oneOf:
          - $ref: '#/components/schemas/authn-hash.simple'
          - $ref: '#/components/schemas/authn-hash.pbkdf2'
          - $ref: '#/components/schemas/authn-hash.bcrypt'
          default:
            name: sha256
            salt_position: prefix
        enable:
          type: boolean
          description: Set to <code>true</code> or <code>false</code> to disable this
            auth provider.
          default: true
        servers:
          type: string
          description: "A Node list for Cluster to connect to. The nodes should be\
            \ separated with commas, such as: `Node[,Node].`<br/>For each Node should\
            \ be: The IPv4 or IPv6 address or the hostname to connect to.<br/>A host\
            \ entry has the following form: `Host[:Port]`.<br/>The Redis default port\
            \ 6379 is used if `[:Port]` is not specified."
        redis_type:
          type: string
          description: Cluster mode. Must be set to 'cluster' when Redis server is
            running in clustered mode.
          default: cluster
          enum:
          - cluster
        pool_size:
          minimum: 1
          type: integer
          description: Size of the connection pool towards the bridge target service.
          default: 8
        password:
          type: string
          description: "The password associated with the bridge, used for authentication\
            \ with the external database."
          format: password
        auto_reconnect:
          type: boolean
          description: Deprecated. Enable automatic reconnect to the database.
          deprecated: true
          default: true
        ssl:
          $ref: '#/components/schemas/broker.ssl_client_opts'
    broker.listener_ssl_opts:
      type: object
      properties:
        cacertfile:
          type: string
          description: "Trusted PEM format CA certificates bundle file.<br/><br/>The\
            \ certificates in this file are used to verify the TLS peer's certificates.<br/>Append\
            \ new certificates to the file if new CAs are to be trusted.<br/>There\
            \ is no need to restart EMQX to have the updated file loaded, because<br/>the\
            \ system regularly checks if file has been updated (and reload).<br/><br/>NOTE:\
            \ invalidating (deleting) a certificate from the file will not affect<br/>already\
            \ established connections."
          default: "${EMQX_ETC_DIR}/certs/cacert.pem"
        cacerts:
          type: boolean
          description: "When enabled, uses the system trusted CA certificates for\
            \ establishing to TLS connections."
          default: false
        certfile:
          type: string
          description: "PEM format certificates chain file.<br/><br/>The certificates\
            \ in this file should be in reversed order of the certificate<br/>issue\
            \ chain. That is, the host's certificate should be placed in the beginning<br/>of\
            \ the file, followed by the immediate issuer certificate and so on.<br/>Although\
            \ the root CA certificate is optional, it should be placed at the end\
            \ of<br/>the file if it is to be added."
          default: "${EMQX_ETC_DIR}/certs/cert.pem"
        keyfile:
          type: string
          description: PEM format private key file.
          default: "${EMQX_ETC_DIR}/certs/key.pem"
        verify:
          type: string
          description: Enable or disable peer verification.
          default: verify_none
          enum:
          - verify_peer
          - verify_none
        reuse_sessions:
          type: boolean
          description: Enable TLS session reuse.</br><br/>Has no effect when TLS version
            is configured (or negotiated) to 1.3
          default: true
        depth:
          minimum: 0
          type: integer
          description: "Maximum number of non-self-issued intermediate certificates\
            \ that can follow the peer certificate in a valid certification path.<br/>So,\
            \ if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/><br/>if\
            \ 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/><br/>if 2 the\
            \ path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA."
          default: 10
        password:
          type: string
          description: String containing the user's password. Only used if the private
            key file is password-protected.
          format: password
          example: ""
        versions:
          type: array
          description: "All TLS/DTLS versions to be supported.<br/><br/>NOTE: PSK\
            \ ciphers are suppressed by 'tlsv1.3' version config.<br/><br/>In case\
            \ PSK cipher suites are intended, make sure to configure<br/><code>['tlsv1.2',\
            \ 'tlsv1.1']</code> here."
          items:
            type: string
          default:
          - tlsv1.3
          - tlsv1.2
        ciphers:
          type: array
          description: "This config holds TLS cipher suite names separated by comma,<br/>or\
            \ as an array of strings. e.g.<br/><code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"\
            </code> or<br/><code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"\
            ]</code>.<br/><br/><br/>Ciphers (and their ordering) define the way in\
            \ which the<br/>client and server encrypts information over the network\
            \ connection.<br/>Selecting a good cipher suite is critical for the<br/>application's\
            \ data security, confidentiality and performance.<br/><br/>The names should\
            \ be in OpenSSL string format (not RFC format).<br/>All default values\
            \ and examples provided by EMQX config<br/>documentation are all in OpenSSL\
            \ format.<br/><br/><br/>NOTE: Certain cipher suites are only compatible\
            \ with<br/>specific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or\
            \ 'tlsv1.3')<br/>incompatible cipher suites will be silently dropped.<br/>For\
            \ instance, if only 'tlsv1.3' is given in the <code>versions</code>,<br/>configuring\
            \ cipher suites for other versions will have no effect.<br/><br/><br/><br/>NOTE:\
            \ PSK ciphers are suppressed by 'tlsv1.3' version config<br/><br/>If PSK\
            \ cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/><br/>PSK\
            \ cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,<br/>RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,<br/>RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,<br/>RSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"\
            </code>"
          items:
            type: string
          default: []
        secure_renegotiate:
          type: boolean
          description: "SSL parameter renegotiation is a feature that allows a client\
            \ and a server<br/>to renegotiate the parameters of the SSL connection\
            \ on the fly.<br/>RFC 5746 defines a more secure way of doing this. By\
            \ enabling secure renegotiation,<br/>you drop support for the insecure\
            \ renegotiation, prone to MitM attacks.</br><br/>Has no effect when TLS\
            \ version is configured (or negotiated) to 1.3"
          default: true
        log_level:
          type: string
          description: Log level for SSL communication. Default is 'notice'. Set to
            'debug' to inspect TLS handshake messages.
          default: notice
          enum:
          - emergency
          - alert
          - critical
          - error
          - warning
          - notice
          - info
          - debug
          - none
          - all
        hibernate_after:
          type: string
          description: Hibernate the SSL process after idling for amount of time reducing
            its memory footprint.
          example: 12m
          default: 5s
        dhfile:
          type: string
          description: "Path to a file containing PEM-encoded Diffie-Hellman parameters<br/>to\
            \ be used by the server if a cipher suite using Diffie-Hellman<br/>key\
            \ exchange is negotiated. If not specified, default parameters<br/>are\
            \ used.<br/><br/>NOTE: The <code>dhfile</code> option is not supported\
            \ by TLS 1.3."
        fail_if_no_peer_cert:
          type: boolean
          description: "Used together with {verify, verify_peer} by an TLS/DTLS server.<br/>If\
            \ set to true, the server fails if the client does not have a<br/>certificate\
            \ to send, that is, sends an empty certificate.<br/>If set to false, it\
            \ fails only if the client sends an invalid<br/>certificate (an empty\
            \ certificate is considered valid)."
          default: false
        honor_cipher_order:
          type: boolean
          description: "An important security setting, it forces the cipher to be\
            \ set based<br/> on the server-specified order instead of the client-specified\
            \ order,<br/> hence enforcing the (usually more properly configured) security<br/>\
            \ ordering of the server administrator."
          default: true
        client_renegotiation:
          type: boolean
          description: "In protocols that support client-initiated renegotiation,<br/>the\
            \ cost of resources of such an operation is higher for the server than\
            \ the client.<br/>This can act as a vector for denial of service attacks.<br/>The\
            \ SSL application already takes measures to counter-act such attempts,<br/>but\
            \ client-initiated renegotiation can be strictly disabled by setting this\
            \ option to false.<br/>The default value is true. Note that disabling\
            \ renegotiation can result in<br/>long-lived connections becoming unusable\
            \ due to limits on<br/>the number of messages the underlying cipher suite\
            \ can encipher.</br><br/>Has no effect when TLS version is configured\
            \ (or negotiated) to 1.3"
          default: true
        handshake_timeout:
          type: string
          description: Maximum time duration allowed for the handshake to complete
          example: 12m
          default: 15s
        gc_after_handshake:
          type: boolean
          description: "Memory usage tuning. If enabled, will immediately perform\
            \ a garbage collection after the TLS/SSL handshake."
          default: false
        ocsp:
          $ref: '#/components/schemas/broker.ocsp'
        enable_crl_check:
          type: boolean
          description: Whether to enable CRL verification for this listener.
          default: false
    emqx_gateway_api.exproto:
      required:
      - handler
      - server
      type: object
      properties:
        name:
          type: string
          description: Gateway Name
          enum:
          - exproto
        server:
          $ref: '#/components/schemas/emqx_exproto_schema.exproto_grpc_server'
        handler:
          $ref: '#/components/schemas/emqx_exproto_schema.exproto_grpc_handler'
        mountpoint:
          type: string
          description: "When publishing or subscribing, prefix all topics with a mountpoint\
            \ string.<br/>The prefixed string will be removed from the topic name\
            \ when the message is delivered to the subscriber.<br/>The mountpoint\
            \ is a way that users can use to implement isolation of message routing\
            \ between different listeners.<br/>For example if a client A subscribes\
            \ to `t` with `listeners.tcp.\\<name>.mountpoint` set to `some_tenant`,<br/>then\
            \ the client actually subscribes to the topic `some_tenant/t`.<br/>Similarly,\
            \ if another client B (connected to the same listener as the client A)\
            \ sends a message to topic `t`,<br/>the message is routed to all the clients\
            \ subscribed `some_tenant/t`,<br/>so client A will receive the message,\
            \ with topic name `t`. Set to `\"\"` to disable the feature.<br/>Variables\
            \ in mountpoint string:<br/><br/>  - <code>${clientid}</code>: clientid<br/><br/>\
            \  - <code>${username}</code>: username"
          default: ""
        enable:
          type: boolean
          description: Whether to enable this gateway
          default: true
        enable_stats:
          type: boolean
          description: Whether to enable client process statistic
          default: true
        idle_timeout:
          type: string
          description: The idle time of the client connection process. It has two
            purposes:<br/>  1. A newly created client process that does not receive
            any client requests after that time will be closed directly.<br/>  2.
            A running client process that does not receive any client requests after
            this time will go into hibernation to save resources.
          example: 12m
          default: 30s
        clientinfo_override:
          $ref: '#/components/schemas/gateway.clientinfo_override'
        listeners:
          type: array
          items:
            oneOf:
            - $ref: '#/components/schemas/emqx_gateway_api.dtls_listener'
            - $ref: '#/components/schemas/emqx_gateway_api.udp_listener'
            - $ref: '#/components/schemas/emqx_gateway_api.ssl_listener'
            - $ref: '#/components/schemas/emqx_gateway_api.tcp_listener'
    rule_engine.user_provided_function:
      required:
      - function
      type: object
      properties:
        function:
          type: string
          description: "The user provided function. Should be in the format: '{module}:{function}'.<br/>Where\
            \ {module} is the Erlang callback module and {function} is the Erlang\
            \ function.<br/><br/>To write your own function, checkout the function\
            \ <code>console</code> and<br/><code>republish</code> in the source file:<br/><code>apps/emqx_rule_engine/src/emqx_rule_actions.erl</code>\
            \ as an example."
          example: module:function
        args:
          type: object
          description: "The args will be passed as the 3rd argument to module:function/3,<br/>checkout\
            \ the function <code>console</code> and <code>republish</code> in the\
            \ source file:<br/><code>apps/emqx_rule_engine/src/emqx_rule_actions.erl</code>\
            \ as an example."
          example: {}
          default: {}
    emqx_authn_schema.node_resource_metrics:
      type: object
      properties:
        node:
          type: string
          description: Node name.
          example: emqx@127.0.0.1
        metrics:
          $ref: '#/components/schemas/emqx_authn_schema.resource_metrics'
      example:
        node: emqx@127.0.0.1
        metrics: null
    emqx_gateway_api.udp_listener:
      type: object
      properties:
        id:
          type: string
          description: Listener ID
        type:
          type: string
          description: Listener Type
          enum:
          - udp
        name:
          type: string
          description: Listener Name
        running:
          type: boolean
          description: Listener Running status
        udp_options:
          $ref: '#/components/schemas/gateway.udp_opts'
        enable:
          type: boolean
          description: Enable the listener.
          default: true
        bind:
          type: string
          description: The IP address and port that the listener will bind.
          example: 127.0.0.1:80
        max_connections:
          description: Maximum number of concurrent connections.
          oneOf:
          - type: string
            enum:
            - infinity
          - minimum: 1
            type: integer
          default: 1024
        max_conn_rate:
          type: integer
          description: Maximum connections per second.
          default: 1000
        enable_authn:
          type: boolean
          description: Set <code>true</code> (default) to enable client authentication
            on this listener. <br/>When set to <code>false</code> clients will be
            allowed to connect without authentication.
          default: true
        mountpoint:
          type: string
          description: "When publishing or subscribing, prefix all topics with a mountpoint\
            \ string.<br/>The prefixed string will be removed from the topic name\
            \ when the message is delivered to the subscriber.<br/>The mountpoint\
            \ is a way that users can use to implement isolation of message routing\
            \ between different listeners.<br/>For example if a client A subscribes\
            \ to `t` with `listeners.tcp.\\<name>.mountpoint` set to `some_tenant`,<br/>then\
            \ the client actually subscribes to the topic `some_tenant/t`.<br/>Similarly,\
            \ if another client B (connected to the same listener as the client A)\
            \ sends a message to topic `t`,<br/>the message is routed to all the clients\
            \ subscribed `some_tenant/t`,<br/>so client A will receive the message,\
            \ with topic name `t`. Set to `\"\"` to disable the feature.<br/>Variables\
            \ in mountpoint string:<br/><br/>  - <code>${clientid}</code>: clientid<br/><br/>\
            \  - <code>${username}</code>: username"
        access_rules:
          type: array
          description: "The access control rules for this listener.<br/>See: https://github.com/emqtt/esockd#allowdeny"
          items:
            type: string
          default: []
    listeners.wss_required_bind-with_name:
      required:
      - bind
      - name
      - type
      type: object
      properties:
        type:
          type: string
          description: Listener type
          enum:
          - wss
        running:
          type: boolean
          description: Listener status
        name:
          type: string
          description: Listener name
        current_connections:
          minimum: 0
          type: integer
          description: Current connections
        enable:
          type: boolean
          description: Enable listener.
          default: true
        bind:
          type: string
          description: IP address and port for the listening socket.
          example: 127.0.0.1:80
          default: "8084"
        acceptors:
          minimum: 1
          type: integer
          description: The size of the listener's receiving pool.
          default: 16
        max_connections:
          description: The maximum number of concurrent connections allowed by the
            listener.
          oneOf:
          - minimum: 1
            type: integer
          - type: string
            enum:
            - infinity
          default: infinity
        mountpoint:
          type: string
          description: "When publishing or subscribing, prefix all topics with a mountpoint\
            \ string.<br/>The prefixed string will be removed from the topic name\
            \ when the message<br/>is delivered to the subscriber. The mountpoint\
            \ is a way that users can use<br/>to implement isolation of message routing\
            \ between different listeners.<br/>For example if a client A subscribes\
            \ to `t` with `listeners.tcp.\\<name>.mountpoint`<br/>set to `some_tenant`,\
            \ then the client actually subscribes to the topic<br/>`some_tenant/t`.\
            \ Similarly, if another client B (connected to the same listener<br/>as\
            \ the client A) sends a message to topic `t`, the message is routed<br/>to\
            \ all the clients subscribed `some_tenant/t`, so client A will receive\
            \ the<br/>message, with topic name `t`.<br/><br/>Set to `\"\"` to disable\
            \ the feature.<br/><br/><br/>Variables in mountpoint string:<br/>  - <code>${clientid}</code>:\
            \ clientid<br/>  - <code>${username}</code>: username"
          default: ""
        enable_authn:
          type: string
          description: "Set <code>true</code> (default) to enable client authentication\
            \ on this listener, the authentication<br/>process goes through the configured\
            \ authentication chain.<br/>When set to <code>false</code> to allow any\
            \ clients with or without authentication information such as username\
            \ or password to log in.<br/>When set to <code>quick_deny_anonymous</code>,\
            \ it behaves like when set to <code>true</code>, but clients will be<br/>denied\
            \ immediately without going through any authenticators if <code>username</code>\
            \ is not provided. This is useful to fence off<br/>anonymous clients early."
          default: "true"
          enum:
          - "true"
          - "false"
          - quick_deny_anonymous
        max_conn_rate:
          type: string
          description: "Maximum connection rate.<br/><br/>This is used to limit the\
            \ connection rate for this listener,<br/>once the limit is reached, new\
            \ connections will be deferred or refused"
          example: 1000/s
        messages_rate:
          type: string
          description: "Messages publish rate.<br/><br/>This is used to limit the\
            \ inbound message numbers for each client connected to this listener,<br/>once\
            \ the limit is reached, the restricted client will slow down and even\
            \ be hung for a while."
          example: 1000/s
        bytes_rate:
          type: string
          description: "Data publish rate.<br/><br/>This is used to limit the inbound\
            \ bytes rate for each client connected to this listener,<br/>once the\
            \ limit is reached, the restricted client will slow down and even be hung\
            \ for a while."
          example: 100MB/s
        access_rules:
          type: array
          description: "The access control rules for this listener.<br/>See: https://github.com/emqtt/esockd#allowdeny"
          items:
            type: string
          default:
          - allow all
        proxy_protocol:
          type: boolean
          description: "Enable the Proxy Protocol V1/2 if the EMQX cluster is deployed\
            \ behind HAProxy or Nginx.<br/><br/>See: https://www.haproxy.com/blog/haproxy/proxy-protocol/"
          default: false
        proxy_protocol_timeout:
          type: string
          description: Timeout for proxy protocol. EMQX will close the TCP connection
            if proxy protocol packet is not received within the timeout.
          example: 12m
          default: 3s
        tcp_options:
          $ref: '#/components/schemas/broker.tcp_opts'
        ssl_options:
          $ref: '#/components/schemas/broker.listener_wss_opts'
        websocket:
          $ref: '#/components/schemas/broker.ws_opts'
    emqx_gateway_api_listeners.tcp_listener:
      type: object
      properties:
        id:
          type: string
          description: Listener ID
        type:
          type: string
          description: Listener Type
          enum:
          - tcp
        name:
          type: string
          description: Listener Name
        running:
          type: boolean
          description: Listener Running status
        acceptors:
          type: integer
          description: Size of the acceptor pool.
          default: 16
        tcp_options:
          $ref: '#/components/schemas/broker.tcp_opts'
        proxy_protocol:
          type: boolean
          description: "Enable the Proxy Protocol V1/2 if the EMQX cluster is deployed\
            \ behind HAProxy or Nginx.<br/>See: https://www.haproxy.com/blog/haproxy/proxy-protocol/"
          default: false
        proxy_protocol_timeout:
          type: string
          description: Timeout for proxy protocol.<br/>EMQX will close the TCP connection
            if proxy protocol packet is not received within the timeout.
          example: 12m
          default: 15s
        enable:
          type: boolean
          description: Enable the listener.
          default: true
        bind:
          type: string
          description: The IP address and port that the listener will bind.
          example: 127.0.0.1:80
        max_connections:
          description: Maximum number of concurrent connections.
          oneOf:
          - type: string
            enum:
            - infinity
          - minimum: 1
            type: integer
          default: 1024
        max_conn_rate:
          type: integer
          description: Maximum connections per second.
          default: 1000
        enable_authn:
          type: boolean
          description: Set <code>true</code> (default) to enable client authentication
            on this listener. <br/>When set to <code>false</code> clients will be
            allowed to connect without authentication.
          default: true
        mountpoint:
          type: string
          description: "When publishing or subscribing, prefix all topics with a mountpoint\
            \ string.<br/>The prefixed string will be removed from the topic name\
            \ when the message is delivered to the subscriber.<br/>The mountpoint\
            \ is a way that users can use to implement isolation of message routing\
            \ between different listeners.<br/>For example if a client A subscribes\
            \ to `t` with `listeners.tcp.\\<name>.mountpoint` set to `some_tenant`,<br/>then\
            \ the client actually subscribes to the topic `some_tenant/t`.<br/>Similarly,\
            \ if another client B (connected to the same listener as the client A)\
            \ sends a message to topic `t`,<br/>the message is routed to all the clients\
            \ subscribed `some_tenant/t`,<br/>so client A will receive the message,\
            \ with topic name `t`. Set to `\"\"` to disable the feature.<br/>Variables\
            \ in mountpoint string:<br/><br/>  - <code>${clientid}</code>: clientid<br/><br/>\
            \  - <code>${username}</code>: username"
        access_rules:
          type: array
          description: "The access control rules for this listener.<br/>See: https://github.com/emqtt/esockd#allowdeny"
          items:
            type: string
          default: []
        status:
          $ref: '#/components/schemas/listeners.status'
        node_status:
          type: array
          description: listener status of each node in the cluster
          items:
            $ref: '#/components/schemas/listeners.node_status'
    emqx_delayed_api.message:
      type: object
      properties:
        msgid:
          type: integer
          description: Delayed Message ID
        node:
          type: string
          description: The node where message from
        publish_at:
          type: string
          description: "Clinet publish message time, in RFC 3339 format"
        delayed_interval:
          minimum: 1
          type: integer
          description: Delayed interval(second)
        delayed_remaining:
          minimum: 0
          type: integer
          description: Delayed remaining(second)
        expected_at:
          type: string
          description: "Expect publish time, in RFC 3339 format"
        topic:
          type: string
          description: Topic
          example: /sys/#
        qos:
          maximum: 2
          minimum: 0
          type: integer
          description: QoS
          example: 0
        from_clientid:
          type: string
          description: From ClientID
        from_username:
          type: string
          description: From Username
        payload:
          type: string
          description: "Payload, base64 encoded. Payload will be set to 'PAYLOAD_TO_LARGE'\
            \ if its length is larger than 2048 bytes"
      example:
        node: node
        expected_at: expected_at
        from_clientid: from_clientid
        qos: 0
        payload: payload
        from_username: from_username
        msgid: 0
        topic: /sys/#
        delayed_interval: 1
        delayed_remaining: 0
        publish_at: publish_at
    authn-hash.pbkdf2:
      required:
      - iterations
      - mac_fun
      - name
      type: object
      properties:
        name:
          type: string
          description: PBKDF2 password hashing.
          enum:
          - pbkdf2
        mac_fun:
          type: string
          description: Specifies mac_fun for PBKDF2 hashing algorithm.
          enum:
          - md4
          - md5
          - ripemd160
          - sha
          - sha224
          - sha256
          - sha384
          - sha512
        iterations:
          type: integer
          description: Iteration count for PBKDF2 hashing algorithm.
        dk_length:
          type: integer
          description: "Derived length for PBKDF2 hashing algorithm. If not specified,\
            \ calculated automatically based on `mac_fun`."
    emqx_mgmt_api_publish.message_properties:
      type: object
      properties:
        payload_format_indicator:
          maximum: 1
          minimum: 0
          type: integer
          description: "0 (0x00) Byte Indicates that the Payload is unspecified bytes,\
            \ which is equivalent to not sending a Payload Format Indicator.<br/>1\
            \ (0x01) Byte Indicates that the Payload is UTF-8 Encoded Character Data.\
            \ The UTF-8 data in the Payload MUST be well-formed UTF-8 as defined by\
            \ the Unicode specification and restated in RFC 3629."
          example: 0
        message_expiry_interval:
          type: integer
          description: "Identifier of the Message Expiry Interval. If the Message\
            \ Expiry Interval has passed and the Server has not managed to start onward\
            \ delivery to a matching subscriber, then it MUST delete the copy of the\
            \ message for that subscriber."
        response_topic:
          type: string
          description: "Identifier of the Response Topic.The Response Topic MUST be\
            \ a UTF-8 Encoded, It MUST NOT contain wildcard characters."
          example: some_other_topic
        correlation_data:
          type: string
          description: Identifier of the Correlation Data. The Server MUST send the
            Correlation Data unaltered to all subscribers receiving the Application
            Message.
        user_properties:
          type: object
          description: "The User-Property key-value pairs. Note: in case there are\
            \ duplicated keys, only the last one will be used."
          example:
            foo: bar
        content_type:
          type: string
          description: The Content Type MUST be a UTF-8 Encoded String.
          example: text/plain
    emqx_gateway_api.gateway_overview:
      type: object
      properties:
        name:
          type: string
          description: Gateway Name
        status:
          type: string
          description: Gateway status
          enum:
          - running
          - stopped
          - unloaded
        created_at:
          type: string
          description: The Gateway created datetime
        started_at:
          type: string
          description: The Gateway started datetime
        stopped_at:
          type: string
          description: The Gateway stopped datetime
        max_connections:
          minimum: 1
          type: integer
          description: The Gateway allowed maximum connections/clients
        current_connections:
          minimum: 0
          type: integer
          description: The Gateway current connected connections/clients
        listeners:
          type: array
          description: The Gateway listeners overview
          items:
            $ref: '#/components/schemas/emqx_gateway_api.gateway_listener_overview'
        node_status:
          type: array
          description: The status of the gateway on each node in the cluster
          items:
            $ref: '#/components/schemas/emqx_gateway_api.gateway_node_status'
      example:
        current_connections: 0
        max_connections: 1
        node_status:
        - node: emqx@172.20.0.2
          current_connections: 0
          max_connections: 1
          status: running
        - node: emqx@172.20.0.2
          current_connections: 0
          max_connections: 1
          status: running
        listeners:
        - running: true
          id: id
          type: tcp
        - running: true
          id: id
          type: tcp
        name: name
        created_at: created_at
        started_at: started_at
        stopped_at: stopped_at
        status: running
    dashboard.dashboard:
      type: object
      properties:
        listeners:
          $ref: '#/components/schemas/dashboard.listeners'
        token_expired_time:
          type: string
          description: JWT token expiration time. Default is 60 minutes
          example: 12m
          default: 60m
        cors:
          type: boolean
          description: "Support Cross-Origin Resource Sharing (CORS).<br/>Allows a\
            \ server to indicate any origins (domain, scheme, or port) other than<br/>its\
            \ own from which a browser should permit loading resources."
          default: false
      example:
        cors: false
        listeners:
          http:
            proxy_header: false
            max_connections: 6
            bind: 0.0.0.0:18083
            backlog: 1
            ipv6_v6only: false
            inet6: false
            send_timeout: 12m
            num_acceptors: 0
          https:
            proxy_header: false
            max_connections: 2
            bind: 0.0.0.0:18084
            backlog: 7
            ssl_options:
              cacerts: false
              hibernate_after: 12m
              certfile: "${EMQX_ETC_DIR}/certs/cert.pem"
              client_renegotiation: true
              cacertfile: "${EMQX_ETC_DIR}/certs/cacert.pem"
              reuse_sessions: true
              log_level: notice
              handshake_timeout: 12m
              secure_renegotiate: true
              dhfile: dhfile
              password: ""
              depth: 0
              versions:
              - versions
              - versions
              keyfile: "${EMQX_ETC_DIR}/certs/key.pem"
              honor_cipher_order: true
              ciphers:
              - ciphers
              - ciphers
              verify: verify_none
            ipv6_v6only: false
            inet6: false
            send_timeout: 12m
            num_acceptors: 5
        token_expired_time: 12m
    broker.sys_topics:
      type: object
      properties:
        sys_msg_interval:
          description: Time interval for publishing following system messages:<br/>  -
            `$SYS/brokers`<br/>  - `$SYS/brokers/<node>/version`<br/>  - `$SYS/brokers/<node>/sysdescr`<br/>  -
            `$SYS/brokers/<node>/stats/<name>`<br/>  - `$SYS/brokers/<node>/metrics/<name>`
          oneOf:
          - type: string
            example: 12m
          - type: string
            enum:
            - disabled
          default: 1m
        sys_heartbeat_interval:
          description: Time interval for publishing following heartbeat messages:<br/>  -
            `$SYS/brokers/<node>/uptime`<br/>  - `$SYS/brokers/<node>/datetime`
          oneOf:
          - type: string
            example: 12m
          - type: string
            enum:
            - disabled
          default: 30s
        sys_event_messages:
          $ref: '#/components/schemas/broker.event_names'
      example:
        sys_event_messages:
          client_subscribed: false
          client_connected: true
          client_disconnected: true
          client_unsubscribed: false
        sys_msg_interval: ""
        sys_heartbeat_interval: ""
    authz.node_resource_metrics:
      type: object
      properties:
        node:
          type: string
          description: Node name.
          example: emqx@127.0.0.1
        metrics:
          $ref: '#/components/schemas/authz.resource_metrics'
      example:
        node: emqx@127.0.0.1
        metrics: null
    emqx_gateway_api.gateway_node_status:
      type: object
      properties:
        node:
          type: string
          description: Node Name
          enum:
          - emqx@172.20.0.2
        status:
          type: string
          description: Gateway status
          enum:
          - running
          - stopped
          - unloaded
        max_connections:
          minimum: 1
          type: integer
          description: The Gateway allowed maximum connections/clients
        current_connections:
          minimum: 0
          type: integer
          description: The Gateway current connected connections/clients
      example:
        node: emqx@172.20.0.2
        current_connections: 0
        max_connections: 1
        status: running
    emqx_gateway_api.lwm2m:
      required:
      - translators
      - xml_dir
      type: object
      properties:
        name:
          type: string
          description: Gateway Name
          enum:
          - lwm2m
        xml_dir:
          type: string
          description: The Directory for LwM2M Resource definition.
          example: /etc/emqx/lwm2m_xml
        lifetime_min:
          type: string
          description: Minimum value of lifetime allowed to be set by the LwM2M client.
          example: 12m
          default: 15s
        lifetime_max:
          type: string
          description: Maximum value of lifetime allowed to be set by the LwM2M client.
          example: 12m
          default: 86400s
        qmode_time_window:
          type: string
          description: "The value of the time window during which the network link\
            \ is considered valid by the LwM2M Gateway in QMode mode.<br/>For example,\
            \ after receiving an update message from a client, any messages within\
            \ this time window are sent directly to the LwM2M client, and all messages\
            \ beyond this time window are temporarily stored in memory."
          example: 1h
          default: 22s
        auto_observe:
          type: boolean
          description: Automatically observe the object list of REGISTER packet.
          default: false
        update_msg_publish_condition:
          type: string
          description: "Policy for publishing UPDATE event message.<br/><br/>  - always:\
            \ send update events as long as the UPDATE request is received.<br/><br/>\
            \  - contains_object_list: send update events only if the UPDATE request\
            \ carries any Object List"
          default: contains_object_list
          enum:
          - always
          - contains_object_list
        translators:
          $ref: '#/components/schemas/emqx_lwm2m_schema.lwm2m_translators'
        mountpoint:
          type: string
          description: "When publishing or subscribing, prefix all topics with a mountpoint\
            \ string.<br/>The prefixed string will be removed from the topic name\
            \ when the message is delivered to the subscriber.<br/>The mountpoint\
            \ is a way that users can use to implement isolation of message routing\
            \ between different listeners.<br/>For example if a client A subscribes\
            \ to `t` with `listeners.tcp.\\<name>.mountpoint` set to `some_tenant`,<br/>then\
            \ the client actually subscribes to the topic `some_tenant/t`.<br/>Similarly,\
            \ if another client B (connected to the same listener as the client A)\
            \ sends a message to topic `t`,<br/>the message is routed to all the clients\
            \ subscribed `some_tenant/t`,<br/>so client A will receive the message,\
            \ with topic name `t`. Set to `\"\"` to disable the feature.<br/>Variables\
            \ in mountpoint string:<br/><br/>  - <code>${clientid}</code>: clientid<br/><br/>\
            \  - <code>${username}</code>: username"
          default: "lwm2m/${endpoint_name}/"
        enable:
          type: boolean
          description: Whether to enable this gateway
          default: true
        enable_stats:
          type: boolean
          description: Whether to enable client process statistic
          default: true
        idle_timeout:
          type: string
          description: The idle time of the client connection process. It has two
            purposes:<br/>  1. A newly created client process that does not receive
            any client requests after that time will be closed directly.<br/>  2.
            A running client process that does not receive any client requests after
            this time will go into hibernation to save resources.
          example: 12m
          default: 30s
        clientinfo_override:
          $ref: '#/components/schemas/gateway.clientinfo_override'
        listeners:
          type: array
          items:
            oneOf:
            - $ref: '#/components/schemas/emqx_gateway_api.dtls_listener'
            - $ref: '#/components/schemas/emqx_gateway_api.udp_listener'
    inline_response_400:
      type: object
      properties:
        code:
          type: string
          enum:
          - BAD_REQUEST
        message:
          type: string
          description: Bad Request
    inline_response_404:
      type: object
      properties:
        code:
          type: string
          enum:
          - NOT_FOUND
        message:
          type: string
          description: Not Found
    inline_response_200:
      oneOf:
      - type: array
        items:
          $ref: '#/components/schemas/emqx_mgmt_api_metrics.node_metrics'
      - $ref: '#/components/schemas/emqx_mgmt_api_metrics.aggregated_metrics'
    id_import_users_body:
      type: object
      properties:
        filename:
          type: string
          format: binary
    inline_response_400_1:
      type: object
      properties:
        code:
          type: string
          enum:
          - BAD_REQUEST
        message:
          type: string
          description: Max limit illegality
    inline_response_404_1:
      type: object
      properties:
        code:
          type: string
          enum:
          - CLIENT_NOT_FOUND
        message:
          type: string
          description: Clientid not found
    inline_response_404_2:
      type: object
      properties:
        code:
          type: string
          enum:
          - NOT_FOUND
        message:
          type: string
          description: Plugin Not Found
    inline_response_400_2:
      type: object
      properties:
        code:
          type: string
          enum:
          - PARAM_ERROR
        message:
          type: string
          description: Bad parameter
    inline_response_404_3:
      type: object
      properties:
        code:
          type: string
          enum:
          - NOT_FOUND
        message:
          type: string
          description: Bridge not found
    inline_response_404_4:
      type: object
      properties:
        code:
          type: string
          enum:
          - TOPIC_NOT_FOUND
        message:
          type: string
          description: Topic not found
    inline_response_200_1:
      oneOf:
      - type: array
        items:
          $ref: '#/components/schemas/emqx_mgmt_api_stats.aggergate_data'
      - $ref: '#/components/schemas/emqx_mgmt_api_stats.node_stats_data'
    inline_response_400_3:
      type: object
      properties:
        code:
          type: string
          enum:
          - BAD_REQUEST
        message:
          type: string
          description: Bad username or bad rule schema
    inline_response_409:
      type: object
      properties:
        code:
          type: string
          enum:
          - ALREADY_EXISTS
        message:
          type: string
          description: ALREADY_EXISTS
    inline_response_404_5:
      type: object
      properties:
        code:
          type: string
          enum:
          - NOT_FOUND
        message:
          type: string
          description: Node not found
    inline_response_404_6:
      type: object
      properties:
        code:
          type: string
          enum:
          - NOT_FOUND
        message:
          type: string
          description: Server not found
    inline_response_500:
      type: object
      properties:
        code:
          type: string
          enum:
          - BAD_RPC
        message:
          type: string
          description: Bad RPC
    inline_response_409_1:
      type: object
      properties:
        code:
          type: string
          enum:
          - EXCEED_LIMIT
        message:
          type: string
          description: Auto Subscribe topics max limit
    inline_response_200_2:
      oneOf:
      - $ref: '#/components/schemas/authn.jwt_jwks'
      - $ref: '#/components/schemas/authn.jwt_public_key'
      - $ref: '#/components/schemas/authn.jwt_hmac'
      - $ref: '#/components/schemas/authn.http_post'
      - $ref: '#/components/schemas/authn.http_get'
      - $ref: '#/components/schemas/authn.redis_sentinel'
      - $ref: '#/components/schemas/authn.redis_cluster'
      - $ref: '#/components/schemas/authn.redis_single'
      - $ref: '#/components/schemas/authn.mongo_sharded'
      - $ref: '#/components/schemas/authn.mongo_rs'
      - $ref: '#/components/schemas/authn.mongo_single'
      - $ref: '#/components/schemas/authn.postgresql'
      - $ref: '#/components/schemas/authn.mysql'
      - $ref: '#/components/schemas/authn.builtin_db'
    inline_response_400_4:
      type: object
      properties:
        code:
          type: string
          enum:
          - BAD_REQUEST
        message:
          type: string
          description: Bad request
    inline_response_404_7:
      type: object
      properties:
        code:
          type: string
          enum:
          - NOT_FOUND
          - RESOURCE_NOT_FOUND
        message:
          type: string
          description: Not Found
    id_authentication_body:
      oneOf:
      - $ref: '#/components/schemas/authn.jwt_jwks'
      - $ref: '#/components/schemas/authn.jwt_public_key'
      - $ref: '#/components/schemas/authn.jwt_hmac'
      - $ref: '#/components/schemas/authn.http_post'
      - $ref: '#/components/schemas/authn.http_get'
      - $ref: '#/components/schemas/authn.redis_sentinel'
      - $ref: '#/components/schemas/authn.redis_cluster'
      - $ref: '#/components/schemas/authn.redis_single'
      - $ref: '#/components/schemas/authn.mongo_sharded'
      - $ref: '#/components/schemas/authn.mongo_rs'
      - $ref: '#/components/schemas/authn.mongo_single'
      - $ref: '#/components/schemas/authn.postgresql'
      - $ref: '#/components/schemas/authn.mysql'
      - $ref: '#/components/schemas/authn.builtin_db'
    id_authentication_body_1:
      oneOf:
      - $ref: '#/components/schemas/authn.jwt_jwks'
      - $ref: '#/components/schemas/authn.jwt_public_key'
      - $ref: '#/components/schemas/authn.jwt_hmac'
      - $ref: '#/components/schemas/authn.http_post'
      - $ref: '#/components/schemas/authn.http_get'
      - $ref: '#/components/schemas/authn.redis_sentinel'
      - $ref: '#/components/schemas/authn.redis_cluster'
      - $ref: '#/components/schemas/authn.redis_single'
      - $ref: '#/components/schemas/authn.mongo_sharded'
      - $ref: '#/components/schemas/authn.mongo_rs'
      - $ref: '#/components/schemas/authn.mongo_single'
      - $ref: '#/components/schemas/authn.postgresql'
      - $ref: '#/components/schemas/authn.mysql'
      - $ref: '#/components/schemas/authn.builtin_db'
    name_listeners_body:
      oneOf:
      - $ref: '#/components/schemas/emqx_gateway_api.dtls_listener'
      - $ref: '#/components/schemas/emqx_gateway_api.udp_listener'
      - $ref: '#/components/schemas/emqx_gateway_api.ssl_listener'
      - $ref: '#/components/schemas/emqx_gateway_api.tcp_listener'
    inline_response_404_8:
      type: object
      properties:
        code:
          type: string
          enum:
          - NOT_FOUND
        message:
          type: string
          description: config not found
    inline_response_400_5:
      type: object
      properties:
        code:
          type: string
          enum:
          - UPDATE_FAILED
        message:
          type: string
          description: Error code to troubleshoot problems.
    inline_response_400_6:
      type: object
      properties:
        code:
          type: string
          enum:
          - BAD_REQUEST
        message:
          type: string
          description: Bad clientid or bad rule schema
    inline_response_400_7:
      type: object
      properties:
        code:
          type: string
          enum:
          - MESSAGE_ID_SCHEMA_ERROR
          - INVALID_NODE
        message:
          type: string
          description: Bad Message ID format
    inline_response_404_9:
      type: object
      properties:
        code:
          type: string
          enum:
          - MESSAGE_ID_NOT_FOUND
        message:
          type: string
          description: Message ID not found
    inline_response_200_3:
      type: object
      properties:
        name:
          type: string
          description: Cluster name
        nodes:
          type: array
          description: Node name
          items:
            type: string
        self:
          type: string
          description: Self node name
      example:
        nodes:
        - nodes
        - nodes
        name: name
        self: self
    inline_response_200_4:
      oneOf:
      - $ref: '#/components/schemas/emqx_gateway_api_clients.exproto_client'
      - $ref: '#/components/schemas/emqx_gateway_api_clients.lwm2m_client'
      - $ref: '#/components/schemas/emqx_gateway_api_clients.coap_client'
      - $ref: '#/components/schemas/emqx_gateway_api_clients.mqttsn_client'
      - $ref: '#/components/schemas/emqx_gateway_api_clients.stomp_client'
    inline_response_400_8:
      oneOf:
      - type: array
        items:
          $ref: '#/components/schemas/emqx_mgmt_api_publish.publish_error'
      - $ref: '#/components/schemas/emqx_mgmt_api_publish.bad_request'
    inline_response_400_9:
      type: object
      properties:
        code:
          type: string
          enum:
          - BAD_REQUEST
        message:
          type: string
          description: Problem with configuration of external service or bridge not
            enabled
    inline_response_404_10:
      type: object
      properties:
        code:
          type: string
          enum:
          - NOT_FOUND
        message:
          type: string
          description: Bridge or node not found or invalid operation
    inline_response_501:
      type: object
      properties:
        code:
          type: string
          enum:
          - NOT_IMPLEMENTED
        message:
          type: string
          description: Not Implemented
    inline_response_503:
      type: object
      properties:
        code:
          type: string
          enum:
          - SERVICE_UNAVAILABLE
        message:
          type: string
          description: Service unavailable
    inline_response_400_10:
      type: object
      properties:
        code:
          type: string
          enum:
          - BAD_REQUEST
        message:
          type: string
          description: Invalid Parameters
    inline_response_412:
      type: object
      properties:
        code:
          type: string
          enum:
          - NOT_MATCH
        message:
          type: string
          description: SQL Not Match
    inline_response_400_11:
      type: object
      properties:
        code:
          type: string
          enum:
          - BAD_REQUEST
        message:
          type: string
          description: Bad clientid
    inline_response_404_11:
      type: object
      properties:
        code:
          type: string
          enum:
          - NOT_FOUND
        message:
          type: string
          description: ClientID Not Found
    inline_response_404_12:
      type: object
      properties:
        code:
          type: string
          enum:
          - CLIENTID_NOT_FOUND
        message:
          type: string
          description: Client ID not found
    inline_response_404_13:
      type: object
      properties:
        code:
          type: string
          enum:
          - NOT_FOUND
        message:
          type: string
          description: Error code to troubleshoot problems.
    listeners_id_body:
      oneOf:
      - $ref: '#/components/schemas/emqx_gateway_api.dtls_listener'
      - $ref: '#/components/schemas/emqx_gateway_api.udp_listener'
      - $ref: '#/components/schemas/emqx_gateway_api.ssl_listener'
      - $ref: '#/components/schemas/emqx_gateway_api.tcp_listener'
    inline_response_200_5:
      type: object
      properties:
        data:
          type: array
          description: List of rules
          items:
            $ref: '#/components/schemas/emqx_rule_api_schema.rule_info'
        meta:
          $ref: '#/components/schemas/public.meta'
      example:
        data:
        - metadata: {}
          enable: true
          name: foo
          created_at: 2021-12-01T15:00:43.153+08:00
          description: Some description
          from: t/#
          id: 293fb66f
          actions:
          - webhook:my_webhook
          - args:
              payload: "${payload}"
              topic: t/1
            function: republish
          - function: console
          sql: SELECT * FROM "test/topic" WHERE payload.x = 1
        - metadata: {}
          enable: true
          name: foo
          created_at: 2021-12-01T15:00:43.153+08:00
          description: Some description
          from: t/#
          id: 293fb66f
          actions:
          - webhook:my_webhook
          - args:
              payload: "${payload}"
              topic: t/1
            function: republish
          - function: console
          sql: SELECT * FROM "test/topic" WHERE payload.x = 1
        meta:
          limit: 50
          count: 0
          page: 1
          hasnext: true
    inline_response_500_1:
      type: object
      properties:
        code:
          type: string
          enum:
          - INTERNAL_ERROR
        message:
          type: string
          description: Internal Service Error
    inline_response_413:
      type: object
      properties:
        code:
          type: string
          enum:
          - EXCEED_LIMIT
        message:
          type: string
          description: Rules count exceed max limit
    inline_response_404_14:
      type: object
      properties:
        code:
          type: string
          enum:
          - TOPIC_NOT_FOUND
        message:
          type: string
          description: Not Found. Topic metrics not found
    bridges_probe_body:
      oneOf:
      - $ref: '#/components/schemas/bridge_webhook.post'
      - $ref: '#/components/schemas/bridge_mqtt.post'
    inline_response_400_12:
      type: object
      properties:
        code:
          type: string
          enum:
          - TEST_FAILED
        message:
          type: string
          description: bridge test failed
    inline_response_404_15:
      type: object
      properties:
        code:
          type: string
          enum:
          - NOT_FOUND
        message:
          type: string
          description: Trace Name Not Found
    inline_response_200_6:
      oneOf:
      - $ref: '#/components/schemas/authn.scram'
      - $ref: '#/components/schemas/authn.jwt_jwks'
      - $ref: '#/components/schemas/authn.jwt_public_key'
      - $ref: '#/components/schemas/authn.jwt_hmac'
      - $ref: '#/components/schemas/authn.http_post'
      - $ref: '#/components/schemas/authn.http_get'
      - $ref: '#/components/schemas/authn.redis_sentinel'
      - $ref: '#/components/schemas/authn.redis_cluster'
      - $ref: '#/components/schemas/authn.redis_single'
      - $ref: '#/components/schemas/authn.mongo_sharded'
      - $ref: '#/components/schemas/authn.mongo_rs'
      - $ref: '#/components/schemas/authn.mongo_single'
      - $ref: '#/components/schemas/authn.postgresql'
      - $ref: '#/components/schemas/authn.mysql'
      - $ref: '#/components/schemas/authn.builtin_db'
    authentication_id_body:
      oneOf:
      - $ref: '#/components/schemas/authn.scram'
      - $ref: '#/components/schemas/authn.jwt_jwks'
      - $ref: '#/components/schemas/authn.jwt_public_key'
      - $ref: '#/components/schemas/authn.jwt_hmac'
      - $ref: '#/components/schemas/authn.http_post'
      - $ref: '#/components/schemas/authn.http_get'
      - $ref: '#/components/schemas/authn.redis_sentinel'
      - $ref: '#/components/schemas/authn.redis_cluster'
      - $ref: '#/components/schemas/authn.redis_single'
      - $ref: '#/components/schemas/authn.mongo_sharded'
      - $ref: '#/components/schemas/authn.mongo_rs'
      - $ref: '#/components/schemas/authn.mongo_single'
      - $ref: '#/components/schemas/authn.postgresql'
      - $ref: '#/components/schemas/authn.mysql'
      - $ref: '#/components/schemas/authn.builtin_db'
    inline_response_200_7:
      type: object
      properties:
        mqtt:
          $ref: '#/components/schemas/broker.mqtt'
        flapping_detect:
          $ref: '#/components/schemas/broker.flapping_detect'
        force_shutdown:
          $ref: '#/components/schemas/broker.force_shutdown'
        force_gc:
          $ref: '#/components/schemas/broker.force_gc'
      example:
        force_gc:
          enable: true
          bytes: 32MB
          count: 0
        mqtt:
          retain_available: true
          max_mqueue_len: ""
          peer_cert_as_clientid: disabled
          max_packet_size: 32MB
          max_inflight: 36944
          session_expiry_interval: 12m
          exclusive_subscription: false
          ignore_loop_deliver: false
          await_rel_timeout: 12m
          strict_mode: false
          idle_timeout: ""
          retry_interval: 12m
          peer_cert_as_username: disabled
          upgrade_qos: false
          max_topic_alias: 9606
          max_clientid_len: 5269
          use_username_as_clientid: false
          shared_subscription_strategy: round_robin
          response_information: response_information
          max_subscriptions: ""
          max_qos_allowed: 0
          mqueue_default_priority: lowest
          server_keepalive: ""
          keepalive_multiplier: 5.962133916683182377482808078639209270477294921875
          mqueue_store_qos0: true
          mqueue_priorities: ""
          max_topic_levels: 39501
          max_awaiting_rel: ""
          wildcard_subscription: true
          shared_subscription: true
        flapping_detect:
          max_count: 0
          enable: false
          ban_time: 12m
          window_time: 12m
        force_shutdown:
          max_heap_size: 1024KB
          enable: true
          max_mailbox_size: 0
    configs_global_zone_body:
      type: object
      properties:
        mqtt:
          $ref: '#/components/schemas/broker.mqtt'
        flapping_detect:
          $ref: '#/components/schemas/broker.flapping_detect'
        force_shutdown:
          $ref: '#/components/schemas/broker.force_shutdown'
        force_gc:
          $ref: '#/components/schemas/broker.force_gc'
      example:
        force_gc:
          enable: true
          bytes: 32MB
          count: 0
        mqtt:
          retain_available: true
          max_mqueue_len: ""
          peer_cert_as_clientid: disabled
          max_packet_size: 32MB
          max_inflight: 36944
          session_expiry_interval: 12m
          exclusive_subscription: false
          ignore_loop_deliver: false
          await_rel_timeout: 12m
          strict_mode: false
          idle_timeout: ""
          retry_interval: 12m
          peer_cert_as_username: disabled
          upgrade_qos: false
          max_topic_alias: 9606
          max_clientid_len: 5269
          use_username_as_clientid: false
          shared_subscription_strategy: round_robin
          response_information: response_information
          max_subscriptions: ""
          max_qos_allowed: 0
          mqueue_default_priority: lowest
          server_keepalive: ""
          keepalive_multiplier: 5.962133916683182377482808078639209270477294921875
          mqueue_store_qos0: true
          mqueue_priorities: ""
          max_topic_levels: 39501
          max_awaiting_rel: ""
          wildcard_subscription: true
          shared_subscription: true
        flapping_detect:
          max_count: 0
          enable: false
          ban_time: 12m
          window_time: 12m
        force_shutdown:
          max_heap_size: 1024KB
          enable: true
          max_mailbox_size: 0
    inline_response_404_16:
      type: object
      properties:
        code:
          type: string
          enum:
          - NOT_FOUND
        message:
          type: string
          description: Bridge not found or invalid operation
    inline_response_200_8:
      type: object
      properties:
        metrics:
          $ref: '#/components/schemas/bridge.metrics'
        node_metrics:
          type: array
          description: Node metrics.
          items:
            $ref: '#/components/schemas/bridge.node_metrics'
      example:
        node_metrics:
        - node: emqx@127.0.0.1
          metrics: null
        - node: emqx@127.0.0.1
          metrics: null
        metrics:
          retried: 9
          rate_last5m: 1.024645700144157789424070870154537260532379150390625
          queuing: 7
          dropped: 0
          received: 1.489415909854170383397331534069962799549102783203125
          failed: 3
          dropped.resource_stopped: 5
          inflight: 2
          dropped.queue_full: 1
          rate: 7.3862819483858839220147274318151175975799560546875
          rate_max: 1.231513536777255612975068288506008684635162353515625
          success: 4
          dropped.resource_not_found: 5
          matched: 2
          dropped.other: 6
    users_body:
      type: object
      properties:
        username:
          maxLength: 100
          type: string
          description: Dashboard Username
          example: admin
        password:
          maxLength: 100
          type: string
          description: Dashboard Password
          example: public
        description:
          type: string
          description: Dashboard User Description
          example: administrator
    inline_response_200_9:
      type: object
      properties:
        username:
          maxLength: 100
          type: string
          description: Dashboard Username
          example: admin
        description:
          type: string
          description: Dashboard User Description
          example: administrator
      example:
        description: administrator
        username: admin
    listeners_body:
      oneOf:
      - $ref: '#/components/schemas/listeners.quic_required_bind-with_name'
      - $ref: '#/components/schemas/listeners.wss_required_bind-with_name'
      - $ref: '#/components/schemas/listeners.ws_required_bind-with_name'
      - $ref: '#/components/schemas/listeners.ssl_required_bind-with_name'
      - $ref: '#/components/schemas/listeners.tcp_required_bind-with_name'
    inline_response_200_10:
      oneOf:
      - $ref: '#/components/schemas/listeners.wss_required_bind'
      - $ref: '#/components/schemas/listeners.ws_required_bind'
      - $ref: '#/components/schemas/listeners.tcp_required_bind'
      - $ref: '#/components/schemas/listeners.ssl_required_bind'
      - $ref: '#/components/schemas/listeners.quic_required_bind'
    inline_response_400_13:
      type: object
      properties:
        code:
          type: string
          enum:
          - BAD_LISTENER_ID
          - BAD_REQUEST
        message:
          type: string
          description: Error code to troubleshoot problems.
    inline_response_404_17:
      type: object
      properties:
        code:
          type: string
          enum:
          - NOT_FOUND
          - NODE_ERROR
        message:
          type: string
          description: Trace Name or Node Not Found
    name_authentication_body:
      oneOf:
      - $ref: '#/components/schemas/authn.jwt_jwks'
      - $ref: '#/components/schemas/authn.jwt_public_key'
      - $ref: '#/components/schemas/authn.jwt_hmac'
      - $ref: '#/components/schemas/authn.http_post'
      - $ref: '#/components/schemas/authn.http_get'
      - $ref: '#/components/schemas/authn.redis_sentinel'
      - $ref: '#/components/schemas/authn.redis_cluster'
      - $ref: '#/components/schemas/authn.redis_single'
      - $ref: '#/components/schemas/authn.mongo_sharded'
      - $ref: '#/components/schemas/authn.mongo_rs'
      - $ref: '#/components/schemas/authn.mongo_single'
      - $ref: '#/components/schemas/authn.postgresql'
      - $ref: '#/components/schemas/authn.mysql'
      - $ref: '#/components/schemas/authn.builtin_db'
    name_authentication_body_1:
      oneOf:
      - $ref: '#/components/schemas/authn.jwt_jwks'
      - $ref: '#/components/schemas/authn.jwt_public_key'
      - $ref: '#/components/schemas/authn.jwt_hmac'
      - $ref: '#/components/schemas/authn.http_post'
      - $ref: '#/components/schemas/authn.http_get'
      - $ref: '#/components/schemas/authn.redis_sentinel'
      - $ref: '#/components/schemas/authn.redis_cluster'
      - $ref: '#/components/schemas/authn.redis_single'
      - $ref: '#/components/schemas/authn.mongo_sharded'
      - $ref: '#/components/schemas/authn.mongo_rs'
      - $ref: '#/components/schemas/authn.mongo_single'
      - $ref: '#/components/schemas/authn.postgresql'
      - $ref: '#/components/schemas/authn.mysql'
      - $ref: '#/components/schemas/authn.builtin_db'
    clientid_request_body:
      type: object
      properties:
        token:
          type: string
          description: "Message token, can be empty"
        method:
          type: string
          description: Request method type
          enum:
          - get
          - put
          - post
          - delete
        timeout:
          type: string
          description: Timespan for response
          example: 32s
        content_type:
          type: string
          description: Payload type
          enum:
          - text/plain
          - application/json
          - application/octet-stream
        payload:
          type: string
          description: The content of the payload
    inline_response_200_11:
      type: object
      properties:
        id:
          type: integer
          description: Message ID
        token:
          type: string
          description: "Message token, can be empty"
        method:
          type: string
          description: Response code
        payload:
          type: string
          description: The content of the payload
      example:
        method: method
        payload: payload
        id: 0
        token: token
    inline_response_404_18:
      type: object
      properties:
        code:
          type: string
          enum:
          - CLIENT_NOT_FOUND
        message:
          type: string
          description: Client not found error
    inline_response_504:
      type: object
      properties:
        code:
          type: string
          enum:
          - CLIENT_NOT_RESPONSE
        message:
          type: string
          description: Waiting for client response timeout
    inline_response_400_14:
      type: object
      properties:
        code:
          type: string
          enum:
          - BAD_REQUEST
          - BAD_LISTENER_ID
        message:
          type: string
          description: Error code to troubleshoot problems.
    inline_response_200_12:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/emqx_mgmt_api_topics.topic'
        meta:
          $ref: '#/components/schemas/public.meta'
      example:
        data:
        - node: node
          topic: topic
        - node: node
          topic: topic
        meta:
          limit: 50
          count: 0
          page: 1
          hasnext: true
    authorization_sources_body:
      oneOf:
      - $ref: '#/components/schemas/emqx_authz_api_schema.file'
      - $ref: '#/components/schemas/emqx_authz_api_schema.postgresql'
      - $ref: '#/components/schemas/emqx_authz_api_schema.mysql'
      - $ref: '#/components/schemas/emqx_authz_api_schema.built_in_database'
      - $ref: '#/components/schemas/emqx_authz_api_schema.redis_cluster'
      - $ref: '#/components/schemas/emqx_authz_api_schema.redis_sentinel'
      - $ref: '#/components/schemas/emqx_authz_api_schema.redis_single'
      - $ref: '#/components/schemas/emqx_authz_api_schema.mongo_sharded'
      - $ref: '#/components/schemas/emqx_authz_api_schema.mongo_rs'
      - $ref: '#/components/schemas/emqx_authz_api_schema.mongo_single'
      - $ref: '#/components/schemas/emqx_authz_api_schema.http_post'
      - $ref: '#/components/schemas/emqx_authz_api_schema.http_get'
    login_body:
      type: object
      properties:
        username:
          maxLength: 100
          type: string
          description: Dashboard Username
          example: admin
        password:
          maxLength: 100
          type: string
          description: Dashboard Password
          example: public
    inline_response_200_13:
      type: object
      properties:
        token:
          type: string
          description: Dashboard Auth Token
        version:
          type: string
          description: EMQX Version
          example: 5.0.0
        license:
          $ref: '#/components/schemas/inline_response_200_13_license'
      example:
        license:
          edition: opensource
        version: 5.0.0
        token: token
    inline_response_401:
      type: object
      properties:
        code:
          type: string
          enum:
          - BAD_USERNAME_OR_PWD
        message:
          type: string
          description: Login failed. Bad username or password
    inline_response_200_14:
      oneOf:
      - $ref: '#/components/schemas/bridge_webhook.get'
      - $ref: '#/components/schemas/bridge_mqtt.get'
    bridges_id_body:
      oneOf:
      - $ref: '#/components/schemas/bridge_webhook.put'
      - $ref: '#/components/schemas/bridge_mqtt.put'
    inline_response_400_15:
      type: object
      properties:
        code:
          type: string
          enum:
          - BAD_REQUEST
        message:
          type: string
          description: Update bridge failed
    inline_response_400_16:
      type: object
      properties:
        code:
          type: string
          enum:
          - BAD_REQUEST
        message:
          type: string
          description: Cannot delete bridge while active rules are defined for this
            bridge
    inline_response_400_17:
      type: object
      properties:
        code:
          type: string
          enum:
          - BAD_REQUEST
        message:
          type: string
          description: Error code to troubleshoot problems.
    inline_response_200_15:
      type: object
      properties:
        data:
          type: array
          description: Retained messages list.
          items:
            $ref: '#/components/schemas/retainer.message_summary'
        meta:
          $ref: '#/components/schemas/public.meta'
      example:
        data:
        - from_clientid: from_clientid
          qos: 0
          from_username: from_username
          msgid: msgid
          topic: topic
          publish_at: publish_at
        - from_clientid: from_clientid
          qos: 0
          from_username: from_username
          msgid: msgid
          topic: topic
          publish_at: publish_at
        meta:
          limit: 50
          count: 0
          page: 1
          hasnext: true
    inline_response_400_18:
      type: object
      properties:
        code:
          type: string
          enum:
          - BAD_REQUEST
        message:
          type: string
          description: Unsupported backend.
    inline_response_200_16:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/emqx_mgmt_api_alarms.alarm'
        meta:
          $ref: '#/components/schemas/public.meta'
      example:
        data:
        - duration: 297056
          node: emqx@172.20.0.2
          deactivate_at: 2021-10-31T10:52:52.548+08:00
          name: high_system_memory_usage
          details:
            high_watermark: 70
          message: System memory usage is higher than 70%
          activate_at: 2021-10-25T11:52:52.548+08:00
        - duration: 297056
          node: emqx@172.20.0.2
          deactivate_at: 2021-10-31T10:52:52.548+08:00
          name: high_system_memory_usage
          details:
            high_watermark: 70
          message: System memory usage is higher than 70%
          activate_at: 2021-10-25T11:52:52.548+08:00
        meta:
          limit: 50
          count: 0
          page: 1
          hasnext: true
    inline_response_400_19:
      type: object
      properties:
        code:
          type: string
          enum:
          - BAD_REQUEST
        message:
          type: string
          description: Bad username
    inline_response_404_19:
      type: object
      properties:
        code:
          type: string
          enum:
          - NOT_FOUND
        message:
          type: string
          description: Username Not Found
    inline_response_400_20:
      type: object
      properties:
        code:
          type: string
          enum:
          - INVALID_PARAMETER
        message:
          type: string
          description: Invalid parameter
    inline_response_500_2:
      type: object
      properties:
        code:
          type: string
          enum:
          - NODE_DOWN
        message:
          type: string
          description: Bad RPC
    inline_response_404_20:
      type: object
      properties:
        code:
          type: string
          enum:
          - NOT_FOUND
        message:
          type: string
          description: Telemetry is not enabled
    authentication_body:
      oneOf:
      - $ref: '#/components/schemas/authn.scram'
      - $ref: '#/components/schemas/authn.jwt_jwks'
      - $ref: '#/components/schemas/authn.jwt_public_key'
      - $ref: '#/components/schemas/authn.jwt_hmac'
      - $ref: '#/components/schemas/authn.http_post'
      - $ref: '#/components/schemas/authn.http_get'
      - $ref: '#/components/schemas/authn.redis_sentinel'
      - $ref: '#/components/schemas/authn.redis_cluster'
      - $ref: '#/components/schemas/authn.redis_single'
      - $ref: '#/components/schemas/authn.mongo_sharded'
      - $ref: '#/components/schemas/authn.mongo_rs'
      - $ref: '#/components/schemas/authn.mongo_single'
      - $ref: '#/components/schemas/authn.postgresql'
      - $ref: '#/components/schemas/authn.mysql'
      - $ref: '#/components/schemas/authn.builtin_db'
    trace_body:
      required:
      - name
      - type
      type: object
      properties:
        name:
          type: string
          description: "Unique name of the trace. Only ascii letters in a-z, A-Z,\
            \ 0-9 and underscore '_' are allowed."
          example: EMQX-TRACE-1
        type:
          type: string
          description: Filter type
          example: clientid
          enum:
          - clientid
          - topic
          - ip_address
        topic:
          type: string
          description: Specify the topic or topic filter if the trace 'type' is 'topic'.
          example: /dev/#
        clientid:
          type: string
          description: Specify the MQTT clientid if the trace 'type' is 'clientid'.
          example: dev-001
        ip_address:
          type: string
          description: Specify the client's IP address if the trace type is 'ip_address'.
          example: 127.0.0.1
        payload_encode:
          type: string
          description: "Determine the format of the payload format in the trace file.<br/><br/>`text`:\
            \ Text-based protocol or plain text protocol.<br/> It is recommended when\
            \ payload is JSON encoded.<br/><br/>`hex`: Binary hexadecimal encode.It\
            \ is recommended when payload is a custom binary protocol.<br/><br/>`hidden`:\
            \ payload is obfuscated as `******`"
          default: text
          enum:
          - hex
          - text
          - hidden
        start_at:
          description: rfc3339 timestamp or epoch second
          example: 2021-11-04T18:17:38+08:00
          oneOf:
          - type: integer
            description: epoch-second
            example: 1640995200
          - type: string
            format: date-time
            example: 2022-01-01T00:00:00Z
        end_at:
          description: rfc3339 timestamp or epoch second
          example: 2021-11-05T18:17:38+08:00
          oneOf:
          - type: integer
            description: epoch-second
            example: 1640995200
          - type: string
            format: date-time
            example: 2022-01-01T00:00:00Z
    inline_response_400_21:
      type: object
      properties:
        code:
          type: string
          enum:
          - INVALID_PARAMS
        message:
          type: string
          description: invalid trace params
    inline_response_409_2:
      type: object
      properties:
        code:
          type: string
          enum:
          - ALREADY_EXISTS
          - DUPLICATE_CONDITION
          - BAD_TYPE
        message:
          type: string
          description: trace already exists
    mqtt_topic_metrics_body:
      required:
      - topic
      type: object
      properties:
        topic:
          type: string
          description: Raw topic string
          example: testtopic/1
    inline_response_400_22:
      type: object
      properties:
        code:
          type: string
          enum:
          - BAD_REQUEST
          - BAD_TOPIC
        message:
          type: string
          description: Bad request. Already exists or bad topic name
    inline_response_409_3:
      type: object
      properties:
        code:
          type: string
          enum:
          - EXCEED_LIMIT
        message:
          type: string
          description: Conflict. Topic metrics exceeded max limit 512
    inline_response_400_23:
      type: object
      properties:
        code:
          type: string
          enum:
          - BAD_REQUEST
        message:
          type: string
          description: Problem with configuration of external service
    inline_response_200_17:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/emqx_delayed_api.message'
        meta:
          $ref: '#/components/schemas/inline_response_200_17_meta'
      example:
        data:
        - node: node
          expected_at: expected_at
          from_clientid: from_clientid
          qos: 0
          payload: payload
          from_username: from_username
          msgid: 0
          topic: /sys/#
          delayed_interval: 1
          delayed_remaining: 0
          publish_at: publish_at
        - node: node
          expected_at: expected_at
          from_clientid: from_clientid
          qos: 0
          payload: payload
          from_username: from_username
          msgid: 0
          topic: /sys/#
          delayed_interval: 1
          delayed_remaining: 0
          publish_at: publish_at
        meta:
          limit: 1
          count: 0
          page: 1
    users_username_body:
      type: object
      properties:
        description:
          type: string
          description: Dashboard User Description
          example: administrator
    inline_response_404_21:
      type: object
      properties:
        code:
          type: string
          enum:
          - USER_NOT_FOUND
        message:
          type: string
          description: Dashboard user not found
    inline_response_400_24:
      type: object
      properties:
        code:
          type: string
          enum:
          - BAD_REQUEST
          - NOT_ALLOWED
        message:
          type: string
          description: Login failed. Bad username or password
    inline_response_400_25:
      type: object
      properties:
        code:
          type: string
          enum:
          - BAD_REQUEST
        message:
          type: string
          description: Already exists
    inline_response_200_18:
      type: object
      properties:
        clientid:
          type: string
          example: urn:oma:lwm2m:oma:2
        path:
          type: string
          example: /3/0/7
        action:
          type: string
          example: discover
        codeMsg:
          type: string
          example: reply_not_received
        content:
          type: array
          items:
            $ref: '#/components/schemas/lwm2m.resource'
      example:
        path: /3/0/7
        clientid: urn:oma:lwm2m:oma:2
        codeMsg: reply_not_received
        action: discover
        content:
        - path: urn:oma:lwm2m:oma:2
          operations: E
          dataType: Integer
          name: lwm2m-test
        - path: urn:oma:lwm2m:oma:2
          operations: E
          dataType: Integer
          name: lwm2m-test
    inline_response_404_22:
      type: object
      properties:
        code:
          type: string
          enum:
          - CLIENT_NOT_FOUND
        message:
          type: string
          description: Client not found
    inline_response_404_23:
      type: object
      properties:
        code:
          type: string
          enum:
          - NOT_FOUND
        message:
          type: string
          description: Rule not found
    inline_response_200_19:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/slow_subscribers_statistics.record'
      example:
        data:
        - node: node
          last_update_time: 6
          clientid: clientid
          topic: topic
          timespan: 0
        - node: node
          last_update_time: 6
          clientid: clientid
          topic: topic
          timespan: 0
    inline_response_200_20:
      oneOf:
      - $ref: '#/components/schemas/emqx_gateway_api.exproto'
      - $ref: '#/components/schemas/emqx_gateway_api.lwm2m'
      - $ref: '#/components/schemas/emqx_gateway_api.coap'
      - $ref: '#/components/schemas/emqx_gateway_api.mqttsn'
      - $ref: '#/components/schemas/emqx_gateway_api.stomp'
    gateways_name_body:
      oneOf:
      - $ref: '#/components/schemas/emqx_gateway_api.update_exproto'
      - $ref: '#/components/schemas/emqx_gateway_api.update_lwm2m'
      - $ref: '#/components/schemas/emqx_gateway_api.update_coap'
      - $ref: '#/components/schemas/emqx_gateway_api.update_mqttsn'
      - $ref: '#/components/schemas/emqx_gateway_api.update_stomp'
      - $ref: '#/components/schemas/emqx_gateway_api.exproto'
      - $ref: '#/components/schemas/emqx_gateway_api.lwm2m'
      - $ref: '#/components/schemas/emqx_gateway_api.coap'
      - $ref: '#/components/schemas/emqx_gateway_api.mqttsn'
      - $ref: '#/components/schemas/emqx_gateway_api.stomp'
    sources_type_body:
      oneOf:
      - $ref: '#/components/schemas/emqx_authz_api_schema.file'
      - $ref: '#/components/schemas/emqx_authz_api_schema.postgresql'
      - $ref: '#/components/schemas/emqx_authz_api_schema.mysql'
      - $ref: '#/components/schemas/emqx_authz_api_schema.built_in_database'
      - $ref: '#/components/schemas/emqx_authz_api_schema.redis_cluster'
      - $ref: '#/components/schemas/emqx_authz_api_schema.redis_sentinel'
      - $ref: '#/components/schemas/emqx_authz_api_schema.redis_single'
      - $ref: '#/components/schemas/emqx_authz_api_schema.mongo_sharded'
      - $ref: '#/components/schemas/emqx_authz_api_schema.mongo_rs'
      - $ref: '#/components/schemas/emqx_authz_api_schema.mongo_single'
      - $ref: '#/components/schemas/emqx_authz_api_schema.http_post'
      - $ref: '#/components/schemas/emqx_authz_api_schema.http_get'
    authentication_import_users_body:
      type: object
      properties:
        filename:
          type: string
          format: binary
    inline_response_200_21:
      type: object
      properties:
        name:
          type: string
          description: "Unique and format by [a-zA-Z0-9-_]"
          example: EMQX-API-KEY-1
        api_key:
          type: string
          description: TODO:uses HMAC-SHA256 for signing.
          example: a4697a5c75a769f6
        expired_at:
          description: No longer valid datetime
          example: 2021-12-05T02:01:34.186Z
          oneOf:
          - oneOf:
            - type: integer
              description: epoch-second
              example: 1640995200
            - type: string
              format: date-time
              example: 2022-01-01T00:00:00Z
          - type: string
            enum:
            - infinity
          default: infinity
        created_at:
          description: ApiKey create datetime
          example: 2021-12-01T00:00:00.000Z
          oneOf:
          - type: integer
            description: epoch-second
            example: 1640995200
          - type: string
            format: date-time
            example: 2022-01-01T00:00:00Z
        desc:
          type: string
          example: Note
        enable:
          type: boolean
          description: Enable/Disable
        expired:
          type: boolean
          description: Expired
      example:
        expired: true
        api_key: a4697a5c75a769f6
        enable: true
        name: EMQX-API-KEY-1
        created_at: 2021-12-01T00:00:00.000Z
        expired_at: 2021-12-05T02:01:34.186Z
        desc: Note
    api_key_body:
      type: object
      properties:
        name:
          type: string
          description: "Unique and format by [a-zA-Z0-9-_]"
          example: EMQX-API-KEY-1
        expired_at:
          description: No longer valid datetime
          example: 2021-12-05T02:01:34.186Z
          oneOf:
          - oneOf:
            - type: integer
              description: epoch-second
              example: 1640995200
            - type: string
              format: date-time
              example: 2022-01-01T00:00:00Z
          - type: string
            enum:
            - infinity
          default: infinity
        desc:
          type: string
          example: Note
        enable:
          type: boolean
          description: Enable/Disable
        expired:
          type: boolean
          description: Expired
    inline_response_200_22:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/emqx_mgmt_api_banned.ban'
        meta:
          $ref: '#/components/schemas/public.meta'
      example:
        data:
        - reason: Too many requests
          as: username
          at: 2021-10-25T21:48:47+08:00
          by: mgmt_api
          until: 2021-10-25T21:53:47+08:00
          who: Banned name
        - reason: Too many requests
          as: username
          at: 2021-10-25T21:48:47+08:00
          by: mgmt_api
          until: 2021-10-25T21:53:47+08:00
          who: Banned name
        meta:
          limit: 50
          count: 0
          page: 1
          hasnext: true
    inline_response_200_23:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/emqx_mgmt_api_banned.ban'
      example:
        data:
        - reason: Too many requests
          as: username
          at: 2021-10-25T21:48:47+08:00
          by: mgmt_api
          until: 2021-10-25T21:53:47+08:00
          who: Banned name
        - reason: Too many requests
          as: username
          at: 2021-10-25T21:48:47+08:00
          by: mgmt_api
          until: 2021-10-25T21:53:47+08:00
          who: Banned name
    inline_response_400_26:
      type: object
      properties:
        code:
          type: string
          enum:
          - ALREADY_EXISTS
          - BAD_REQUEST
        message:
          type: string
          description: "Bad request, possibly due to wrong parameters or the existence\
            \ of a banned object."
    inline_response_200_24:
      type: object
      properties:
        items:
          type: string
          example: TEXT-LOG-ITEMS
        meta:
          $ref: '#/components/schemas/inline_response_200_24_meta'
      example:
        meta:
          bytes: 171976544
          position: 6
        items: TEXT-LOG-ITEMS
    inline_response_400_27:
      type: object
      properties:
        code:
          type: string
          enum:
          - BAD_REQUEST
        message:
          type: string
          description: Bad input parameter
    inline_response_503_1:
      type: object
      properties:
        code:
          type: string
          enum:
          - SERVICE_UNAVAILABLE
        message:
          type: string
          description: Requested chunk size too big
    inline_response_404_24:
      type: object
      properties:
        code:
          type: string
          enum:
          - NOT_FOUND
        message:
          type: string
          description: Viewed message doesn't exist.
    plugins_install_body:
      type: object
      properties:
        plugin:
          type: string
          format: binary
    inline_response_400_28:
      type: object
      properties:
        code:
          type: string
          enum:
          - UNEXPECTED_ERROR
          - ALREADY_INSTALLED
          - BAD_PLUGIN_INFO
        message:
          type: string
          description: Error code to troubleshoot problems.
    inline_response_404_25:
      type: object
      properties:
        code:
          type: string
          enum:
          - CLIENT_NOT_FOUND
        message:
          type: string
          description: clientid not found
    inline_response_404_26:
      type: object
      properties:
        code:
          type: string
          enum:
          - NOT_FOUND
        message:
          type: string
          description: The banned object was not found in the blacklist.
    inline_response_400_29:
      type: object
      properties:
        code:
          type: string
          enum:
          - NO_DEFAULT_VALUE
          - REST_FAILED
        message:
          type: string
          description: Error code to troubleshoot problems.
    inline_response_403:
      type: object
      properties:
        code:
          type: string
          enum:
          - REST_FAILED
        message:
          type: string
          description: Error code to troubleshoot problems.
    inline_response_404_27:
      type: object
      properties:
        code:
          type: string
          enum:
          - NOT_FOUND
        message:
          type: string
          description: Config not found.
    inline_response_400_30:
      type: object
      properties:
        code:
          type: string
          enum:
          - UPDATE_FAILED
        message:
          type: string
          description: Update config failed
    api_key_name_body:
      type: object
      properties:
        expired_at:
          description: No longer valid datetime
          example: 2021-12-05T02:01:34.186Z
          oneOf:
          - oneOf:
            - type: integer
              description: epoch-second
              example: 1640995200
            - type: string
              format: date-time
              example: 2022-01-01T00:00:00Z
          - type: string
            enum:
            - infinity
          default: infinity
        desc:
          type: string
          example: Note
        enable:
          type: boolean
          description: Enable/Disable
        expired:
          type: boolean
          description: Expired
    inline_response_400_31:
      type: object
      properties:
        code:
          type: string
          enum:
          - INVALID_ACCEPT
        message:
          type: string
          description: Error code to troubleshoot problems.
    inline_response_500_3:
      type: object
      properties:
        code:
          type: string
          enum:
          - BAD_NODE
        message:
          type: string
          description: Error code to troubleshoot problems.
    gte_created_at:
      oneOf:
      - type: integer
        description: epoch-millisecond
        example: 1640995200000
      - type: string
        format: date-time
        example: 2022-01-01T00:00:00Z
    lte_created_at:
      oneOf:
      - type: integer
        description: epoch-millisecond
        example: 1640995200000
      - type: string
        format: date-time
        example: 2022-01-01T00:00:00Z
    gte_connected_at:
      oneOf:
      - type: integer
        description: epoch-millisecond
        example: 1640995200000
      - type: string
        format: date-time
        example: 2022-01-01T00:00:00Z
    lte_connected_at:
      oneOf:
      - type: integer
        description: epoch-millisecond
        example: 1640995200000
      - type: string
        format: date-time
        example: 2022-01-01T00:00:00Z
    inline_response_200_25:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/emqx_mgmt_api_clients.client'
        meta:
          $ref: '#/components/schemas/public.meta'
      example:
        data:
        - clientid: clientid
          keepalive: 7
          mqueue_len: 2
          reductions: 6
          send_msg.qos0: 2
          created_at: ""
          proto_ver: 1
          recv_msg.dropped.await_pubrel_timeout: 7
          connected_at: ""
          send_msg.dropped.expired: 3
          mountpoint: mountpoint
          mailbox_len: 9
          send_msg: 9
          subscriptions_cnt: 3
          heap_size: 5
          disconnected_at: ""
          mqueue_dropped: 3
          recv_msg: 1
          is_bridge: true
          recv_cnt: 1
          send_msg.dropped.queue_full: 6
          proto_name: proto_name
          ip_address: ip_address
          awaiting_rel_cnt: 0
          send_msg.dropped.too_large: 1
          subscriptions_max: 3
          recv_msg.qos0: 1
          send_cnt: 8
          recv_msg.qos1: 4
          recv_msg.qos2: 5
          connected: true
          node: node
          recv_oct: 9
          inflight_max: 2
          mqueue_max: 4
          port: 7
          recv_pkt: 9
          send_oct: 5
          awaiting_rel_max: 6
          inflight_cnt: 5
          send_msg.dropped: 6
          send_msg.qos2: 6
          send_msg.qos1: 6
          expiry_interval: 1
          recv_msg.dropped: 6
          send_pkt: 6
          clean_start: true
          username: username
        - clientid: clientid
          keepalive: 7
          mqueue_len: 2
          reductions: 6
          send_msg.qos0: 2
          created_at: ""
          proto_ver: 1
          recv_msg.dropped.await_pubrel_timeout: 7
          connected_at: ""
          send_msg.dropped.expired: 3
          mountpoint: mountpoint
          mailbox_len: 9
          send_msg: 9
          subscriptions_cnt: 3
          heap_size: 5
          disconnected_at: ""
          mqueue_dropped: 3
          recv_msg: 1
          is_bridge: true
          recv_cnt: 1
          send_msg.dropped.queue_full: 6
          proto_name: proto_name
          ip_address: ip_address
          awaiting_rel_cnt: 0
          send_msg.dropped.too_large: 1
          subscriptions_max: 3
          recv_msg.qos0: 1
          send_cnt: 8
          recv_msg.qos1: 4
          recv_msg.qos2: 5
          connected: true
          node: node
          recv_oct: 9
          inflight_max: 2
          mqueue_max: 4
          port: 7
          recv_pkt: 9
          send_oct: 5
          awaiting_rel_max: 6
          inflight_cnt: 5
          send_msg.dropped: 6
          send_msg.qos2: 6
          send_msg.qos1: 6
          expiry_interval: 1
          recv_msg.dropped: 6
          send_pkt: 6
          clean_start: true
          username: username
        meta:
          limit: 50
          count: 0
          page: 1
          hasnext: true
    inline_response_400_32:
      type: object
      properties:
        code:
          type: string
          enum:
          - INVALID_PARAMETER
        message:
          type: string
          description: Invalid parameters
    inline_response_404_28:
      type: object
      properties:
        code:
          type: string
          enum:
          - BAD_LISTENER_ID
          - BAD_REQUEST
        message:
          type: string
          description: Listener id not found
    listeners_id_body_1:
      oneOf:
      - $ref: '#/components/schemas/listeners.wss_not_required_bind'
      - $ref: '#/components/schemas/listeners.ws_not_required_bind'
      - $ref: '#/components/schemas/listeners.tcp_not_required_bind'
      - $ref: '#/components/schemas/listeners.ssl_not_required_bind'
      - $ref: '#/components/schemas/listeners.quic_not_required_bind'
    listeners_id_body_2:
      oneOf:
      - $ref: '#/components/schemas/listeners.wss_required_bind'
      - $ref: '#/components/schemas/listeners.ws_required_bind'
      - $ref: '#/components/schemas/listeners.tcp_required_bind'
      - $ref: '#/components/schemas/listeners.ssl_required_bind'
      - $ref: '#/components/schemas/listeners.quic_required_bind'
    inline_response_404_29:
      type: object
      properties:
        code:
          type: string
          enum:
          - BAD_LISTENER_ID
        message:
          type: string
          description: Error code to troubleshoot problems.
    username_change_pwd_body:
      type: object
      properties:
        old_pwd:
          type: string
          description: Old password
        new_pwd:
          type: string
          description: New password
    inline_response_400_33:
      type: object
      properties:
        code:
          type: string
          enum:
          - BAD_REQUEST
          - ERROR_PWD_NOT_MATCH
        message:
          type: string
          description: Login failed. Bad username or password
    gte_created_at_1:
      oneOf:
      - type: integer
        description: epoch-millisecond
        example: 1640995200000
      - type: string
        format: date-time
        example: 2022-01-01T00:00:00Z
    lte_created_at_1:
      oneOf:
      - type: integer
        description: epoch-millisecond
        example: 1640995200000
      - type: string
        format: date-time
        example: 2022-01-01T00:00:00Z
    gte_connected_at_1:
      oneOf:
      - type: integer
        description: epoch-millisecond
        example: 1640995200000
      - type: string
        format: date-time
        example: 2022-01-01T00:00:00Z
    lte_connected_at_1:
      oneOf:
      - type: integer
        description: epoch-millisecond
        example: 1640995200000
      - type: string
        format: date-time
        example: 2022-01-01T00:00:00Z
    inline_response_200_26:
      type: object
      properties:
        data:
          oneOf:
          - type: array
            items:
              $ref: '#/components/schemas/emqx_gateway_api_clients.exproto_client'
          - type: array
            items:
              $ref: '#/components/schemas/emqx_gateway_api_clients.lwm2m_client'
          - type: array
            items:
              $ref: '#/components/schemas/emqx_gateway_api_clients.coap_client'
          - type: array
            items:
              $ref: '#/components/schemas/emqx_gateway_api_clients.mqttsn_client'
          - type: array
            items:
              $ref: '#/components/schemas/emqx_gateway_api_clients.stomp_client'
        meta:
          $ref: '#/components/schemas/public.meta'
      example:
        data: ""
        meta:
          limit: 50
          count: 0
          page: 1
          hasnext: true
    authentication_import_users_body_1:
      type: object
      properties:
        filename:
          type: string
          format: binary
    inline_response_200_27:
      required:
      - deny_action
      - no_match
      type: object
      properties:
        no_match:
          type: string
          description: "Default access control action if the user or client matches\
            \ no ACL rules,<br/>or if no such user or client is found by the configurable\
            \ authorization<br/>sources such as built_in_database, an HTTP API, or\
            \ a query against PostgreSQL.<br/>Find more details in 'authorization.sources'\
            \ config."
          default: allow
          enum:
          - allow
          - deny
        deny_action:
          type: string
          description: The action when the authorization check rejects an operation.
          default: ignore
          enum:
          - ignore
          - disconnect
        cache:
          $ref: '#/components/schemas/broker.authz_cache'
      example:
        cache:
          enable: true
          ttl: 12m
          max_size: 83973
        no_match: allow
        deny_action: ignore
    authorization_settings_body:
      required:
      - deny_action
      - no_match
      type: object
      properties:
        no_match:
          type: string
          description: "Default access control action if the user or client matches\
            \ no ACL rules,<br/>or if no such user or client is found by the configurable\
            \ authorization<br/>sources such as built_in_database, an HTTP API, or\
            \ a query against PostgreSQL.<br/>Find more details in 'authorization.sources'\
            \ config."
          default: allow
          enum:
          - allow
          - deny
        deny_action:
          type: string
          description: The action when the authorization check rejects an operation.
          default: ignore
          enum:
          - ignore
          - disconnect
        cache:
          $ref: '#/components/schemas/broker.authz_cache'
      example:
        cache:
          enable: true
          ttl: 12m
          max_size: 83973
        no_match: allow
        deny_action: ignore
    bridges_body:
      oneOf:
      - $ref: '#/components/schemas/bridge_webhook.post'
      - $ref: '#/components/schemas/bridge_mqtt.post'
    inline_response_400_34:
      type: object
      properties:
        code:
          type: string
          enum:
          - ALREADY_EXISTS
        message:
          type: string
          description: Bridge already exists
    logout_body:
      type: object
      properties:
        username:
          maxLength: 100
          type: string
          description: Dashboard Username
          example: admin
    inline_response_400_35:
      type: object
      properties:
        code:
          type: string
          enum:
          - BAD_REQUEST
        message:
          type: string
          description: Bad rule schema
    inline_response_400_36:
      type: object
      properties:
        code:
          type: string
          enum:
          - BAD_REQUEST
        message:
          type: string
          description: Invalid request
    exhook.hook_info_params:
      type: object
      properties:
        $name:
          type: string
      description: The parameters used when the hook is registered
      example:
        $name: $name
    inline_response_200_13_license:
      type: object
      properties:
        edition:
          type: string
          description: EMQX License. opensource or enterprise
          example: opensource
          enum:
          - opensource
          - enterprise
      example:
        edition: opensource
    inline_response_200_17_meta:
      type: object
      properties:
        page:
          minimum: 1
          type: integer
          description: View page
        limit:
          minimum: 1
          type: integer
          description: Page limit
        count:
          minimum: 0
          type: integer
          description: Count of delayed messages
      example:
        limit: 1
        count: 0
        page: 1
    inline_response_200_24_meta:
      type: object
      properties:
        bytes:
          maximum: 2147483647
          minimum: 0
          type: integer
          description: Maximum number of bytes to send in response
          default: 1000
        position:
          type: integer
          description: Offset from the current trace position.
          default: 0
      example:
        bytes: 171976544
        position: 6
  parameters:
    api_key.name:
      name: name
      in: path
      description: "^[A-Za-z]+[A-Za-z0-9-_]*$"
      required: true
      style: simple
      explode: false
      schema:
        type: string
      example: EMQX-API-KEY-1
    cluster.node:
      name: node
      in: path
      description: node name
      required: true
      style: simple
      explode: false
      schema:
        type: string
      example: emqx2@127.0.0.1
    emqx_authz_api_mnesia.clientid:
      name: clientid
      in: path
      description: ClientID
      required: true
      style: simple
      explode: false
      schema:
        type: string
      example: client1
    emqx_authz_api_mnesia.username:
      name: username
      in: path
      description: Username
      required: true
      style: simple
      explode: false
      schema:
        type: string
      example: user1
    emqx_mgmt_api_nodes.node_name:
      name: node
      in: path
      description: Node name
      required: true
      style: simple
      explode: false
      schema:
        type: string
      example: emqx@127.0.0.1
    emqx_mgmt_api_stats.aggregate:
      name: aggregate
      in: query
      description: Calculation aggregate for all nodes
      required: false
      style: form
      explode: true
      schema:
        type: boolean
      example: false
    listeners.listener_id:
      name: id
      in: path
      description: Listener id
      required: true
      style: simple
      explode: false
      schema:
        type: string
      example: tcp:demo
    plugins.name:
      name: name
      in: path
      description: "^[A-Za-z]+[A-Za-z0-9-_.]*$"
      required: true
      style: simple
      explode: false
      schema:
        type: string
      example: emqx_plugin_template-5.0-rc.1
    public.limit:
      name: limit
      in: query
      description: Results per page(max 1000)
      required: false
      style: form
      explode: true
      schema:
        maximum: 1000
        minimum: 1
        type: integer
        default: 100
      example: 50
    public.page:
      name: page
      in: query
      description: Page number of the results to fetch.
      required: false
      style: form
      explode: true
      schema:
        minimum: 1
        type: integer
        default: 1
      example: 1
    trace.bytes:
      name: bytes
      in: query
      description: Maximum number of bytes to send in response
      required: false
      style: form
      explode: true
      schema:
        maximum: 2147483647
        minimum: 0
        type: integer
        default: 1000
    trace.name:
      name: name
      in: path
      description: "[a-zA-Z0-9-_]"
      required: true
      style: simple
      explode: false
      schema:
        type: string
      example: EMQX-TRACE-1
    trace.node:
      name: node
      in: query
      description: Node name
      required: false
      style: form
      explode: true
      schema:
        type: string
      example: emqx@127.0.0.1
    trace.position:
      name: position
      in: query
      description: Offset from the current trace position.
      required: false
      style: form
      explode: true
      schema:
        type: integer
        default: 0
  securitySchemes:
    basicAuth:
      type: http
      description: "Authorize with [API Keys](https://www.emqx.io/docs/en/v5.0/admin/api.html#api-keys)"
      scheme: basic
    bearerAuth:
      type: http
      description: Authorize with Bearer Token
      scheme: bearer
