
/*
 * EMQX API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 5.1.3
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type SubscriptionsApiService service
/*
SubscriptionsApiService
List subscriptions
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *SubscriptionsApiSubscriptionsGetOpts - Optional Parameters:
     * @param "Page" (optional.Int32) -  Page number of the results to fetch.
     * @param "Limit" (optional.Int32) -  Results per page(max 1000)
     * @param "Node" (optional.String) -  Node name
     * @param "Clientid" (optional.String) -  Client ID
     * @param "Qos" (optional.Int32) -  QoS
     * @param "Topic" (optional.String) -  Topic, url encoding
     * @param "MatchTopic" (optional.String) -  Match topic string, url encoding
     * @param "ShareGroup" (optional.String) -  Shared subscription group name
@return []EmqxMgmtApiSubscriptionsSubscription
*/

type SubscriptionsApiSubscriptionsGetOpts struct {
    Page optional.Int32
    Limit optional.Int32
    Node optional.String
    Clientid optional.String
    Qos optional.Int32
    Topic optional.String
    MatchTopic optional.String
    ShareGroup optional.String
}

func (a *SubscriptionsApiService) SubscriptionsGet(ctx context.Context, localVarOptionals *SubscriptionsApiSubscriptionsGetOpts) ([]EmqxMgmtApiSubscriptionsSubscription, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue []EmqxMgmtApiSubscriptionsSubscription
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/subscriptions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Page.IsSet() {
		localVarQueryParams.Add("page", parameterToString(localVarOptionals.Page.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Node.IsSet() {
		localVarQueryParams.Add("node", parameterToString(localVarOptionals.Node.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Clientid.IsSet() {
		localVarQueryParams.Add("clientid", parameterToString(localVarOptionals.Clientid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Qos.IsSet() {
		localVarQueryParams.Add("qos", parameterToString(localVarOptionals.Qos.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Topic.IsSet() {
		localVarQueryParams.Add("topic", parameterToString(localVarOptionals.Topic.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MatchTopic.IsSet() {
		localVarQueryParams.Add("match_topic", parameterToString(localVarOptionals.MatchTopic.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ShareGroup.IsSet() {
		localVarQueryParams.Add("share_group", parameterToString(localVarOptionals.ShareGroup.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v []EmqxMgmtApiSubscriptionsSubscription
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v InlineResponse40020
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v InlineResponse5002
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
