/*
 * EMQX API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 5.1.3
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

type EmqxGatewayApiCoap struct {
	// Gateway Name
	Name string `json:"name,omitempty"`
	// The gateway server required minimum heartbeat interval.<br/>When connection mode is enabled, this parameter is used to set the minimum heartbeat interval for the connection to be alive
	Heartbeat string `json:"heartbeat,omitempty"`
	// Enable or disable connection mode.<br/>Connection mode is a feature of non-standard protocols. When connection mode is enabled, it is necessary to maintain the creation, authentication and alive of connection resources
	ConnectionRequired bool `json:"connection_required,omitempty"`
	// The Notification Message will be delivered to the CoAP client if a new message received on an observed topic.<br/>The type of delivered coap message can be set to:<br/><br/>  - non: Non-confirmable;<br/><br/>  - con: Confirmable;<br/><br/>  - qos: Mapping from QoS type of received message, QoS0 -> non, QoS1,2 -> con
	NotifyType string `json:"notify_type,omitempty"`
	// The Default QoS Level indicator for subscribe request.<br/>This option specifies the QoS level for the CoAP Client when establishing a subscription membership, if the subscribe request is not carried `qos` option. The indicator can be set to:<br/><br/>  - qos0, qos1, qos2: Fixed default QoS level<br/><br/>  - coap: Dynamic QoS level by the message type of subscribe request<br/><br/>    * qos0: If the subscribe request is non-confirmable<br/><br/>    * qos1: If the subscribe request is confirmable
	SubscribeQos string `json:"subscribe_qos,omitempty"`
	// The Default QoS Level indicator for publish request.<br/>This option specifies the QoS level for the CoAP Client when publishing a message to EMQX PUB/SUB system, if the publish request is not carried `qos` option. The indicator can be set to:<br/><br/>  - qos0, qos1, qos2: Fixed default QoS level<br/><br/>  - coap: Dynamic QoS level by the message type of publish request<br/><br/>    * qos0: If the publish request is non-confirmable<br/><br/>    * qos1: If the publish request is confirmable
	PublishQos string `json:"publish_qos,omitempty"`
	// When publishing or subscribing, prefix all topics with a mountpoint string.<br/>The prefixed string will be removed from the topic name when the message is delivered to the subscriber.<br/>The mountpoint is a way that users can use to implement isolation of message routing between different listeners.<br/>For example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint` set to `some_tenant`,<br/>then the client actually subscribes to the topic `some_tenant/t`.<br/>Similarly, if another client B (connected to the same listener as the client A) sends a message to topic `t`,<br/>the message is routed to all the clients subscribed `some_tenant/t`,<br/>so client A will receive the message, with topic name `t`. Set to `\"\"` to disable the feature.<br/>Variables in mountpoint string:<br/><br/>  - <code>${clientid}</code>: clientid<br/><br/>  - <code>${username}</code>: username
	Mountpoint string `json:"mountpoint,omitempty"`
	// Whether to enable this gateway
	Enable bool `json:"enable,omitempty"`
	// Whether to enable client process statistic
	EnableStats bool `json:"enable_stats,omitempty"`
	// The idle time of the client connection process. It has two purposes:<br/>  1. A newly created client process that does not receive any client requests after that time will be closed directly.<br/>  2. A running client process that does not receive any client requests after this time will go into hibernation to save resources.
	IdleTimeout string `json:"idle_timeout,omitempty"`
	ClientinfoOverride *GatewayClientinfoOverride `json:"clientinfo_override,omitempty"`
	Listeners []OneOfemqxGatewayApiCoapListenersItems `json:"listeners,omitempty"`
}
