/*
 * EMQX API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 5.1.3
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

type BridgeWebhookPost struct {
	// The Bridge Type
	Type_ string `json:"type"`
	// Bridge name, used as a human-readable description of the bridge.
	Name string `json:"name"`
	// Enable or disable this bridge
	Enable bool `json:"enable,omitempty"`
	ResourceOpts *BridgeWebhookCreationOpts `json:"resource_opts,omitempty"`
	// The timeout when connecting to the HTTP server.
	ConnectTimeout string `json:"connect_timeout,omitempty"`
	RetryInterval string `json:"retry_interval,omitempty"`
	// The type of the pool. Can be one of `random`, `hash`.
	PoolType string `json:"pool_type,omitempty"`
	// The pool size.
	PoolSize int32 `json:"pool_size,omitempty"`
	// A positive integer. Whether to send HTTP requests continuously, when set to 1, it means that after each HTTP request is sent, you need to wait for the server to return and then continue to send the next request.
	EnablePipelining int32 `json:"enable_pipelining,omitempty"`
	Request *ConnectorHttpRequest `json:"request,omitempty"`
	Ssl *BrokerSslClientOpts `json:"ssl,omitempty"`
	// The URL of the HTTP Bridge.<br/><br/>Template with variables is allowed in the path, but variables cannot be used in the scheme, host,<br/>or port part.<br/><br/>For example, <code> http://localhost:9901/${topic} </code> is allowed, but<br/><code> http://${host}:9901/message </code> or <code> http://localhost:${port}/message </code><br/>is not allowed.
	Url string `json:"url"`
	// Deprecated, The direction of this bridge, MUST be 'egress'
	Direction string `json:"direction,omitempty"`
	// The MQTT topic filter to be forwarded to the HTTP server. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded.
	LocalTopic string `json:"local_topic,omitempty"`
	// The method of the HTTP request. All the available methods are: post, put, get, delete.<br/><br/>Template with variables is allowed.
	Method string `json:"method,omitempty"`
	// The headers of the HTTP request.<br/><br/>Template with variables is allowed.
	Headers *interface{} `json:"headers,omitempty"`
	// The body of the HTTP request.<br/><br/>If not provided, the body will be a JSON object of all the available fields.<br/><br/>There, 'all the available fields' means the context of a MQTT message when<br/>this webhook is triggered by receiving a MQTT message (the `local_topic` is set),<br/>or the context of the event when this webhook is triggered by a rule (i.e. this<br/>webhook is used as an action of a rule).<br/><br/>Template with variables is allowed.
	Body string `json:"body,omitempty"`
	// HTTP request max retry times if failed.
	MaxRetries int32 `json:"max_retries,omitempty"`
	// HTTP request timeout.
	RequestTimeout string `json:"request_timeout,omitempty"`
}
